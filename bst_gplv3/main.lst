   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.rotary_process,"ax",@progbits
  11               	.global	rotary_process
  13               	rotary_process:
  14               	.LFB1:
  15               		.file 1 "main.c"
   1:main.c        **** /* 
   2:main.c        ****    firmware for some 3360 mouse
   3:main.c        ****    because of ben buxtons code this has to be licensed under gnu GPLv3
   4:main.c        **** 
   5:main.c        ****    Copyright (c) 2016 qsxcv
   6:main.c        **** 
   7:main.c        ****    Permission is hereby granted, free of charge, to any person obtaining a copy
   8:main.c        ****    of this software and associated documentation files (the "Software"), to deal
   9:main.c        ****    in the Software without restriction, including without limitation the rights
  10:main.c        ****    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  11:main.c        ****    copies of the Software, and to permit persons to whom the Software is
  12:main.c        ****    furnished to do so, subject to the following conditions:
  13:main.c        **** 
  14:main.c        ****    The above copyright notice and this permission notice shall be included in
  15:main.c        ****    all copies or substantial portions of the Software.
  16:main.c        **** 
  17:main.c        ****    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:main.c        ****    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  19:main.c        ****    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  20:main.c        ****    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  21:main.c        ****    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  22:main.c        ****    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  23:main.c        ****    THE SOFTWARE.
  24:main.c        **** */
  25:main.c        **** 
  26:main.c        **** // this code assumes
  27:main.c        **** 
  28:main.c        **** // 3360 NCS      <-> B0
  29:main.c        **** // 3360 SCLK    <-> B1
  30:main.c        **** // 3360 MOSI    <-> B2
  31:main.c        **** // 3360 MISO    <-> B3
  32:main.c        **** // 3360 NRESET set to high by pcb.
  33:main.c        **** // wheel B      <-> C6 (wheel up)
  34:main.c        **** // wheel A      <-> C7 (wheel down)
  35:main.c        **** // left button    <-> D0
  36:main.c        **** // right button   <-> D1
  37:main.c        **** // wheel button   <-> D2
  38:main.c        **** // L back side    <-> D3
  39:main.c        **** // L forwards side  <-> D4
  40:main.c        **** // dpi button   <-> D5
  41:main.c        **** // R LED      <-> B5
  42:main.c        **** // G LED      <-> B6
  43:main.c        **** // B LED      <-> D7
  44:main.c        **** 
  45:main.c        **** 
  46:main.c        **** #include <avr/io.h>
  47:main.c        **** #include <avr/pgmspace.h>
  48:main.c        **** #include <avr/interrupt.h>
  49:main.c        **** #include <avr/eeprom.h>
  50:main.c        **** #include "srom_3360_0x03.h"
  51:main.c        **** #include "usb_mouse.h"
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** #define DEBOUNCE_TIME 216 // debounce time in units of 125us. only affects release latency. 32 * 12
  55:main.c        **** //#define HARDEB  // hardware debouncing, disable MENU to avoid pin conflicts. pins can be randomly
  56:main.c        **** //#define MIX   // allow a mix of hardware and software debounced switches. must be defined when HA
  57:main.c        **** #define MENU  // disable this with HARDEB to avoid pin conflicts. you can still set the defaults in
  58:main.c        **** //#define INVERTX // to use a sensor rotated 180 degrees, invert both axes.
  59:main.c        **** //#define INVERTY // Y axis inversion, for games that dont support it.
  60:main.c        **** //#define INVERTWHL // wheel turns the wrong way.
  61:main.c        **** #define WHLBUX  // ben buxtons rotary encoder code
  62:main.c        **** #define WHLACC  //have to use WHLBUX and WHLACC together, not compatible with older wheel code.
  63:main.c        **** //#define RGB   // the classic intellimouse code from youtube, dont use with HARDEB unless you fix 
  64:main.c        **** 
  65:main.c        **** 
  66:main.c        **** #define delay_us(t) __builtin_avr_delay_cycles((t) * (F_CPU/1000000))
  67:main.c        **** #define delay_ms(t) __builtin_avr_delay_cycles((t) * (F_CPU/1000))
  68:main.c        **** 
  69:main.c        **** #define PORT_SPI PORTB
  70:main.c        **** #define DDR_SPI DDRB
  71:main.c        **** 
  72:main.c        **** #define DD_SS 0 // aka NCS
  73:main.c        **** #define DD_SCK  1
  74:main.c        **** #define DD_MOSI 2
  75:main.c        **** #define DD_MISO 3
  76:main.c        **** 
  77:main.c        **** #define SS_LOW  (PORT_SPI &= ~(1<<DD_SS))
  78:main.c        **** #define SS_HIGH (PORT_SPI |= (1<<DD_SS))
  79:main.c        **** 
  80:main.c        **** // modify these and corresponding stuff in pins_init() as needed
  81:main.c        **** 
  82:main.c        **** #ifndef WHLBUX
  83:main.c        **** #define WHL_A_IS_HIGH (!!(PINC & (1<<7))) 
  84:main.c        **** #define WHL_B_IS_HIGH (!!(PINC & (1<<6)))
  85:main.c        **** #endif
  86:main.c        **** 
  87:main.c        **** #ifdef WHLBUX
  88:main.c        **** /* Use the full-step state table (emits a code at 00 only) sums to 0xf8 or 248
  89:main.c        ****   const uint8_t ttable[7][4] = {
  90:main.c        ****   {0x0, 0x2, 0x4,  0x0}, {0x3, 0x0, 0x1, 0x40},
  91:main.c        ****   {0x3, 0x2, 0x0,  0x0}, {0x3, 0x2, 0x1,  0x0},
  92:main.c        ****   {0x6, 0x0, 0x4,  0x0}, {0x6, 0x5, 0x0, 0x80},
  93:main.c        ****   {0x6, 0x5, 0x4,  0x0},
  94:main.c        ****   };
  95:main.c        **** */
  96:main.c        **** volatile int8_t state = 0;
  97:main.c        **** // Use the half-step state table (emits a code at 00 and 11) sums to 0x1b0 or 432
  98:main.c        **** const uint8_t ttable[6][4] = {
  99:main.c        ****   {0x3 , 0x2, 0x1,  0x0}, {0x83, 0x0, 0x1,  0x0},
 100:main.c        ****   {0x43, 0x2, 0x0,  0x0}, {0x3 , 0x5, 0x4,  0x0},
 101:main.c        ****   {0x3 , 0x3, 0x4, 0x40}, {0x3 , 0x5, 0x3, 0x80}
 102:main.c        **** };
 103:main.c        **** 
 104:main.c        **** int8_t oldpinstate = 0;
 105:main.c        **** uint8_t rotary_process(int8_t pinstate)
 106:main.c        **** {
  16               		.loc 1 106 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 107:main.c        ****   state = ttable[state & 0xf][pinstate];
  23               		.loc 1 107 0
  24 0000 2091 0000 		lds r18,state
  25 0004 2F70      		andi r18,lo8(15)
  26 0006 94E0      		ldi r25,lo8(4)
  27 0008 299F      		mul r18,r25
  28 000a 9001      		movw r18,r0
  29 000c 1124      		clr __zero_reg__
  30 000e 2050      		subi r18,lo8(-(ttable))
  31 0010 3040      		sbci r19,hi8(-(ttable))
  32 0012 F901      		movw r30,r18
  33 0014 E80F      		add r30,r24
  34 0016 F11D      		adc r31,__zero_reg__
  35 0018 87FD      		sbrc r24,7
  36 001a FA95      		dec r31
  37 001c 8081      		ld r24,Z
  38               	.LVL1:
  39 001e 8093 0000 		sts state,r24
 108:main.c        ****   return (state & 0xc0);
  40               		.loc 1 108 0
  41 0022 8091 0000 		lds r24,state
 109:main.c        **** }
  42               		.loc 1 109 0
  43 0026 807C      		andi r24,lo8(-64)
  44 0028 0895      		ret
  45               		.cfi_endproc
  46               	.LFE1:
  48               		.section	.text.startup.main,"ax",@progbits
  49               	.global	main
  51               	main:
  52               	.LFB10:
 110:main.c        **** #endif
 111:main.c        **** // use this instead of bitshifts or LSB/MSB macros.
 112:main.c        **** union motion_data {
 113:main.c        ****   int16_t all;
 114:main.c        ****   struct {
 115:main.c        ****     uint8_t lo, hi;
 116:main.c        ****   };
 117:main.c        **** };
 118:main.c        **** 
 119:main.c        **** static void pins_init(void)
 120:main.c        **** {
 121:main.c        ****   // buttons
 122:main.c        **** #ifndef HARDEB
 123:main.c        ****   PORTD |= 0b00111111; // L, R, M, FSB, RSB, DPI
 124:main.c        **** #endif
 125:main.c        **** #ifdef HARDEB
 126:main.c        ****   PORTD |= 0b10000111; //
 127:main.c        ****   PORTF |= 0b11110011; //
 128:main.c        ****   DDRD &= 0b10000111; //pullup inputs
 129:main.c        ****   DDRF &= 0b11110011; //pullup inputs
 130:main.c        **** #endif
 131:main.c        **** 
 132:main.c        ****   // wheel (mechanical encoder, quadrature outputs A/B)
 133:main.c        ****   DDRC &= ~((1 << 6) | (1 << 7)); // pullup inputs on C6, C7
 134:main.c        ****   PORTC |= (1 << 6) | (1 << 7);
 135:main.c        **** 
 136:main.c        ****   // teensy LED
 137:main.c        ****   DDRD |= (1 << 6);
 138:main.c        **** #ifdef RGB
 139:main.c        ****   // RGB LED
 140:main.c        ****   DDRB |= (1 << 5) | (1 << 6);
 141:main.c        ****   DDRD |= (1 << 7);
 142:main.c        ****   PORTB |= (1 << 5); // Red (off)
 143:main.c        ****   PORTB |= (1 << 6); // Green (off)
 144:main.c        ****   PORTD |= (1 << 7); // Blue (off)
 145:main.c        **** #endif
 146:main.c        ****   // not necssary if NRESET is pulled high in PCB
 147:main.c        ****   //DDRC |= (1<<7); PORTC |= (1<<7); // C7, NRESET high output
 148:main.c        **** 
 149:main.c        ****   EICRA = 0b01010101; // generate interrupt request on any edge of D0/D1/D2/D3
 150:main.c        ****   EIMSK = 0; // but don't enable any actual interrupts
 151:main.c        ****   EIFR = 0b00001111; // clear EIFR
 152:main.c        **** }
 153:main.c        **** 
 154:main.c        **** // spi functions
 155:main.c        **** static void spi_init(void)
 156:main.c        **** {
 157:main.c        ****   DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_SS); // outputs
 158:main.c        ****   DDRB |= (1 << 0); PORTB |= (1 << 0); // set the hardware SS pin to low to enable SPI
 159:main.c        ****   // MISO pullup input is already done in hardware
 160:main.c        ****   // enable spi, master mode, mode 3, clock rate = fck/4 = 2MHz
 161:main.c        ****   SPCR = (1 << SPE) | (1 << MSTR) | (1 << CPOL) | (1 << CPHA);
 162:main.c        **** }
 163:main.c        **** 
 164:main.c        **** static inline void spi_send(const uint8_t b)
 165:main.c        **** {
 166:main.c        ****   SPDR = b;
 167:main.c        ****   while (!(SPSR & (1 << SPIF)));
 168:main.c        **** }
 169:main.c        **** 
 170:main.c        **** static inline uint8_t spi_recv(void)
 171:main.c        **** {
 172:main.c        ****   spi_send(0x00);
 173:main.c        ****   return SPDR;
 174:main.c        **** }
 175:main.c        **** 
 176:main.c        **** static inline void spi_write(const uint8_t addr, const uint8_t data)
 177:main.c        **** {
 178:main.c        ****   spi_send(addr | 0x80);
 179:main.c        ****   spi_send(data);
 180:main.c        ****   delay_us(180); // maximum of t_SWW, t_SWR
 181:main.c        **** }
 182:main.c        **** 
 183:main.c        **** static inline uint8_t spi_read(const uint8_t addr)
 184:main.c        **** {
 185:main.c        ****   spi_send(addr);
 186:main.c        ****   delay_us(160); // t_SRAD
 187:main.c        ****   uint8_t data = spi_recv();
 188:main.c        ****   delay_us(20);
 189:main.c        ****   return data;
 190:main.c        **** }
 191:main.c        **** 
 192:main.c        **** // dpi argument is what's written to register 0x0f
 193:main.c        **** // actual dpi value = (dpi + 1) * 100
 194:main.c        **** static void pmw3360_init(const uint8_t dpi)
 195:main.c        **** {
 196:main.c        ****   const uint8_t *psrom = srom;
 197:main.c        **** 
 198:main.c        ****   SS_HIGH;
 199:main.c        ****   delay_ms(3);
 200:main.c        **** 
 201:main.c        ****   // shutdown first
 202:main.c        ****   SS_LOW;
 203:main.c        ****   spi_write(0x3b, 0xb6);
 204:main.c        ****   SS_HIGH;
 205:main.c        ****   delay_ms(300);
 206:main.c        **** 
 207:main.c        ****   // drop and raise ncs to reset spi port
 208:main.c        ****   SS_LOW;
 209:main.c        ****   delay_us(40);
 210:main.c        ****   SS_HIGH;
 211:main.c        ****   delay_us(40);
 212:main.c        **** 
 213:main.c        ****   // power up reset
 214:main.c        ****   SS_LOW;
 215:main.c        ****   spi_write(0x3a, 0x5a);
 216:main.c        ****   SS_HIGH;
 217:main.c        ****   delay_ms(50);
 218:main.c        **** 
 219:main.c        ****   // read from 0x02 to 0x06
 220:main.c        ****   SS_LOW;
 221:main.c        ****   spi_read(0x02);
 222:main.c        ****   spi_read(0x03);
 223:main.c        ****   spi_read(0x04);
 224:main.c        ****   spi_read(0x05);
 225:main.c        ****   spi_read(0x06);
 226:main.c        **** 
 227:main.c        ****   // srom download
 228:main.c        ****   spi_write(0x10, 0x00);
 229:main.c        ****   spi_write(0x13, 0x1d);
 230:main.c        ****   SS_HIGH;
 231:main.c        ****   delay_ms(10);
 232:main.c        ****   SS_LOW;
 233:main.c        ****   spi_write(0x13, 0x18);
 234:main.c        **** 
 235:main.c        ****   spi_send(0x62 | 0x80);
 236:main.c        ****   for (uint16_t i = 0; i < SROM_LENGTH; i++) {
 237:main.c        ****     delay_us(16);
 238:main.c        ****     spi_send(pgm_read_byte(psrom++));
 239:main.c        ****   }
 240:main.c        ****   delay_us(18);
 241:main.c        ****   SS_HIGH;
 242:main.c        ****   delay_us(200);
 243:main.c        **** 
 244:main.c        ****   // configuration/settings
 245:main.c        ****   SS_LOW;
 246:main.c        ****   spi_write(0x10, 0x00); // Rest mode & independant X/Y DPI disabled
 247:main.c        ****   spi_write(0x0d, 0x00); // Camera angle
 248:main.c        ****   spi_write(0x11, 0x00); // Camera angle fine tuning
 249:main.c        ****   spi_write(0x0f, dpi); // DPI
 250:main.c        ****   // LOD Stuff
 251:main.c        ****   spi_write(0x63, 0x02); // LOD: 0x00 disable lift detection, 0x02 = 2mm, 0x03 = 3mm
 252:main.c        ****   spi_write(0x2b, 0x10); // Minimum SQUAL for zero motion data (default: 0x10)
 253:main.c        ****   spi_write(0x2c, 0x0a); // Minimum Valid features (reduce SQUAL score) (default: 0x0a)
 254:main.c        ****   SS_HIGH;
 255:main.c        ****   delay_us(200);
 256:main.c        **** }
 257:main.c        **** 
 258:main.c        **** // angle snapping
 259:main.c        **** static void angle_init(const uint8_t angle) {
 260:main.c        ****   SS_LOW;
 261:main.c        ****   spi_write(0x42, angle); // Angle snapping: 0x00 = off, 0x80 = on
 262:main.c        ****   SS_HIGH;
 263:main.c        **** }
 264:main.c        **** 
 265:main.c        **** #ifdef HARDEB
 266:main.c        **** uint8_t btn_dbncd = 0x00;
 267:main.c        **** #endif
 268:main.c        **** 
 269:main.c        **** #ifdef WHLACC
 270:main.c        **** //y=ax+c line
 271:main.c        **** int8_t whl_time = 0;
 272:main.c        **** int8_t whl_eighth = 0;
 273:main.c        **** int8_t rev = 0;
 274:main.c        **** int8_t stack = 0;
 275:main.c        **** int8_t _rev = 18;
 276:main.c        **** #endif
 277:main.c        **** 
 278:main.c        **** int main(void)
 279:main.c        **** {
  53               		.loc 1 279 0
  54               		.cfi_startproc
  55 0000 CF93      		push r28
  56               	.LCFI0:
  57               		.cfi_def_cfa_offset 3
  58               		.cfi_offset 28, -2
  59 0002 DF93      		push r29
  60               	.LCFI1:
  61               		.cfi_def_cfa_offset 4
  62               		.cfi_offset 29, -3
  63 0004 00D0      		rcall .
  64 0006 00D0      		rcall .
  65 0008 00D0      		rcall .
  66               	.LCFI2:
  67               		.cfi_def_cfa_offset 10
  68 000a CDB7      		in r28,__SP_L__
  69 000c DEB7      		in r29,__SP_H__
  70               	.LCFI3:
  71               		.cfi_def_cfa_register 28
  72               	/* prologue: function */
  73               	/* frame size = 6 */
  74               	/* stack size = 8 */
  75               	.L__stack_usage = 8
 280:main.c        ****   union motion_data x, y;
 281:main.c        **** 
 282:main.c        ****   // set clock prescaler for 16MHz
 283:main.c        ****   CLKPR = 0x80;
  76               		.loc 1 283 0
  77 000e 80E8      		ldi r24,lo8(-128)
  78 0010 8093 6100 		sts 97,r24
 284:main.c        ****   CLKPR = 0x00;
  79               		.loc 1 284 0
  80 0014 1092 6100 		sts 97,__zero_reg__
  81               	.LBB336:
  82               	.LBB337:
 123:main.c        **** #endif
  83               		.loc 1 123 0
  84 0018 8BB1      		in r24,0xb
  85 001a 8F63      		ori r24,lo8(63)
  86 001c 8BB9      		out 0xb,r24
 133:main.c        ****   PORTC |= (1 << 6) | (1 << 7);
  87               		.loc 1 133 0
  88 001e 87B1      		in r24,0x7
  89 0020 8F73      		andi r24,lo8(63)
  90 0022 87B9      		out 0x7,r24
 134:main.c        **** 
  91               		.loc 1 134 0
  92 0024 88B1      		in r24,0x8
  93 0026 806C      		ori r24,lo8(-64)
  94 0028 88B9      		out 0x8,r24
 137:main.c        **** #ifdef RGB
  95               		.loc 1 137 0
  96 002a 569A      		sbi 0xa,6
 149:main.c        ****   EIMSK = 0; // but don't enable any actual interrupts
  97               		.loc 1 149 0
  98 002c 85E5      		ldi r24,lo8(85)
  99 002e 8093 6900 		sts 105,r24
 150:main.c        ****   EIFR = 0b00001111; // clear EIFR
 100               		.loc 1 150 0
 101 0032 1DBA      		out 0x1d,__zero_reg__
 151:main.c        **** }
 102               		.loc 1 151 0
 103 0034 8FE0      		ldi r24,lo8(15)
 104 0036 8CBB      		out 0x1c,r24
 105               	.LBE337:
 106               	.LBE336:
 285:main.c        **** 
 286:main.c        ****   pins_init();
 287:main.c        **** 
 288:main.c        ****   // previous state to compare against for debouncing
 289:main.c        ****   uint8_t btn_prev = (~PIND) & 0b00111111; // read L, R, M, FSB, RSB, DPI
 107               		.loc 1 289 0
 108 0038 29B1      		in r18,0x9
 109 003a 2095      		com r18
 110 003c 2F73      		andi r18,lo8(63)
 111 003e 2D83      		std Y+5,r18
 112               	.LVL2:
 290:main.c        ****   // time (in 125us) button has been unpressed.
 291:main.c        ****   // consider button to be released if this time exceeds DEBOUNCE_TIME.
 292:main.c        **** #ifdef MIX
 293:main.c        ****   uint8_t btn_time[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 294:main.c        **** #endif
 295:main.c        **** #ifndef HARDEB
 296:main.c        ****   uint8_t btn_time[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 297:main.c        **** #endif
 298:main.c        **** 
 299:main.c        **** #ifdef RGB
 300:main.c        ****   // RGB Timers
 301:main.c        ****   uint8_t led_max_timer = 16; // Timer maximum
 302:main.c        ****   uint8_t led_r_timer = 0; // Red LED Timer initial value
 303:main.c        ****   uint8_t led_g_timer = 0; // Green LED Timer initial value
 304:main.c        ****   uint8_t led_b_timer = 0; // Blue LED Timer initial value
 305:main.c        ****   // RGB Brightness
 306:main.c        ****   uint8_t led_bright_index = 4;
 307:main.c        ****   float led_bright[] = {0, 0.25, 0.5, 0.75, 1};
 308:main.c        ****   float led_rgb_brightness = led_bright[led_bright_index];
 309:main.c        ****   // RGB Initial Values
 310:main.c        ****   uint8_t led_r_value = 0; // Red LED brightness: 0-255
 311:main.c        ****   uint8_t led_g_value = 0; // Green LED brightness: 0-255
 312:main.c        ****   uint8_t led_b_value = 0; // Blue LED brightness: 0-255
 313:main.c        ****   // RGB Colour Selection
 314:main.c        ****   uint8_t led_colours_index = 1;
 315:main.c        ****   uint8_t led_colours[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
 316:main.c        ****   uint8_t led_colour = led_colours[led_colours_index];
 317:main.c        ****   // Profiles Intitial Values
 318:main.c        ****   uint8_t p1_led_colour = 1; // Red
 319:main.c        ****   uint8_t p2_led_colour = 2; // Pink
 320:main.c        ****   uint8_t p3_led_colour = 4; // Purple
 321:main.c        ****   uint8_t p1_led_brightness = 4; // 0 = 0, 1 = 0.25, 2 = 0.5, 3 = 0.75, 4 = 1
 322:main.c        ****   uint8_t p2_led_brightness = 4;
 323:main.c        ****   uint8_t p3_led_brightness = 4;
 324:main.c        **** #endif
 325:main.c        ****   // binary OR of all button states since previous usb transmission
 326:main.c        ****   uint8_t btn_usb = 0x00;
 327:main.c        ****   // previously transmitted button state
 328:main.c        ****   uint8_t btn_usb_prev = 0x00;
 329:main.c        ****   // if dpi button is pressed when plugging in, jump to bootloader
 330:main.c        ****   // see https://www.pjrc.com/teensy/jump_to_bootloader.html
 331:main.c        ****   delay_ms(50);
 113               		.loc 1 331 0
 114 0040 3FEF      		ldi r19,lo8(159999)
 115 0042 50E7      		ldi r21,hi8(159999)
 116 0044 82E0      		ldi r24,hlo8(159999)
 117 0046 3150      	1:	subi r19,1
 118 0048 5040      		sbci r21,0
 119 004a 8040      		sbci r24,0
 120 004c 01F4      		brne 1b
 121 004e 00C0      		rjmp .
 122 0050 0000      		nop
 332:main.c        **** #ifndef HARDEB
 333:main.c        ****   if (!(PIND & (1 << 1)))
 123               		.loc 1 333 0
 124 0052 4999      		sbic 0x9,1
 125 0054 00C0      		rjmp .L3
 334:main.c        ****     __asm__ volatile ("jmp 0x7e00");
 126               		.loc 1 334 0
 127               	/* #APP */
 128               	 ;  334 "main.c" 1
 129 0056 0C94 003F 		jmp 0x7e00
 130               	 ;  0 "" 2
 131               	/* #NOAPP */
 132               	.L3:
 133               	.LVL3:
 134               	.LBB338:
 135               	.LBB339:
 157:main.c        ****   DDRB |= (1 << 0); PORTB |= (1 << 0); // set the hardware SS pin to low to enable SPI
 136               		.loc 1 157 0
 137 005a 84B1      		in r24,0x4
 138 005c 8760      		ori r24,lo8(7)
 139 005e 84B9      		out 0x4,r24
 158:main.c        ****   // MISO pullup input is already done in hardware
 140               		.loc 1 158 0
 141 0060 209A      		sbi 0x4,0
 142 0062 289A      		sbi 0x5,0
 161:main.c        **** }
 143               		.loc 1 161 0
 144 0064 8CE5      		ldi r24,lo8(92)
 145 0066 8CBD      		out 0x2c,r24
 146               	.LVL4:
 147               	.LBE339:
 148               	.LBE338:
 335:main.c        **** #endif
 336:main.c        **** #ifdef HARDEB
 337:main.c        ****   if (!(PINF & (1 << 4)))
 338:main.c        ****     __asm__ volatile ("jmp 0x7e00");
 339:main.c        **** #endif
 340:main.c        **** 
 341:main.c        ****   // wheel stuff
 342:main.c        **** #ifndef WHLBUX
 343:main.c        ****   uint8_t whl_prev_same = 0; // what A was the last time A == B
 344:main.c        ****   uint8_t whl_prev_diff = 0; // what A was the last time A != B
 345:main.c        **** #endif
 346:main.c        ****   int8_t whl = 0; // scrolls since previous usb transmission
 347:main.c        **** 
 348:main.c        ****   spi_init();
 349:main.c        **** 
 350:main.c        ****   // Angle snapping settings
 351:main.c        ****   uint8_t angle_index = 0;
 352:main.c        ****   uint8_t angles[] = {0x00, 0x80}; // Off, On
 353:main.c        **** 
 354:main.c        **** #ifdef RGB
 355:main.c        ****   // Initial profile
 356:main.c        ****   uint8_t profile = 1; //generates compiler warning unless rgb is enabled
 357:main.c        **** 
 358:main.c        **** #endif
 359:main.c        ****   // dpi settings
 360:main.c        ****   uint8_t dpi_index = 1;
 361:main.c        ****   uint8_t dpis[] = {3, 7, 15};
 362:main.c        **** 
 363:main.c        ****   // Profile switching when mouse is plugged in
 364:main.c        ****   delay_ms(50);
 149               		.loc 1 364 0
 150 0068 9FEF      		ldi r25,lo8(159999)
 151 006a E0E7      		ldi r30,hi8(159999)
 152 006c F2E0      		ldi r31,hlo8(159999)
 153 006e 9150      	1:	subi r25,1
 154 0070 E040      		sbci r30,0
 155 0072 F040      		sbci r31,0
 156 0074 01F4      		brne 1b
 157 0076 00C0      		rjmp .
 158 0078 0000      		nop
 365:main.c        **** #ifdef MENU
 366:main.c        ****   if (!(PIND & (1 << 3))) {
 159               		.loc 1 366 0
 160 007a 4B9B      		sbis 0x9,3
 161 007c 00C0      		rjmp .L103
 367:main.c        ****     #ifdef RGB
 368:main.c        ****     // Initial profile
 369:main.c        ****     profile = 2;
 370:main.c        ****     #endif
 371:main.c        ****     // dpi settings
 372:main.c        ****     dpi_index = 0;
 373:main.c        ****   }
 374:main.c        **** 
 375:main.c        ****   else if (!(PIND & (1 << 4))) {
 162               		.loc 1 375 0
 163 007e 4C9B      		sbis 0x9,4
 164 0080 00C0      		rjmp .L104
 165 0082 87E0      		ldi r24,lo8(7)
 166               	.L4:
 167               	.LVL5:
 168               	.LBB340:
 169               	.LBB341:
 198:main.c        ****   delay_ms(3);
 170               		.loc 1 198 0
 171 0084 289A      		sbi 0x5,0
 199:main.c        **** 
 172               		.loc 1 199 0
 173 0086 EFED      		ldi r30,lo8(11999)
 174 0088 FEE2      		ldi r31,hi8(11999)
 175 008a 3197      	1:	sbiw r30,1
 176 008c 01F4      		brne 1b
 177 008e 00C0      		rjmp .
 178 0090 0000      		nop
 202:main.c        ****   spi_write(0x3b, 0xb6);
 179               		.loc 1 202 0
 180 0092 2898      		cbi 0x5,0
 181               	.LVL6:
 182               	.LBB342:
 183               	.LBB343:
 184               	.LBB344:
 185               	.LBB345:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 186               		.loc 1 166 0
 187 0094 9BEB      		ldi r25,lo8(-69)
 188 0096 9EBD      		out 0x2e,r25
 189               	.L5:
 167:main.c        **** }
 190               		.loc 1 167 0
 191 0098 0DB4      		in __tmp_reg__,0x2d
 192 009a 07FE      		sbrs __tmp_reg__,7
 193 009c 00C0      		rjmp .L5
 194               	.LVL7:
 195               	.LBE345:
 196               	.LBE344:
 197               	.LBB346:
 198               	.LBB347:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 199               		.loc 1 166 0
 200 009e 96EB      		ldi r25,lo8(-74)
 201 00a0 9EBD      		out 0x2e,r25
 202               	.L6:
 167:main.c        **** }
 203               		.loc 1 167 0
 204 00a2 0DB4      		in __tmp_reg__,0x2d
 205 00a4 07FE      		sbrs __tmp_reg__,7
 206 00a6 00C0      		rjmp .L6
 207               	.LVL8:
 208               	.LBE347:
 209               	.LBE346:
 180:main.c        **** }
 210               		.loc 1 180 0
 211 00a8 EFEC      		ldi r30,lo8(719)
 212 00aa F2E0      		ldi r31,hi8(719)
 213 00ac 3197      	1:	sbiw r30,1
 214 00ae 01F4      		brne 1b
 215 00b0 00C0      		rjmp .
 216 00b2 0000      		nop
 217               	.LVL9:
 218               	.LBE343:
 219               	.LBE342:
 204:main.c        ****   delay_ms(300);
 220               		.loc 1 204 0
 221 00b4 289A      		sbi 0x5,0
 205:main.c        **** 
 222               		.loc 1 205 0
 223 00b6 FFEF      		ldi r31,lo8(959999)
 224 00b8 25EA      		ldi r18,hi8(959999)
 225 00ba 3EE0      		ldi r19,hlo8(959999)
 226 00bc F150      	1:	subi r31,1
 227 00be 2040      		sbci r18,0
 228 00c0 3040      		sbci r19,0
 229 00c2 01F4      		brne 1b
 230               	.LVL10:
 231 00c4 00C0      		rjmp .
 232 00c6 0000      		nop
 208:main.c        ****   delay_us(40);
 233               		.loc 1 208 0
 234 00c8 2898      		cbi 0x5,0
 209:main.c        ****   SS_HIGH;
 235               		.loc 1 209 0
 236 00ca 55ED      		ldi r21,lo8(-43)
 237 00cc 5A95      	1:	dec r21
 238 00ce 01F4      		brne 1b
 239 00d0 0000      		nop
 210:main.c        ****   delay_us(40);
 240               		.loc 1 210 0
 241 00d2 289A      		sbi 0x5,0
 211:main.c        **** 
 242               		.loc 1 211 0
 243 00d4 95ED      		ldi r25,lo8(-43)
 244 00d6 9A95      	1:	dec r25
 245 00d8 01F4      		brne 1b
 246 00da 0000      		nop
 214:main.c        ****   spi_write(0x3a, 0x5a);
 247               		.loc 1 214 0
 248 00dc 2898      		cbi 0x5,0
 249               	.LVL11:
 250               	.LBB348:
 251               	.LBB349:
 252               	.LBB350:
 253               	.LBB351:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 254               		.loc 1 166 0
 255 00de 9AEB      		ldi r25,lo8(-70)
 256 00e0 9EBD      		out 0x2e,r25
 257               	.L7:
 167:main.c        **** }
 258               		.loc 1 167 0
 259 00e2 0DB4      		in __tmp_reg__,0x2d
 260 00e4 07FE      		sbrs __tmp_reg__,7
 261 00e6 00C0      		rjmp .L7
 262               	.LVL12:
 263               	.LBE351:
 264               	.LBE350:
 265               	.LBB352:
 266               	.LBB353:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 267               		.loc 1 166 0
 268 00e8 9AE5      		ldi r25,lo8(90)
 269 00ea 9EBD      		out 0x2e,r25
 270               	.L8:
 167:main.c        **** }
 271               		.loc 1 167 0
 272 00ec 0DB4      		in __tmp_reg__,0x2d
 273 00ee 07FE      		sbrs __tmp_reg__,7
 274 00f0 00C0      		rjmp .L8
 275               	.LVL13:
 276               	.LBE353:
 277               	.LBE352:
 180:main.c        **** }
 278               		.loc 1 180 0
 279 00f2 EFEC      		ldi r30,lo8(719)
 280 00f4 F2E0      		ldi r31,hi8(719)
 281 00f6 3197      	1:	sbiw r30,1
 282 00f8 01F4      		brne 1b
 283 00fa 00C0      		rjmp .
 284 00fc 0000      		nop
 285               	.LVL14:
 286               	.LBE349:
 287               	.LBE348:
 216:main.c        ****   delay_ms(50);
 288               		.loc 1 216 0
 289 00fe 289A      		sbi 0x5,0
 217:main.c        **** 
 290               		.loc 1 217 0
 291 0100 FFEF      		ldi r31,lo8(159999)
 292 0102 20E7      		ldi r18,hi8(159999)
 293 0104 32E0      		ldi r19,hlo8(159999)
 294 0106 F150      	1:	subi r31,1
 295 0108 2040      		sbci r18,0
 296 010a 3040      		sbci r19,0
 297 010c 01F4      		brne 1b
 298 010e 00C0      		rjmp .
 299 0110 0000      		nop
 220:main.c        ****   spi_read(0x02);
 300               		.loc 1 220 0
 301 0112 2898      		cbi 0x5,0
 302               	.LVL15:
 303               	.LBB354:
 304               	.LBB355:
 305               	.LBB356:
 306               	.LBB357:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 307               		.loc 1 166 0
 308 0114 92E0      		ldi r25,lo8(2)
 309 0116 9EBD      		out 0x2e,r25
 310               	.L9:
 167:main.c        **** }
 311               		.loc 1 167 0
 312 0118 0DB4      		in __tmp_reg__,0x2d
 313 011a 07FE      		sbrs __tmp_reg__,7
 314 011c 00C0      		rjmp .L9
 315               	.LVL16:
 316               	.LBE357:
 317               	.LBE356:
 186:main.c        ****   uint8_t data = spi_recv();
 318               		.loc 1 186 0
 319 011e EFE7      		ldi r30,lo8(639)
 320 0120 F2E0      		ldi r31,hi8(639)
 321 0122 3197      	1:	sbiw r30,1
 322 0124 01F4      		brne 1b
 323 0126 00C0      		rjmp .
 324 0128 0000      		nop
 325               	.LVL17:
 326               	.LBB358:
 327               	.LBB359:
 328               	.LBB360:
 329               	.LBB361:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 330               		.loc 1 166 0
 331 012a 1EBC      		out 0x2e,__zero_reg__
 332               	.L10:
 167:main.c        **** }
 333               		.loc 1 167 0
 334 012c 0DB4      		in __tmp_reg__,0x2d
 335 012e 07FE      		sbrs __tmp_reg__,7
 336 0130 00C0      		rjmp .L10
 337               	.LVL18:
 338               	.LBE361:
 339               	.LBE360:
 173:main.c        **** }
 340               		.loc 1 173 0
 341 0132 9EB5      		in r25,0x2e
 342               	.LBE359:
 343               	.LBE358:
 188:main.c        ****   return data;
 344               		.loc 1 188 0
 345 0134 FAE6      		ldi r31,lo8(106)
 346 0136 FA95      	1:	dec r31
 347 0138 01F4      		brne 1b
 348 013a 00C0      		rjmp .
 349               	.LVL19:
 350               	.LBE355:
 351               	.LBE354:
 352               	.LBB362:
 353               	.LBB363:
 354               	.LBB364:
 355               	.LBB365:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 356               		.loc 1 166 0
 357 013c 93E0      		ldi r25,lo8(3)
 358 013e 9EBD      		out 0x2e,r25
 359               	.L11:
 167:main.c        **** }
 360               		.loc 1 167 0
 361 0140 0DB4      		in __tmp_reg__,0x2d
 362 0142 07FE      		sbrs __tmp_reg__,7
 363 0144 00C0      		rjmp .L11
 364               	.LVL20:
 365               	.LBE365:
 366               	.LBE364:
 186:main.c        ****   uint8_t data = spi_recv();
 367               		.loc 1 186 0
 368 0146 EFE7      		ldi r30,lo8(639)
 369 0148 F2E0      		ldi r31,hi8(639)
 370 014a 3197      	1:	sbiw r30,1
 371 014c 01F4      		brne 1b
 372 014e 00C0      		rjmp .
 373 0150 0000      		nop
 374               	.LVL21:
 375               	.LBB366:
 376               	.LBB367:
 377               	.LBB368:
 378               	.LBB369:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 379               		.loc 1 166 0
 380 0152 1EBC      		out 0x2e,__zero_reg__
 381               	.L12:
 167:main.c        **** }
 382               		.loc 1 167 0
 383 0154 0DB4      		in __tmp_reg__,0x2d
 384 0156 07FE      		sbrs __tmp_reg__,7
 385 0158 00C0      		rjmp .L12
 386               	.LVL22:
 387               	.LBE369:
 388               	.LBE368:
 173:main.c        **** }
 389               		.loc 1 173 0
 390 015a 9EB5      		in r25,0x2e
 391               	.LBE367:
 392               	.LBE366:
 188:main.c        ****   return data;
 393               		.loc 1 188 0
 394 015c FAE6      		ldi r31,lo8(106)
 395 015e FA95      	1:	dec r31
 396 0160 01F4      		brne 1b
 397 0162 00C0      		rjmp .
 398               	.LVL23:
 399               	.LBE363:
 400               	.LBE362:
 401               	.LBB370:
 402               	.LBB371:
 403               	.LBB372:
 404               	.LBB373:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 405               		.loc 1 166 0
 406 0164 94E0      		ldi r25,lo8(4)
 407 0166 9EBD      		out 0x2e,r25
 408               	.L13:
 167:main.c        **** }
 409               		.loc 1 167 0
 410 0168 0DB4      		in __tmp_reg__,0x2d
 411 016a 07FE      		sbrs __tmp_reg__,7
 412 016c 00C0      		rjmp .L13
 413               	.LVL24:
 414               	.LBE373:
 415               	.LBE372:
 186:main.c        ****   uint8_t data = spi_recv();
 416               		.loc 1 186 0
 417 016e EFE7      		ldi r30,lo8(639)
 418 0170 F2E0      		ldi r31,hi8(639)
 419 0172 3197      	1:	sbiw r30,1
 420 0174 01F4      		brne 1b
 421 0176 00C0      		rjmp .
 422 0178 0000      		nop
 423               	.LVL25:
 424               	.LBB374:
 425               	.LBB375:
 426               	.LBB376:
 427               	.LBB377:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 428               		.loc 1 166 0
 429 017a 1EBC      		out 0x2e,__zero_reg__
 430               	.L14:
 167:main.c        **** }
 431               		.loc 1 167 0
 432 017c 0DB4      		in __tmp_reg__,0x2d
 433 017e 07FE      		sbrs __tmp_reg__,7
 434 0180 00C0      		rjmp .L14
 435               	.LVL26:
 436               	.LBE377:
 437               	.LBE376:
 173:main.c        **** }
 438               		.loc 1 173 0
 439 0182 9EB5      		in r25,0x2e
 440               	.LBE375:
 441               	.LBE374:
 188:main.c        ****   return data;
 442               		.loc 1 188 0
 443 0184 FAE6      		ldi r31,lo8(106)
 444 0186 FA95      	1:	dec r31
 445 0188 01F4      		brne 1b
 446 018a 00C0      		rjmp .
 447               	.LVL27:
 448               	.LBE371:
 449               	.LBE370:
 450               	.LBB378:
 451               	.LBB379:
 452               	.LBB380:
 453               	.LBB381:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 454               		.loc 1 166 0
 455 018c 95E0      		ldi r25,lo8(5)
 456 018e 9EBD      		out 0x2e,r25
 457               	.L15:
 167:main.c        **** }
 458               		.loc 1 167 0
 459 0190 0DB4      		in __tmp_reg__,0x2d
 460 0192 07FE      		sbrs __tmp_reg__,7
 461 0194 00C0      		rjmp .L15
 462               	.LVL28:
 463               	.LBE381:
 464               	.LBE380:
 186:main.c        ****   uint8_t data = spi_recv();
 465               		.loc 1 186 0
 466 0196 EFE7      		ldi r30,lo8(639)
 467 0198 F2E0      		ldi r31,hi8(639)
 468 019a 3197      	1:	sbiw r30,1
 469 019c 01F4      		brne 1b
 470 019e 00C0      		rjmp .
 471 01a0 0000      		nop
 472               	.LVL29:
 473               	.LBB382:
 474               	.LBB383:
 475               	.LBB384:
 476               	.LBB385:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 477               		.loc 1 166 0
 478 01a2 1EBC      		out 0x2e,__zero_reg__
 479               	.L16:
 167:main.c        **** }
 480               		.loc 1 167 0
 481 01a4 0DB4      		in __tmp_reg__,0x2d
 482 01a6 07FE      		sbrs __tmp_reg__,7
 483 01a8 00C0      		rjmp .L16
 484               	.LVL30:
 485               	.LBE385:
 486               	.LBE384:
 173:main.c        **** }
 487               		.loc 1 173 0
 488 01aa 9EB5      		in r25,0x2e
 489               	.LBE383:
 490               	.LBE382:
 188:main.c        ****   return data;
 491               		.loc 1 188 0
 492 01ac FAE6      		ldi r31,lo8(106)
 493 01ae FA95      	1:	dec r31
 494 01b0 01F4      		brne 1b
 495 01b2 00C0      		rjmp .
 496               	.LVL31:
 497               	.LBE379:
 498               	.LBE378:
 499               	.LBB386:
 500               	.LBB387:
 501               	.LBB388:
 502               	.LBB389:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 503               		.loc 1 166 0
 504 01b4 96E0      		ldi r25,lo8(6)
 505 01b6 9EBD      		out 0x2e,r25
 506               	.L17:
 167:main.c        **** }
 507               		.loc 1 167 0
 508 01b8 0DB4      		in __tmp_reg__,0x2d
 509 01ba 07FE      		sbrs __tmp_reg__,7
 510 01bc 00C0      		rjmp .L17
 511               	.LVL32:
 512               	.LBE389:
 513               	.LBE388:
 186:main.c        ****   uint8_t data = spi_recv();
 514               		.loc 1 186 0
 515 01be EFE7      		ldi r30,lo8(639)
 516 01c0 F2E0      		ldi r31,hi8(639)
 517 01c2 3197      	1:	sbiw r30,1
 518 01c4 01F4      		brne 1b
 519 01c6 00C0      		rjmp .
 520 01c8 0000      		nop
 521               	.LVL33:
 522               	.LBB390:
 523               	.LBB391:
 524               	.LBB392:
 525               	.LBB393:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 526               		.loc 1 166 0
 527 01ca 1EBC      		out 0x2e,__zero_reg__
 528               	.L18:
 167:main.c        **** }
 529               		.loc 1 167 0
 530 01cc 0DB4      		in __tmp_reg__,0x2d
 531 01ce 07FE      		sbrs __tmp_reg__,7
 532 01d0 00C0      		rjmp .L18
 533               	.LVL34:
 534               	.LBE393:
 535               	.LBE392:
 173:main.c        **** }
 536               		.loc 1 173 0
 537 01d2 9EB5      		in r25,0x2e
 538               	.LBE391:
 539               	.LBE390:
 188:main.c        ****   return data;
 540               		.loc 1 188 0
 541 01d4 FAE6      		ldi r31,lo8(106)
 542 01d6 FA95      	1:	dec r31
 543 01d8 01F4      		brne 1b
 544 01da 00C0      		rjmp .
 545               	.LVL35:
 546               	.LBE387:
 547               	.LBE386:
 548               	.LBB394:
 549               	.LBB395:
 550               	.LBB396:
 551               	.LBB397:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 552               		.loc 1 166 0
 553 01dc 90E9      		ldi r25,lo8(-112)
 554 01de 9EBD      		out 0x2e,r25
 555               	.L19:
 167:main.c        **** }
 556               		.loc 1 167 0
 557 01e0 0DB4      		in __tmp_reg__,0x2d
 558 01e2 07FE      		sbrs __tmp_reg__,7
 559 01e4 00C0      		rjmp .L19
 560               	.LVL36:
 561               	.LBE397:
 562               	.LBE396:
 563               	.LBB398:
 564               	.LBB399:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 565               		.loc 1 166 0
 566 01e6 1EBC      		out 0x2e,__zero_reg__
 567               	.L20:
 167:main.c        **** }
 568               		.loc 1 167 0
 569 01e8 0DB4      		in __tmp_reg__,0x2d
 570 01ea 07FE      		sbrs __tmp_reg__,7
 571 01ec 00C0      		rjmp .L20
 572               	.LVL37:
 573               	.LBE399:
 574               	.LBE398:
 180:main.c        **** }
 575               		.loc 1 180 0
 576 01ee EFEC      		ldi r30,lo8(719)
 577 01f0 F2E0      		ldi r31,hi8(719)
 578 01f2 3197      	1:	sbiw r30,1
 579 01f4 01F4      		brne 1b
 580 01f6 00C0      		rjmp .
 581 01f8 0000      		nop
 582               	.LVL38:
 583               	.LBE395:
 584               	.LBE394:
 585               	.LBB400:
 586               	.LBB401:
 587               	.LBB402:
 588               	.LBB403:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 589               		.loc 1 166 0
 590 01fa 93E9      		ldi r25,lo8(-109)
 591 01fc 9EBD      		out 0x2e,r25
 592               	.L21:
 167:main.c        **** }
 593               		.loc 1 167 0
 594 01fe 0DB4      		in __tmp_reg__,0x2d
 595 0200 07FE      		sbrs __tmp_reg__,7
 596 0202 00C0      		rjmp .L21
 597               	.LVL39:
 598               	.LBE403:
 599               	.LBE402:
 600               	.LBB404:
 601               	.LBB405:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 602               		.loc 1 166 0
 603 0204 9DE1      		ldi r25,lo8(29)
 604 0206 9EBD      		out 0x2e,r25
 605               	.L22:
 167:main.c        **** }
 606               		.loc 1 167 0
 607 0208 0DB4      		in __tmp_reg__,0x2d
 608 020a 07FE      		sbrs __tmp_reg__,7
 609 020c 00C0      		rjmp .L22
 610               	.LVL40:
 611               	.LBE405:
 612               	.LBE404:
 180:main.c        **** }
 613               		.loc 1 180 0
 614 020e EFEC      		ldi r30,lo8(719)
 615 0210 F2E0      		ldi r31,hi8(719)
 616 0212 3197      	1:	sbiw r30,1
 617 0214 01F4      		brne 1b
 618 0216 00C0      		rjmp .
 619 0218 0000      		nop
 620               	.LVL41:
 621               	.LBE401:
 622               	.LBE400:
 230:main.c        ****   delay_ms(10);
 623               		.loc 1 230 0
 624 021a 289A      		sbi 0x5,0
 231:main.c        ****   SS_LOW;
 625               		.loc 1 231 0
 626 021c EFE3      		ldi r30,lo8(-25537)
 627 021e FCE9      		ldi r31,hi8(-25537)
 628 0220 3197      	1:	sbiw r30,1
 629 0222 01F4      		brne 1b
 630 0224 00C0      		rjmp .
 631 0226 0000      		nop
 232:main.c        ****   spi_write(0x13, 0x18);
 632               		.loc 1 232 0
 633 0228 2898      		cbi 0x5,0
 634               	.LVL42:
 635               	.LBB406:
 636               	.LBB407:
 637               	.LBB408:
 638               	.LBB409:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 639               		.loc 1 166 0
 640 022a 93E9      		ldi r25,lo8(-109)
 641 022c 9EBD      		out 0x2e,r25
 642               	.L23:
 167:main.c        **** }
 643               		.loc 1 167 0
 644 022e 0DB4      		in __tmp_reg__,0x2d
 645 0230 07FE      		sbrs __tmp_reg__,7
 646 0232 00C0      		rjmp .L23
 647               	.LVL43:
 648               	.LBE409:
 649               	.LBE408:
 650               	.LBB410:
 651               	.LBB411:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 652               		.loc 1 166 0
 653 0234 98E1      		ldi r25,lo8(24)
 654 0236 9EBD      		out 0x2e,r25
 655               	.L24:
 167:main.c        **** }
 656               		.loc 1 167 0
 657 0238 0DB4      		in __tmp_reg__,0x2d
 658 023a 07FE      		sbrs __tmp_reg__,7
 659 023c 00C0      		rjmp .L24
 660               	.LVL44:
 661               	.LBE411:
 662               	.LBE410:
 180:main.c        **** }
 663               		.loc 1 180 0
 664 023e EFEC      		ldi r30,lo8(719)
 665 0240 F2E0      		ldi r31,hi8(719)
 666 0242 3197      	1:	sbiw r30,1
 667 0244 01F4      		brne 1b
 668 0246 00C0      		rjmp .
 669 0248 0000      		nop
 670               	.LVL45:
 671               	.LBE407:
 672               	.LBE406:
 673               	.LBB412:
 674               	.LBB413:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 675               		.loc 1 166 0
 676 024a 92EE      		ldi r25,lo8(-30)
 677 024c 9EBD      		out 0x2e,r25
 678               	.L25:
 167:main.c        **** }
 679               		.loc 1 167 0
 680 024e 0DB4      		in __tmp_reg__,0x2d
 681 0250 07FE      		sbrs __tmp_reg__,7
 682 0252 00C0      		rjmp .L25
 683 0254 E0E0      		ldi r30,lo8(srom)
 684 0256 F0E0      		ldi r31,hi8(srom)
 685               	.LVL46:
 686               	.L27:
 687               	.LBE413:
 688               	.LBE412:
 689               	.LBB414:
 237:main.c        ****     spi_send(pgm_read_byte(psrom++));
 690               		.loc 1 237 0
 691 0258 25E5      		ldi r18,lo8(85)
 692 025a 2A95      	1:	dec r18
 693 025c 01F4      		brne 1b
 694 025e 0000      		nop
 695               	.LVL47:
 696               	.LBB415:
 238:main.c        ****   }
 697               		.loc 1 238 0
 698               	/* #APP */
 699               	 ;  238 "main.c" 1
 700 0260 9491      		lpm r25, Z
 701               		
 702               	 ;  0 "" 2
 703               	.LVL48:
 704               	/* #NOAPP */
 705               	.LBE415:
 706               	.LBB416:
 707               	.LBB417:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 708               		.loc 1 166 0
 709 0262 9EBD      		out 0x2e,r25
 710               	.L26:
 167:main.c        **** }
 711               		.loc 1 167 0
 712 0264 0DB4      		in __tmp_reg__,0x2d
 713 0266 07FE      		sbrs __tmp_reg__,7
 714 0268 00C0      		rjmp .L26
 715               	.LVL49:
 716 026a 3196      		adiw r30,1
 717               	.LVL50:
 718               	.LBE417:
 719               	.LBE416:
 236:main.c        ****     delay_us(16);
 720               		.loc 1 236 0
 721 026c 30E0      		ldi r19,hi8(srom+4094)
 722 026e E030      		cpi r30,lo8(srom+4094)
 723 0270 F307      		cpc r31,r19
 724 0272 01F4      		brne .L27
 725               	.LBE414:
 240:main.c        ****   SS_HIGH;
 726               		.loc 1 240 0
 727 0274 50E6      		ldi r21,lo8(96)
 728 0276 5A95      	1:	dec r21
 729 0278 01F4      		brne 1b
 241:main.c        ****   delay_us(200);
 730               		.loc 1 241 0
 731 027a 289A      		sbi 0x5,0
 242:main.c        **** 
 732               		.loc 1 242 0
 733 027c EFE1      		ldi r30,lo8(799)
 734 027e F3E0      		ldi r31,hi8(799)
 735 0280 3197      	1:	sbiw r30,1
 736 0282 01F4      		brne 1b
 737               	.LVL51:
 738 0284 00C0      		rjmp .
 739 0286 0000      		nop
 245:main.c        ****   spi_write(0x10, 0x00); // Rest mode & independant X/Y DPI disabled
 740               		.loc 1 245 0
 741 0288 2898      		cbi 0x5,0
 742               	.LVL52:
 743               	.LBB418:
 744               	.LBB419:
 745               	.LBB420:
 746               	.LBB421:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 747               		.loc 1 166 0
 748 028a 90E9      		ldi r25,lo8(-112)
 749               	.LVL53:
 750 028c 9EBD      		out 0x2e,r25
 751               	.LVL54:
 752               	.L28:
 167:main.c        **** }
 753               		.loc 1 167 0
 754 028e 0DB4      		in __tmp_reg__,0x2d
 755 0290 07FE      		sbrs __tmp_reg__,7
 756 0292 00C0      		rjmp .L28
 757               	.LVL55:
 758               	.LBE421:
 759               	.LBE420:
 760               	.LBB422:
 761               	.LBB423:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 762               		.loc 1 166 0
 763 0294 1EBC      		out 0x2e,__zero_reg__
 764               	.L29:
 167:main.c        **** }
 765               		.loc 1 167 0
 766 0296 0DB4      		in __tmp_reg__,0x2d
 767 0298 07FE      		sbrs __tmp_reg__,7
 768 029a 00C0      		rjmp .L29
 769               	.LVL56:
 770               	.LBE423:
 771               	.LBE422:
 180:main.c        **** }
 772               		.loc 1 180 0
 773 029c EFEC      		ldi r30,lo8(719)
 774 029e F2E0      		ldi r31,hi8(719)
 775 02a0 3197      	1:	sbiw r30,1
 776 02a2 01F4      		brne 1b
 777 02a4 00C0      		rjmp .
 778 02a6 0000      		nop
 779               	.LVL57:
 780               	.LBE419:
 781               	.LBE418:
 782               	.LBB424:
 783               	.LBB425:
 784               	.LBB426:
 785               	.LBB427:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 786               		.loc 1 166 0
 787 02a8 9DE8      		ldi r25,lo8(-115)
 788 02aa 9EBD      		out 0x2e,r25
 789               	.L30:
 167:main.c        **** }
 790               		.loc 1 167 0
 791 02ac 0DB4      		in __tmp_reg__,0x2d
 792 02ae 07FE      		sbrs __tmp_reg__,7
 793 02b0 00C0      		rjmp .L30
 794               	.LVL58:
 795               	.LBE427:
 796               	.LBE426:
 797               	.LBB428:
 798               	.LBB429:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 799               		.loc 1 166 0
 800 02b2 1EBC      		out 0x2e,__zero_reg__
 801               	.L31:
 167:main.c        **** }
 802               		.loc 1 167 0
 803 02b4 0DB4      		in __tmp_reg__,0x2d
 804 02b6 07FE      		sbrs __tmp_reg__,7
 805 02b8 00C0      		rjmp .L31
 806               	.LVL59:
 807               	.LBE429:
 808               	.LBE428:
 180:main.c        **** }
 809               		.loc 1 180 0
 810 02ba EFEC      		ldi r30,lo8(719)
 811 02bc F2E0      		ldi r31,hi8(719)
 812 02be 3197      	1:	sbiw r30,1
 813 02c0 01F4      		brne 1b
 814 02c2 00C0      		rjmp .
 815 02c4 0000      		nop
 816               	.LVL60:
 817               	.LBE425:
 818               	.LBE424:
 819               	.LBB430:
 820               	.LBB431:
 821               	.LBB432:
 822               	.LBB433:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 823               		.loc 1 166 0
 824 02c6 91E9      		ldi r25,lo8(-111)
 825 02c8 9EBD      		out 0x2e,r25
 826               	.L32:
 167:main.c        **** }
 827               		.loc 1 167 0
 828 02ca 0DB4      		in __tmp_reg__,0x2d
 829 02cc 07FE      		sbrs __tmp_reg__,7
 830 02ce 00C0      		rjmp .L32
 831               	.LVL61:
 832               	.LBE433:
 833               	.LBE432:
 834               	.LBB434:
 835               	.LBB435:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 836               		.loc 1 166 0
 837 02d0 1EBC      		out 0x2e,__zero_reg__
 838               	.L33:
 167:main.c        **** }
 839               		.loc 1 167 0
 840 02d2 0DB4      		in __tmp_reg__,0x2d
 841 02d4 07FE      		sbrs __tmp_reg__,7
 842 02d6 00C0      		rjmp .L33
 843               	.LVL62:
 844               	.LBE435:
 845               	.LBE434:
 180:main.c        **** }
 846               		.loc 1 180 0
 847 02d8 EFEC      		ldi r30,lo8(719)
 848 02da F2E0      		ldi r31,hi8(719)
 849 02dc 3197      	1:	sbiw r30,1
 850 02de 01F4      		brne 1b
 851 02e0 00C0      		rjmp .
 852 02e2 0000      		nop
 853               	.LVL63:
 854               	.LBE431:
 855               	.LBE430:
 856               	.LBB436:
 857               	.LBB437:
 858               	.LBB438:
 859               	.LBB439:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 860               		.loc 1 166 0
 861 02e4 9FE8      		ldi r25,lo8(-113)
 862 02e6 9EBD      		out 0x2e,r25
 863               	.L34:
 167:main.c        **** }
 864               		.loc 1 167 0
 865 02e8 0DB4      		in __tmp_reg__,0x2d
 866 02ea 07FE      		sbrs __tmp_reg__,7
 867 02ec 00C0      		rjmp .L34
 868               	.LVL64:
 869               	.LBE439:
 870               	.LBE438:
 871               	.LBB440:
 872               	.LBB441:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 873               		.loc 1 166 0
 874 02ee 8EBD      		out 0x2e,r24
 875               	.L35:
 167:main.c        **** }
 876               		.loc 1 167 0
 877 02f0 0DB4      		in __tmp_reg__,0x2d
 878 02f2 07FE      		sbrs __tmp_reg__,7
 879 02f4 00C0      		rjmp .L35
 880               	.LBE441:
 881               	.LBE440:
 180:main.c        **** }
 882               		.loc 1 180 0
 883 02f6 8FEC      		ldi r24,lo8(719)
 884 02f8 92E0      		ldi r25,hi8(719)
 885 02fa 0197      	1:	sbiw r24,1
 886 02fc 01F4      		brne 1b
 887 02fe 00C0      		rjmp .
 888 0300 0000      		nop
 889               	.LVL65:
 890               	.LBE437:
 891               	.LBE436:
 892               	.LBB442:
 893               	.LBB443:
 894               	.LBB444:
 895               	.LBB445:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 896               		.loc 1 166 0
 897 0302 83EE      		ldi r24,lo8(-29)
 898 0304 8EBD      		out 0x2e,r24
 899               	.L36:
 167:main.c        **** }
 900               		.loc 1 167 0
 901 0306 0DB4      		in __tmp_reg__,0x2d
 902 0308 07FE      		sbrs __tmp_reg__,7
 903 030a 00C0      		rjmp .L36
 904               	.LVL66:
 905               	.LBE445:
 906               	.LBE444:
 907               	.LBB446:
 908               	.LBB447:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 909               		.loc 1 166 0
 910 030c 82E0      		ldi r24,lo8(2)
 911 030e 8EBD      		out 0x2e,r24
 912               	.L37:
 167:main.c        **** }
 913               		.loc 1 167 0
 914 0310 0DB4      		in __tmp_reg__,0x2d
 915 0312 07FE      		sbrs __tmp_reg__,7
 916 0314 00C0      		rjmp .L37
 917               	.LVL67:
 918               	.LBE447:
 919               	.LBE446:
 180:main.c        **** }
 920               		.loc 1 180 0
 921 0316 EFEC      		ldi r30,lo8(719)
 922 0318 F2E0      		ldi r31,hi8(719)
 923 031a 3197      	1:	sbiw r30,1
 924 031c 01F4      		brne 1b
 925 031e 00C0      		rjmp .
 926 0320 0000      		nop
 927               	.LVL68:
 928               	.LBE443:
 929               	.LBE442:
 930               	.LBB448:
 931               	.LBB449:
 932               	.LBB450:
 933               	.LBB451:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 934               		.loc 1 166 0
 935 0322 8BEA      		ldi r24,lo8(-85)
 936 0324 8EBD      		out 0x2e,r24
 937               	.L38:
 167:main.c        **** }
 938               		.loc 1 167 0
 939 0326 0DB4      		in __tmp_reg__,0x2d
 940 0328 07FE      		sbrs __tmp_reg__,7
 941 032a 00C0      		rjmp .L38
 942               	.LVL69:
 943               	.LBE451:
 944               	.LBE450:
 945               	.LBB452:
 946               	.LBB453:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 947               		.loc 1 166 0
 948 032c 80E1      		ldi r24,lo8(16)
 949 032e 8EBD      		out 0x2e,r24
 950               	.L39:
 167:main.c        **** }
 951               		.loc 1 167 0
 952 0330 0DB4      		in __tmp_reg__,0x2d
 953 0332 07FE      		sbrs __tmp_reg__,7
 954 0334 00C0      		rjmp .L39
 955               	.LVL70:
 956               	.LBE453:
 957               	.LBE452:
 180:main.c        **** }
 958               		.loc 1 180 0
 959 0336 8FEC      		ldi r24,lo8(719)
 960 0338 92E0      		ldi r25,hi8(719)
 961 033a 0197      	1:	sbiw r24,1
 962 033c 01F4      		brne 1b
 963 033e 00C0      		rjmp .
 964 0340 0000      		nop
 965               	.LVL71:
 966               	.LBE449:
 967               	.LBE448:
 968               	.LBB454:
 969               	.LBB455:
 970               	.LBB456:
 971               	.LBB457:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 972               		.loc 1 166 0
 973 0342 8CEA      		ldi r24,lo8(-84)
 974 0344 8EBD      		out 0x2e,r24
 975               	.L40:
 167:main.c        **** }
 976               		.loc 1 167 0
 977 0346 0DB4      		in __tmp_reg__,0x2d
 978 0348 07FE      		sbrs __tmp_reg__,7
 979 034a 00C0      		rjmp .L40
 980               	.LVL72:
 981               	.LBE457:
 982               	.LBE456:
 983               	.LBB458:
 984               	.LBB459:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 985               		.loc 1 166 0
 986 034c 8AE0      		ldi r24,lo8(10)
 987 034e 8EBD      		out 0x2e,r24
 988               	.L41:
 167:main.c        **** }
 989               		.loc 1 167 0
 990 0350 0DB4      		in __tmp_reg__,0x2d
 991 0352 07FE      		sbrs __tmp_reg__,7
 992 0354 00C0      		rjmp .L41
 993               	.LVL73:
 994               	.LBE459:
 995               	.LBE458:
 180:main.c        **** }
 996               		.loc 1 180 0
 997 0356 EFEC      		ldi r30,lo8(719)
 998 0358 F2E0      		ldi r31,hi8(719)
 999 035a 3197      	1:	sbiw r30,1
 1000 035c 01F4      		brne 1b
 1001 035e 00C0      		rjmp .
 1002 0360 0000      		nop
 1003               	.LVL74:
 1004               	.LBE455:
 1005               	.LBE454:
 254:main.c        ****   delay_us(200);
 1006               		.loc 1 254 0
 1007 0362 289A      		sbi 0x5,0
 255:main.c        **** }
 1008               		.loc 1 255 0
 1009 0364 8FE1      		ldi r24,lo8(799)
 1010 0366 93E0      		ldi r25,hi8(799)
 1011 0368 0197      	1:	sbiw r24,1
 1012 036a 01F4      		brne 1b
 1013 036c 00C0      		rjmp .
 1014 036e 0000      		nop
 1015               	.LVL75:
 1016               	.LBE341:
 1017               	.LBE340:
 1018               	.LBB460:
 1019               	.LBB461:
 260:main.c        ****   spi_write(0x42, angle); // Angle snapping: 0x00 = off, 0x80 = on
 1020               		.loc 1 260 0
 1021 0370 2898      		cbi 0x5,0
 1022               	.LVL76:
 1023               	.LBB462:
 1024               	.LBB463:
 1025               	.LBB464:
 1026               	.LBB465:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 1027               		.loc 1 166 0
 1028 0372 82EC      		ldi r24,lo8(-62)
 1029 0374 8EBD      		out 0x2e,r24
 1030               	.L42:
 167:main.c        **** }
 1031               		.loc 1 167 0
 1032 0376 0DB4      		in __tmp_reg__,0x2d
 1033 0378 07FE      		sbrs __tmp_reg__,7
 1034 037a 00C0      		rjmp .L42
 1035               	.LVL77:
 1036               	.LBE465:
 1037               	.LBE464:
 1038               	.LBB466:
 1039               	.LBB467:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 1040               		.loc 1 166 0
 1041 037c 1EBC      		out 0x2e,__zero_reg__
 1042               	.L43:
 167:main.c        **** }
 1043               		.loc 1 167 0
 1044 037e 0DB4      		in __tmp_reg__,0x2d
 1045 0380 07FE      		sbrs __tmp_reg__,7
 1046 0382 00C0      		rjmp .L43
 1047               	.LVL78:
 1048               	.LBE467:
 1049               	.LBE466:
 180:main.c        **** }
 1050               		.loc 1 180 0
 1051 0384 EFEC      		ldi r30,lo8(719)
 1052 0386 F2E0      		ldi r31,hi8(719)
 1053 0388 3197      	1:	sbiw r30,1
 1054 038a 01F4      		brne 1b
 1055 038c 00C0      		rjmp .
 1056 038e 0000      		nop
 1057               	.LVL79:
 1058               	.LBE463:
 1059               	.LBE462:
 262:main.c        **** }
 1060               		.loc 1 262 0
 1061 0390 289A      		sbi 0x5,0
 1062               	.LVL80:
 1063               	.LBE461:
 1064               	.LBE460:
 376:main.c        ****     #ifdef RGB
 377:main.c        ****     // Initial profile
 378:main.c        ****     profile = 3;
 379:main.c        ****     #endif
 380:main.c        ****     // dpi settings
 381:main.c        ****     dpi_index = 2;
 382:main.c        ****   }
 383:main.c        **** #endif
 384:main.c        **** 
 385:main.c        ****   // Init 3360
 386:main.c        ****   pmw3360_init(dpis[dpi_index]);
 387:main.c        **** 
 388:main.c        ****   // Init angle snapping
 389:main.c        ****   angle_init(angles[angle_index]);
 390:main.c        **** 
 391:main.c        ****   usb_init();
 1065               		.loc 1 391 0
 1066 0392 0E94 0000 		call usb_init
 1067               	.LVL81:
 1068               	.L44:
 392:main.c        ****   while (!usb_configured());
 1069               		.loc 1 392 0 discriminator 1
 1070 0396 0E94 0000 		call usb_configured
 1071               	.LVL82:
 1072 039a 8823      		tst r24
 1073 039c 01F0      		breq .L44
 393:main.c        ****   delay_ms(456); // arbitrary
 1074               		.loc 1 393 0
 1075 039e FFEF      		ldi r31,lo8(1459199)
 1076 03a0 23E4      		ldi r18,hi8(1459199)
 1077 03a2 36E1      		ldi r19,hlo8(1459199)
 1078 03a4 F150      	1:	subi r31,1
 1079 03a6 2040      		sbci r18,0
 1080 03a8 3040      		sbci r19,0
 1081 03aa 01F4      		brne 1b
 1082 03ac 00C0      		rjmp .
 1083 03ae 0000      		nop
 394:main.c        **** 
 395:main.c        ****   // set up timer0 to set OCF0A in TIFR0 every 125us
 396:main.c        ****   TCCR0A = 0x02; // CTC
 1084               		.loc 1 396 0
 1085 03b0 82E0      		ldi r24,lo8(2)
 1086 03b2 84BD      		out 0x24,r24
 397:main.c        ****   TCCR0B = 0x02; // prescaler 1/8 = 1us period
 1087               		.loc 1 397 0
 1088 03b4 85BD      		out 0x25,r24
 398:main.c        ****   OCR0A = 124; // = 125 - 1
 1089               		.loc 1 398 0
 1090 03b6 8CE7      		ldi r24,lo8(124)
 1091 03b8 87BD      		out 0x27,r24
 399:main.c        **** 
 400:main.c        ****   cli();
 1092               		.loc 1 400 0
 1093               	/* #APP */
 1094               	 ;  400 "main.c" 1
 1095 03ba F894      		cli
 1096               	 ;  0 "" 2
 296:main.c        **** #endif
 1097               		.loc 1 296 0
 1098               	/* #NOAPP */
 1099 03bc 412C      		mov r4,__zero_reg__
 1100 03be 512C      		mov r5,__zero_reg__
 1101 03c0 1982      		std Y+1,__zero_reg__
 1102 03c2 1A82      		std Y+2,__zero_reg__
 1103 03c4 1B82      		std Y+3,__zero_reg__
 1104 03c6 1C82      		std Y+4,__zero_reg__
 346:main.c        **** 
 1105               		.loc 1 346 0
 1106 03c8 00E0      		ldi r16,0
 328:main.c        ****   // if dpi button is pressed when plugging in, jump to bootloader
 1107               		.loc 1 328 0
 1108 03ca 312C      		mov r3,__zero_reg__
 326:main.c        ****   // previously transmitted button state
 1109               		.loc 1 326 0
 1110 03cc 10E0      		ldi r17,0
 1111 03ce 8FE0      		ldi r24,lo8(15)
 1112 03d0 282E      		mov r2,r24
 1113               	.LVL83:
 1114               	.L98:
 1115               	.LBB468:
 1116 03d2 5D81      		ldd r21,Y+5
 1117 03d4 5E83      		std Y+6,r21
 401:main.c        ****   while (1) {
 402:main.c        ****     for (uint8_t i = 0; i < 8; i++) {
 1118               		.loc 1 402 0
 1119 03d6 F12C      		mov r15,__zero_reg__
 1120               	.LVL84:
 1121               	.LBB469:
 403:main.c        ****       // synchronization to usb frames and 125us intervals
 404:main.c        ****       // polling interrupt flags gives 5 clock cycles or so of
 405:main.c        ****       // jitter. possible to eliminate by going into sleep
 406:main.c        ****       // mode and waking up using interrupts, but whatever.
 407:main.c        ****       if (i == 0) {
 1122               		.loc 1 407 0
 1123 03d8 FF20      		tst r15
 1124 03da 01F4      		brne .+2
 1125 03dc 00C0      		rjmp .L215
 1126               	.L190:
 408:main.c        ****         // sync to usb frames (1ms)
 409:main.c        ****         UDINT &= ~(1 << SOFI);
 410:main.c        ****         while (!(UDINT & (1 << SOFI)));
 411:main.c        ****         // reset prescaler phase, not really necessary
 412:main.c        ****         GTCCR |= (1 << PSRSYNC);
 413:main.c        ****         TCNT0 = 0;
 414:main.c        ****       } else {
 415:main.c        ****         // sync to 125us intervals using timer0
 416:main.c        ****         while (!(TIFR0 & (1 << OCF0A)));
 1127               		.loc 1 416 0 discriminator 1
 1128 03de A99B      		sbis 0x15,1
 1129 03e0 00C0      		rjmp .L190
 1130               	.LVL85:
 1131               	.L47:
 417:main.c        ****       }
 418:main.c        ****       TIFR0 |= (1 << OCF0A); // 0CF0A is cleared by writing 1
 1132               		.loc 1 418 0
 1133 03e2 A99A      		sbi 0x15,1
 419:main.c        **** #ifdef RGB
 420:main.c        ****       // RGB ------------------------------
 421:main.c        ****       // Colours
 422:main.c        ****       // Brightness values 0-255. When adding new colours here, add their number to led_colours[] a
 423:main.c        ****       // White
 424:main.c        ****       if (led_colour == 1) {
 425:main.c        ****         led_r_value = 180;
 426:main.c        ****         led_g_value = 255;
 427:main.c        ****         led_b_value = 255;
 428:main.c        ****       }
 429:main.c        ****       // Red
 430:main.c        ****       if (led_colour == 2) {
 431:main.c        ****         led_r_value = 255;
 432:main.c        ****         led_g_value = 0;
 433:main.c        ****         led_b_value = 0;
 434:main.c        ****       }
 435:main.c        ****       // Pink
 436:main.c        ****       if (led_colour == 3) {
 437:main.c        ****         led_r_value = 255;
 438:main.c        ****         led_g_value = 0;
 439:main.c        ****         led_b_value = 60;
 440:main.c        ****       }
 441:main.c        ****       // Magenta
 442:main.c        ****       if (led_colour == 4) {
 443:main.c        ****         led_r_value = 255;
 444:main.c        ****         led_g_value = 0;
 445:main.c        ****         led_b_value = 255;
 446:main.c        ****       }
 447:main.c        ****       // Violet
 448:main.c        ****       if (led_colour == 5) {
 449:main.c        ****         led_r_value = 100;
 450:main.c        ****         led_g_value = 0;
 451:main.c        ****         led_b_value = 255;
 452:main.c        ****       }
 453:main.c        ****       // Blue
 454:main.c        ****       if (led_colour == 6) {
 455:main.c        ****         led_r_value = 0;
 456:main.c        ****         led_g_value = 0;
 457:main.c        ****         led_b_value = 255;
 458:main.c        ****       }
 459:main.c        ****       // Sky Blue
 460:main.c        ****       if (led_colour == 7) {
 461:main.c        ****         led_r_value = 0;
 462:main.c        ****         led_g_value = 90;
 463:main.c        ****         led_b_value = 255;
 464:main.c        ****       }
 465:main.c        ****       // Cyan
 466:main.c        ****       if (led_colour == 8) {
 467:main.c        ****         led_r_value = 0;
 468:main.c        ****         led_g_value = 255;
 469:main.c        ****         led_b_value = 255;
 470:main.c        ****       }
 471:main.c        ****       // Green
 472:main.c        ****       if (led_colour == 9) {
 473:main.c        ****         led_r_value = 0;
 474:main.c        ****         led_g_value = 255;
 475:main.c        ****         led_b_value = 0;
 476:main.c        ****       }
 477:main.c        ****       // Toxic Green
 478:main.c        ****       if (led_colour == 10) {
 479:main.c        ****         led_r_value = 0;
 480:main.c        ****         led_g_value = 255;
 481:main.c        ****         led_b_value = 64;
 482:main.c        ****       }
 483:main.c        ****       // Yellow
 484:main.c        ****       if (led_colour == 11) {
 485:main.c        ****         led_r_value = 200;
 486:main.c        ****         led_g_value = 255;
 487:main.c        ****         led_b_value = 0;
 488:main.c        ****       }
 489:main.c        ****       // Orange
 490:main.c        ****       if (led_colour == 12) {
 491:main.c        ****         led_r_value = 255;
 492:main.c        ****         led_g_value = 100;
 493:main.c        ****         led_b_value = 0;
 494:main.c        ****       }
 495:main.c        **** 
 496:main.c        ****       // Convert RGB values from x/255 to same percentage as max timer value
 497:main.c        ****       uint8_t led_r_intensity = ((led_r_value / led_max_timer) + 0.5);
 498:main.c        ****       uint8_t led_g_intensity = ((led_g_value / led_max_timer) + 0.5);
 499:main.c        ****       uint8_t led_b_intensity = ((led_b_value / led_max_timer) + 0.5);
 500:main.c        **** 
 501:main.c        ****       // // RGB Brightness * individual LED brightness
 502:main.c        ****       uint8_t led_r_on = ((led_rgb_brightness * led_r_intensity) + 0.5);
 503:main.c        ****       uint8_t led_g_on = ((led_rgb_brightness * led_g_intensity) + 0.5);
 504:main.c        ****       uint8_t led_b_on = ((led_rgb_brightness * led_b_intensity) + 0.5);
 505:main.c        **** 
 506:main.c        ****       // Calculates number to turn off LED
 507:main.c        ****       uint8_t led_r_off = (led_r_on + 1);
 508:main.c        ****       uint8_t led_g_off = (led_g_on + 1);
 509:main.c        ****       uint8_t led_b_off = (led_b_on + 1);
 510:main.c        **** 
 511:main.c        ****       // Red LED PWM
 512:main.c        ****       // Turn off LED if led_x_on is 0
 513:main.c        ****       if (led_r_on == 0) {
 514:main.c        ****         PORTB |= (1 << 5);
 515:main.c        ****       }
 516:main.c        ****       // If led_x_on is greater than zero, enable the timer
 517:main.c        ****       if (led_r_on > 0) {
 518:main.c        ****         // LED Timer
 519:main.c        ****         led_r_timer++;
 520:main.c        ****         // Reset Timer
 521:main.c        ****         if (led_r_timer == led_max_timer) {
 522:main.c        ****           led_r_timer = 0;
 523:main.c        ****         }
 524:main.c        ****         // Turn on LED at led_x_on value
 525:main.c        ****         if (led_r_timer <= led_r_on) {
 526:main.c        ****           PORTB &= ~(1 << 5);
 527:main.c        ****         }
 528:main.c        ****         // Turn off LED at led_x_off value
 529:main.c        ****         if (led_r_timer >= led_r_off) {
 530:main.c        ****           PORTB |= (1 << 5);
 531:main.c        ****         }
 532:main.c        ****       }
 533:main.c        **** 
 534:main.c        ****       // Green LED PWM
 535:main.c        ****       // Turn off LED if led_x_on is 0
 536:main.c        ****       if (led_g_on == 0) {
 537:main.c        ****         PORTB |= (1 << 6);
 538:main.c        ****       }
 539:main.c        ****       // If led_x_on is greater than zero, enable the timer
 540:main.c        ****       if (led_g_on > 0) {
 541:main.c        ****         // LED Timer
 542:main.c        ****         led_g_timer++;
 543:main.c        ****         // Reset Timer
 544:main.c        ****         if (led_g_timer == led_max_timer) {
 545:main.c        ****           led_g_timer = 0;
 546:main.c        ****         }
 547:main.c        ****         // Turn on LED at led_x_on value
 548:main.c        ****         if (led_g_timer <= led_g_on) {
 549:main.c        ****           PORTB &= ~(1 << 6);
 550:main.c        ****         }
 551:main.c        ****         // Turn off LED at led_x_off value
 552:main.c        ****         if (led_g_timer >= led_g_off) {
 553:main.c        ****           PORTB |= (1 << 6);
 554:main.c        ****         }
 555:main.c        ****       }
 556:main.c        **** 
 557:main.c        ****       // Blue LED PWM
 558:main.c        ****       // Turn off LED if led_x_on is 0
 559:main.c        ****       if (led_b_on == 0) {
 560:main.c        ****         PORTD |= (1 << 7);
 561:main.c        ****       }
 562:main.c        ****       // If led_x_on is greater than zero, enable the timer
 563:main.c        ****       if (led_b_on > 0) {
 564:main.c        ****         // LED Timer
 565:main.c        ****         led_b_timer++;
 566:main.c        ****         // Reset Timer
 567:main.c        ****         if (led_b_timer == led_max_timer) {
 568:main.c        ****           led_b_timer = 0;
 569:main.c        ****         }
 570:main.c        ****         // Turn on LED at led_x_on value
 571:main.c        ****         if (led_b_timer <= led_b_on) {
 572:main.c        ****           PORTD &= ~(1 << 7);
 573:main.c        ****         }
 574:main.c        ****         // Turn off LED at led_x_off value
 575:main.c        ****         if (led_b_timer >= led_b_off) {
 576:main.c        ****           PORTD |= (1 << 7);
 577:main.c        ****         }
 578:main.c        ****       }
 579:main.c        **** #endif
 580:main.c        ****       // sensor stuff
 581:main.c        ****       union motion_data _x, _y;
 582:main.c        ****       SS_LOW;
 1134               		.loc 1 582 0
 1135 03e4 2898      		cbi 0x5,0
 1136               	.LVL86:
 1137               	.LBB470:
 1138               	.LBB471:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 1139               		.loc 1 166 0
 1140 03e6 90E5      		ldi r25,lo8(80)
 1141 03e8 9EBD      		out 0x2e,r25
 1142               	.L48:
 167:main.c        **** }
 1143               		.loc 1 167 0
 1144 03ea 0DB4      		in __tmp_reg__,0x2d
 1145 03ec 07FE      		sbrs __tmp_reg__,7
 1146 03ee 00C0      		rjmp .L48
 1147               	.LVL87:
 1148               	.LBE471:
 1149               	.LBE470:
 583:main.c        ****       spi_send(0x50);
 584:main.c        ****       delay_us(35);
 1150               		.loc 1 584 0
 1151 03f0 EAEB      		ldi r30,lo8(-70)
 1152 03f2 EA95      	1:	dec r30
 1153 03f4 01F4      		brne 1b
 1154 03f6 00C0      		rjmp .
 1155               	.LVL88:
 1156               	.LBB472:
 1157               	.LBB473:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 1158               		.loc 1 166 0
 1159 03f8 1EBC      		out 0x2e,__zero_reg__
 1160               	.L49:
 167:main.c        **** }
 1161               		.loc 1 167 0
 1162 03fa 0DB4      		in __tmp_reg__,0x2d
 1163 03fc 07FE      		sbrs __tmp_reg__,7
 1164 03fe 00C0      		rjmp .L49
 1165               	.LVL89:
 1166               	.LBE473:
 1167               	.LBE472:
 1168               	.LBB474:
 1169               	.LBB475:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 1170               		.loc 1 166 0
 1171 0400 1EBC      		out 0x2e,__zero_reg__
 1172               	.L50:
 167:main.c        **** }
 1173               		.loc 1 167 0
 1174 0402 0DB4      		in __tmp_reg__,0x2d
 1175 0404 07FE      		sbrs __tmp_reg__,7
 1176 0406 00C0      		rjmp .L50
 1177               	.LVL90:
 1178               	.LBE475:
 1179               	.LBE474:
 1180               	.LBB476:
 1181               	.LBB477:
 1182               	.LBB478:
 1183               	.LBB479:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 1184               		.loc 1 166 0
 1185 0408 1EBC      		out 0x2e,__zero_reg__
 1186               	.L51:
 167:main.c        **** }
 1187               		.loc 1 167 0
 1188 040a 0DB4      		in __tmp_reg__,0x2d
 1189 040c 07FE      		sbrs __tmp_reg__,7
 1190 040e 00C0      		rjmp .L51
 1191               	.LVL91:
 1192               	.LBE479:
 1193               	.LBE478:
 173:main.c        **** }
 1194               		.loc 1 173 0
 1195 0410 8EB5      		in r24,0x2e
 1196               	.LBE477:
 1197               	.LBE476:
 585:main.c        ****       spi_send(0x00); // motion, not used
 586:main.c        ****       spi_send(0x00); // observation, not used
 587:main.c        ****       _x.lo = spi_recv();
 1198               		.loc 1 587 0
 1199 0412 C82E      		mov r12,r24
 1200               	.LVL92:
 1201               	.LBB480:
 1202               	.LBB481:
 1203               	.LBB482:
 1204               	.LBB483:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 1205               		.loc 1 166 0
 1206 0414 1EBC      		out 0x2e,__zero_reg__
 1207               	.L52:
 167:main.c        **** }
 1208               		.loc 1 167 0
 1209 0416 0DB4      		in __tmp_reg__,0x2d
 1210 0418 07FE      		sbrs __tmp_reg__,7
 1211 041a 00C0      		rjmp .L52
 1212               	.LVL93:
 1213               	.LBE483:
 1214               	.LBE482:
 173:main.c        **** }
 1215               		.loc 1 173 0
 1216 041c 8EB5      		in r24,0x2e
 1217               	.LBE481:
 1218               	.LBE480:
 588:main.c        ****       _x.hi = spi_recv();
 1219               		.loc 1 588 0
 1220 041e D82E      		mov r13,r24
 1221               	.LVL94:
 1222               	.LBB484:
 1223               	.LBB485:
 1224               	.LBB486:
 1225               	.LBB487:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 1226               		.loc 1 166 0
 1227 0420 1EBC      		out 0x2e,__zero_reg__
 1228               	.L53:
 167:main.c        **** }
 1229               		.loc 1 167 0
 1230 0422 0DB4      		in __tmp_reg__,0x2d
 1231 0424 07FE      		sbrs __tmp_reg__,7
 1232 0426 00C0      		rjmp .L53
 1233               	.LVL95:
 1234               	.LBE487:
 1235               	.LBE486:
 173:main.c        **** }
 1236               		.loc 1 173 0
 1237 0428 8EB5      		in r24,0x2e
 1238               	.LBE485:
 1239               	.LBE484:
 589:main.c        ****       _y.lo = spi_recv();
 1240               		.loc 1 589 0
 1241 042a A82E      		mov r10,r24
 1242               	.LVL96:
 1243               	.LBB488:
 1244               	.LBB489:
 1245               	.LBB490:
 1246               	.LBB491:
 166:main.c        ****   while (!(SPSR & (1 << SPIF)));
 1247               		.loc 1 166 0
 1248 042c 1EBC      		out 0x2e,__zero_reg__
 1249               	.L54:
 167:main.c        **** }
 1250               		.loc 1 167 0
 1251 042e 0DB4      		in __tmp_reg__,0x2d
 1252 0430 07FE      		sbrs __tmp_reg__,7
 1253 0432 00C0      		rjmp .L54
 1254               	.LVL97:
 1255               	.LBE491:
 1256               	.LBE490:
 173:main.c        **** }
 1257               		.loc 1 173 0
 1258 0434 8EB5      		in r24,0x2e
 1259               	.LBE489:
 1260               	.LBE488:
 590:main.c        ****       _y.hi = spi_recv();
 1261               		.loc 1 590 0
 1262 0436 B82E      		mov r11,r24
 591:main.c        ****       SS_HIGH;
 1263               		.loc 1 591 0
 1264 0438 289A      		sbi 0x5,0
 1265               	.LVL98:
 592:main.c        **** 
 593:main.c        ****       // wheel stuff
 594:main.c        ****       int8_t _whl = 0; // number of scrolls this 125us
 595:main.c        **** #ifndef WHLBUX
 596:main.c        ****       const uint8_t whl_a = WHL_A_IS_HIGH;
 597:main.c        ****       const uint8_t whl_b = WHL_B_IS_HIGH;
 598:main.c        ****       // calculate number of scrolls
 599:main.c        ****       if (whl_a != whl_b)
 600:main.c        ****         whl_prev_diff = whl_a;
 601:main.c        ****       else if (whl_a != whl_prev_same) {
 602:main.c        ****         _whl = 2 * (whl_a ^ whl_prev_diff) - 1;
 603:main.c        ****         whl_prev_same = whl_a;
 604:main.c        ****       }
 605:main.c        **** #endif
 606:main.c        **** #ifdef WHLBUX
 607:main.c        ****       int8_t pinstate = 0;
 608:main.c        ****       if (!bit_is_clear(PINC, PC7)) {
 1266               		.loc 1 608 0
 1267 043a 86B1      		in r24,0x6
 607:main.c        ****       if (!bit_is_clear(PINC, PC7)) {
 1268               		.loc 1 607 0
 1269 043c 881F      		rol r24
 1270 043e 8827      		clr r24
 1271 0440 881F      		rol r24
 1272 0442 880F      		lsl r24
 1273               	.LVL99:
 609:main.c        ****         pinstate |= (1 << 1);
 610:main.c        ****       }
 611:main.c        ****       if (!bit_is_clear(PINC, PC6)) {
 1274               		.loc 1 611 0
 1275 0444 3699      		sbic 0x6,6
 612:main.c        ****         pinstate |= (1 << 0);
 1276               		.loc 1 612 0
 1277 0446 8160      		ori r24,lo8(1)
 1278               	.LVL100:
 1279               	.L56:
 613:main.c        ****       }
 614:main.c        ****       if ((pinstate & 0b00000011) != (oldpinstate & 0b00000011)) {
 1280               		.loc 1 614 0
 1281 0448 9091 0000 		lds r25,oldpinstate
 1282 044c 9370      		andi r25,lo8(3)
 1283 044e 9817      		cp r25,r24
 1284 0450 01F0      		breq .L210
 1285               	.LVL101:
 1286               	.LBB492:
 1287               	.LBB493:
 1288               	.LBB494:
 107:main.c        ****   return (state & 0xc0);
 1289               		.loc 1 107 0
 1290 0452 E091 0000 		lds r30,state
 1291 0456 EF70      		andi r30,lo8(15)
 1292 0458 24E0      		ldi r18,lo8(4)
 1293 045a E29F      		mul r30,r18
 1294 045c F001      		movw r30,r0
 1295 045e 1124      		clr __zero_reg__
 1296 0460 E050      		subi r30,lo8(-(ttable))
 1297 0462 F040      		sbci r31,hi8(-(ttable))
 1298 0464 E80F      		add r30,r24
 1299 0466 F11D      		adc r31,__zero_reg__
 1300 0468 9081      		ld r25,Z
 1301 046a 9093 0000 		sts state,r25
 108:main.c        **** }
 1302               		.loc 1 108 0
 1303 046e 9091 0000 		lds r25,state
 1304 0472 292F      		mov r18,r25
 1305 0474 207C      		andi r18,lo8(-64)
 1306               	.LVL102:
 1307               	.LBE494:
 1308               	.LBE493:
 615:main.c        ****         uint8_t result = rotary_process(pinstate) & 0b11000000;
 616:main.c        ****         oldpinstate = pinstate & 0b00000011;
 1309               		.loc 1 616 0
 1310 0476 8093 0000 		sts oldpinstate,r24
 617:main.c        ****         if (result & (1 << 6)) {
 1311               		.loc 1 617 0
 1312 047a 96FF      		sbrs r25,6
 1313 047c 00C0      		rjmp .L59
 618:main.c        ****         #ifndef WHLACC
 619:main.c        ****           _whl = -1;
 620:main.c        ****         #endif
 621:main.c        ****         #ifdef WHLACC
 622:main.c        ****                 if (whl_time < 15) {
 1314               		.loc 1 622 0
 1315 047e 8091 0000 		lds r24,whl_time
 1316               	.LVL103:
 1317 0482 8F30      		cpi r24,lo8(15)
 1318 0484 04F0      		brlt .+2
 1319 0486 00C0      		rjmp .L60
 623:main.c        **** 				rev = 15 - whl_time;
 624:main.c        **** 	        	rev = (rev>>2) + 4;
 1320               		.loc 1 624 0
 1321 0488 322D      		mov r19,r2
 1322 048a 381B      		sub r19,r24
 1323 048c 832F      		mov r24,r19
 1324 048e 8595      		asr r24
 1325 0490 8595      		asr r24
 1326 0492 8C5F      		subi r24,lo8(-(4))
 1327 0494 8093 0000 		sts rev,r24
 625:main.c        **** 					if(stack <= 0){ 
 1328               		.loc 1 625 0
 1329 0498 9091 0000 		lds r25,stack
 1330 049c 1916      		cp __zero_reg__,r25
 1331 049e 04F0      		brlt .+2
 1332 04a0 00C0      		rjmp .L216
 1333               	.L61:
 626:main.c        **** 	        		stack = stack - rev;
 627:main.c        **** 					}
 628:main.c        **** 					if(stack > 0){ 
 629:main.c        **** 	        		stack = stack + rev;
 1334               		.loc 1 629 0
 1335 04a2 890F      		add r24,r25
 1336 04a4 8093 0000 		sts stack,r24
 1337               	.L62:
 630:main.c        **** 					}
 631:main.c        **** 				}
 632:main.c        **** 				else if ((whl_time < 127) && (whl_time > 14)){
 633:main.c        **** 				stack--;
 634:main.c        **** 				_rev = whl_time;				
 635:main.c        **** 				}else{
 636:main.c        **** 				stack--;				
 637:main.c        **** 				}
 638:main.c        **** 			    whl_time = 0;
 1338               		.loc 1 638 0
 1339 04a8 1092 0000 		sts whl_time,__zero_reg__
 639:main.c        ****         #endif
 640:main.c        ****         }
 641:main.c        **** 
 642:main.c        ****         if (result & (1 << 7)) {
 1340               		.loc 1 642 0
 1341 04ac 27FD      		sbrc r18,7
 1342 04ae 00C0      		rjmp .L217
 1343               	.LVL104:
 1344               	.L210:
 1345 04b0 9091 0000 		lds r25,_rev
 1346               	.L58:
 1347               	.LBE492:
 643:main.c        ****         #ifndef WHLACC
 644:main.c        ****           _whl = 1;
 645:main.c        ****         #endif
 646:main.c        ****         #ifdef WHLACC
 647:main.c        **** 				if (whl_time < 15) {
 648:main.c        **** 				rev = 15 - whl_time;
 649:main.c        **** 	        	rev = (rev>>2) + 4;
 650:main.c        **** 					if(stack < 0){ 
 651:main.c        **** 	        		stack = stack - rev;
 652:main.c        **** 					}
 653:main.c        **** 					if(stack >= 0){ 
 654:main.c        **** 	        		stack = stack + rev;
 655:main.c        **** 					}
 656:main.c        **** 				}
 657:main.c        **** 				else if ((whl_time < 127) && (whl_time > 14)){
 658:main.c        **** 				stack++;
 659:main.c        **** 				_rev = whl_time;				
 660:main.c        **** 				}else{
 661:main.c        **** 				stack++;				
 662:main.c        **** 				}
 663:main.c        **** 			    whl_time = 0;
 664:main.c        ****         }
 665:main.c        ****       }
 666:main.c        **** 
 667:main.c        ****       if (_rev < 1) {
 1348               		.loc 1 667 0
 1349 04b4 1916      		cp __zero_reg__,r25
 1350 04b6 04F0      		brlt .+2
 1351 04b8 00C0      		rjmp .L218
 668:main.c        ****         if (stack > 0) {
 669:main.c        ****           stack--;
 670:main.c        ****           _whl = 1;
 671:main.c        ****         }
 672:main.c        ****         if (stack < 0) {
 673:main.c        ****           stack++;
 674:main.c        ****           _whl = -1;
 675:main.c        ****         }
 676:main.c        ****       }
 677:main.c        **** 
 678:main.c        ****       if (whl_eighth > 7) {
 1352               		.loc 1 678 0
 1353 04ba 8091 0000 		lds r24,whl_eighth
 1354 04be 8830      		cpi r24,lo8(8)
 1355 04c0 04F0      		brlt .+2
 1356 04c2 00C0      		rjmp .L102
 594:main.c        **** #ifndef WHLBUX
 1357               		.loc 1 594 0
 1358 04c4 E12C      		mov r14,__zero_reg__
 1359               	.LVL105:
 1360               	.L75:
 679:main.c        ****         whl_eighth = 0;
 680:main.c        ****         if (_rev > 0) {
 681:main.c        ****           _rev--;
 682:main.c        ****           if (stack > 0) {
 683:main.c        ****             stack--;
 684:main.c        ****             _whl = 1;
 685:main.c        ****           }
 686:main.c        ****           if (stack < 0) {
 687:main.c        ****             stack++;
 688:main.c        ****             _whl = -1;
 689:main.c        ****           }
 690:main.c        ****         }
 691:main.c        ****         if (whl_time < 125) {
 692:main.c        ****           whl_time++;
 693:main.c        ****         }
 694:main.c        ****       }
 695:main.c        ****       whl_eighth++;
 1361               		.loc 1 695 0
 1362 04c6 8F5F      		subi r24,lo8(-(1))
 1363 04c8 8093 0000 		sts whl_eighth,r24
 696:main.c        ****       #endif
 697:main.c        ****           
 698:main.c        **** #endif
 699:main.c        ****       // button stuff
 700:main.c        ****       //high = not pressed, low = pressed
 701:main.c        ****       //PIND 0 EIFR 0: low, no edges -> is low
 702:main.c        ****       //PIND 0 EIFR 1: low, edge -> is low
 703:main.c        ****       //PIND 1 EIFR 0: high, no edges -> always high during last 125us
 704:main.c        ****       //PIND 1 EIFR 1: high, edge -> low at some point in the last 125us
 705:main.c        **** 
 706:main.c        **** 
 707:main.c        **** #ifndef HARDEB
 708:main.c        ****       const uint8_t btn_unpressed = PIND & (~(EIFR) | 0b00110000);
 1364               		.loc 1 708 0
 1365 04cc 99B1      		in r25,0x9
 1366 04ce 8CB3      		in r24,0x1c
 1367 04d0 8095      		com r24
 1368 04d2 8063      		ori r24,lo8(48)
 1369 04d4 8923      		and r24,r25
 1370               	.LVL106:
 709:main.c        ****       EIFR = 0b00001111; // clear EIFR (clear interrupts)
 1371               		.loc 1 709 0
 1372 04d6 2CBA      		out 0x1c,r2
 1373               	.LVL107:
 710:main.c        ****       uint8_t btn_dbncd = 0x00;
 711:main.c        **** #endif
 712:main.c        **** 
 713:main.c        ****       // manual loop debouncing for every button
 714:main.c        **** 
 715:main.c        ****       // button debouncing logic
 716:main.c        ****       //          >input<           |        >output<
 717:main.c        ****       //------------------------------------------------------
 718:main.c        ****       // previous    | current      | unclicked  | current
 719:main.c        ****       // dbncd state | actual state | time       | dbncd state
 720:main.c        ****       //-------------+--------------+------------+------------
 721:main.c        ****       //    btn_prev |   ~unpressed | btn_time   |   btn_dbncd
 722:main.c        ****       //-------------+--------------+------------+------------
 723:main.c        ****       //           0 |            0 |         =0 |          =0
 724:main.c        ****       //           0 |            1 |         =0 |          =1
 725:main.c        ****       //           1 |            0 |         ++ | (time < DEBOUNCE_TIME)
 726:main.c        ****       //           1 |            1 |         =0 |          =1
 727:main.c        **** #ifdef HARDEB
 728:main.c        ****       btn_dbncd &= ~0b00100000; 
 729:main.c        **** #endif 
 730:main.c        **** 
 731:main.c        **** #ifndef HARDEB
 732:main.c        **** #define DEBOUNCE(index) \
 733:main.c        ****   if ((btn_prev & (1<<index)) && (btn_unpressed & (1<<index))) { \
 734:main.c        ****     btn_time[index]++; \
 735:main.c        ****     if (btn_time[index] < DEBOUNCE_TIME) \
 736:main.c        ****       btn_dbncd |= (1<<index); \
 737:main.c        ****   } else { \
 738:main.c        ****     btn_time[index] = 0; \
 739:main.c        ****     btn_dbncd |= (~btn_unpressed) & (1<<index); \
 740:main.c        ****   }
 741:main.c        ****       DEBOUNCE(0); // L
 1374               		.loc 1 741 0
 1375 04d8 5D81      		ldd r21,Y+5
 1376 04da 50FF      		sbrs r21,0
 1377 04dc 00C0      		rjmp .L76
 1378               		.loc 1 741 0 is_stmt 0 discriminator 1
 1379 04de 982F      		mov r25,r24
 1380 04e0 9170      		andi r25,lo8(1)
 1381 04e2 9D83      		std Y+5,r25
 1382 04e4 80FF      		sbrs r24,0
 1383 04e6 00C0      		rjmp .L77
 1384               		.loc 1 741 0 discriminator 3
 1385 04e8 EC81      		ldd r30,Y+4
 1386 04ea EF5F      		subi r30,lo8(-(1))
 1387 04ec EC83      		std Y+4,r30
 1388               	.LVL108:
 1389 04ee F1E0      		ldi r31,lo8(1)
 1390 04f0 FD83      		std Y+5,r31
 1391 04f2 E83D      		cpi r30,lo8(-40)
 1392 04f4 00F0      		brlo .L79
 1393 04f6 1D82      		std Y+5,__zero_reg__
 1394               	.LVL109:
 1395               	.L79:
 742:main.c        ****       DEBOUNCE(1); // R
 1396               		.loc 1 742 0 is_stmt 1
 1397 04f8 9E81      		ldd r25,Y+6
 1398 04fa 91FF      		sbrs r25,1
 1399 04fc 00C0      		rjmp .L80
 1400               		.loc 1 742 0 is_stmt 0 discriminator 1
 1401 04fe 81FF      		sbrs r24,1
 1402 0500 00C0      		rjmp .L80
 1403               		.loc 1 742 0 discriminator 3
 1404 0502 EB81      		ldd r30,Y+3
 1405 0504 EF5F      		subi r30,lo8(-(1))
 1406 0506 EB83      		std Y+3,r30
 1407               	.LVL110:
 1408 0508 E83D      		cpi r30,lo8(-40)
 1409 050a 00F4      		brsh .L81
 1410               		.loc 1 742 0 discriminator 5
 1411 050c FD81      		ldd r31,Y+5
 1412 050e F260      		ori r31,lo8(2)
 1413 0510 FD83      		std Y+5,r31
 1414               	.LVL111:
 1415               	.L81:
 743:main.c        ****       DEBOUNCE(2); // M
 1416               		.loc 1 743 0 is_stmt 1
 1417 0512 3E81      		ldd r19,Y+6
 1418 0514 32FF      		sbrs r19,2
 1419 0516 00C0      		rjmp .L82
 1420               		.loc 1 743 0 is_stmt 0 discriminator 1
 1421 0518 82FF      		sbrs r24,2
 1422 051a 00C0      		rjmp .L82
 1423               		.loc 1 743 0 discriminator 3
 1424 051c 5A81      		ldd r21,Y+2
 1425 051e 5F5F      		subi r21,lo8(-(1))
 1426 0520 5A83      		std Y+2,r21
 1427               	.LVL112:
 1428 0522 583D      		cpi r21,lo8(-40)
 1429 0524 00F4      		brsh .L83
 1430               		.loc 1 743 0 discriminator 5
 1431 0526 9D81      		ldd r25,Y+5
 1432 0528 9460      		ori r25,lo8(4)
 1433 052a 9D83      		std Y+5,r25
 1434               	.LVL113:
 1435               	.L83:
 744:main.c        ****       DEBOUNCE(3); // RSB
 1436               		.loc 1 744 0 is_stmt 1
 1437 052c FE81      		ldd r31,Y+6
 1438 052e F3FF      		sbrs r31,3
 1439 0530 00C0      		rjmp .L84
 1440               		.loc 1 744 0 is_stmt 0 discriminator 1
 1441 0532 83FF      		sbrs r24,3
 1442 0534 00C0      		rjmp .L84
 1443               		.loc 1 744 0 discriminator 3
 1444 0536 2981      		ldd r18,Y+1
 1445 0538 2F5F      		subi r18,lo8(-(1))
 1446 053a 2983      		std Y+1,r18
 1447               	.LVL114:
 1448 053c 283D      		cpi r18,lo8(-40)
 1449 053e 00F4      		brsh .L85
 1450               		.loc 1 744 0 discriminator 5
 1451 0540 3D81      		ldd r19,Y+5
 1452 0542 3860      		ori r19,lo8(8)
 1453 0544 3D83      		std Y+5,r19
 1454               	.LVL115:
 1455               	.L85:
 745:main.c        ****       DEBOUNCE(4); // FSB
 1456               		.loc 1 745 0 is_stmt 1
 1457 0546 9E81      		ldd r25,Y+6
 1458 0548 94FF      		sbrs r25,4
 1459 054a 00C0      		rjmp .L86
 1460               	.L221:
 1461               		.loc 1 745 0 is_stmt 0 discriminator 1
 1462 054c 84FF      		sbrs r24,4
 1463 054e 00C0      		rjmp .L86
 1464               		.loc 1 745 0 discriminator 3
 1465 0550 5394      		inc r5
 1466               	.LVL116:
 1467 0552 E7ED      		ldi r30,lo8(-41)
 1468 0554 E515      		cp r30,r5
 1469 0556 00F0      		brlo .L87
 1470               		.loc 1 745 0 discriminator 5
 1471 0558 FD81      		ldd r31,Y+5
 1472 055a F061      		ori r31,lo8(16)
 1473 055c FD83      		std Y+5,r31
 1474               	.LVL117:
 1475               	.L87:
 746:main.c        ****       DEBOUNCE(5); // DPI
 1476               		.loc 1 746 0 is_stmt 1
 1477 055e 3E81      		ldd r19,Y+6
 1478 0560 35FF      		sbrs r19,5
 1479 0562 00C0      		rjmp .L88
 1480               		.loc 1 746 0 is_stmt 0 discriminator 1
 1481 0564 85FF      		sbrs r24,5
 1482 0566 00C0      		rjmp .L88
 1483               		.loc 1 746 0 discriminator 3
 1484 0568 4394      		inc r4
 1485               	.LVL118:
 1486 056a 57ED      		ldi r21,lo8(-41)
 1487 056c 5415      		cp r21,r4
 1488 056e 00F0      		brlo .L89
 1489               		.loc 1 746 0 discriminator 5
 1490 0570 8D81      		ldd r24,Y+5
 1491               	.LVL119:
 1492 0572 8062      		ori r24,lo8(32)
 1493 0574 8D83      		std Y+5,r24
 1494               	.LVL120:
 1495               	.L89:
 747:main.c        **** #undef DEBOUNCE
 748:main.c        **** #endif
 749:main.c        **** 
 750:main.c        **** #ifdef MIX
 751:main.c        ****       const uint8_t btn_unpressed = PIND & (~(EIFR) | 0b00000100); //(set soft pins 1 here and 0 ne
 752:main.c        ****       EIFR = 0b00111011; // clear EIFR
 753:main.c        ****       btn_dbncd &= ~0b00100100; // to do a mix of soft and hard debouncing, set the bit to 1 and be
 754:main.c        ****                   // other DEBOUNCE() while Define HARDEB. comment out or #ifndef MIX(prefered) bot
 755:main.c        ****                   // dpi bit left alone  in btn_dbncd so it doesnt self trigger.
 756:main.c        **** #define DEBOUNCE(index) \
 757:main.c        ****   if ((btn_prev & (1<<index)) && (btn_unpressed & (1<<index))) { \
 758:main.c        ****     btn_time[index]++; \
 759:main.c        ****     if (btn_time[index] < DEBOUNCE_TIME) \
 760:main.c        ****       btn_dbncd |= (1<<index); \
 761:main.c        ****   } else { \
 762:main.c        ****     btn_time[index] = 0; \
 763:main.c        ****     btn_dbncd |= (~btn_unpressed) & (1<<index); \
 764:main.c        ****   }
 765:main.c        **** 
 766:main.c        ****       //DEBOUNCE(0); // L
 767:main.c        ****       //DEBOUNCE(1); // R
 768:main.c        ****       DEBOUNCE(2); // M
 769:main.c        ****       //DEBOUNCE(3); // RSB
 770:main.c        ****       //DEBOUNCE(4); // FSB
 771:main.c        ****       DEBOUNCE(5); // DPI
 772:main.c        **** 
 773:main.c        **** #undef DEBOUNCE
 774:main.c        **** #endif
 775:main.c        **** 
 776:main.c        **** #ifdef HARDEB
 777:main.c        ****       uint8_t btn_f = PINF & 0b11110011;
 778:main.c        ****       uint8_t btn_d = PIND & 0b10000111;
 779:main.c        **** 
 780:main.c        ****       if (!(btn_f & (1 << 0))) { //left hand primary +click
 781:main.c        ****         btn_dbncd |= (1 << 0); //+left
 782:main.c        ****       }
 783:main.c        **** 
 784:main.c        ****       if (!(btn_f & (1 << 1))) { //left hand primary -click
 785:main.c        ****         btn_dbncd &= ~(1 << 0); //-left
 786:main.c        ****       }
 787:main.c        **** 
 788:main.c        ****       if (!(btn_f & (1 << 4))) { //right hand secondary +click
 789:main.c        ****         btn_dbncd |= (1 << 1); //+right
 790:main.c        ****       }
 791:main.c        **** 
 792:main.c        ****       if (!(btn_d & (1 << 7))) { //right hand secondary -click
 793:main.c        ****         btn_dbncd &= ~(1 << 1); //-right
 794:main.c        ****       }
 795:main.c        **** 
 796:main.c        **** #ifndef MIX
 797:main.c        ****       if (!(btn_d & (1 << 2))) {
 798:main.c        ****         btn_dbncd |= (1 << 2); //+middle +click
 799:main.c        ****         _whl = 0;
 800:main.c        ****       }
 801:main.c        **** 
 802:main.c        ****       if (!(btn_f & (1 << 5))) { //-click
 803:main.c        ****         btn_dbncd &= ~(1 << 2); //-middle
 804:main.c        ****       }
 805:main.c        **** #endif
 806:main.c        **** 
 807:main.c        ****       if (!(btn_f & (1 << 7))) { //right hand side +click
 808:main.c        ****         btn_dbncd |= (1 << 4); //+forward
 809:main.c        ****       }
 810:main.c        **** 
 811:main.c        ****       if (!(btn_f & (1 << 6))) { //right hand side -click
 812:main.c        ****         btn_dbncd &= ~(1 << 4); //-forward
 813:main.c        ****       }
 814:main.c        **** 
 815:main.c        ****       if (!(btn_d & (1 << 1))) { //left hand side +click
 816:main.c        ****         btn_dbncd |= (1 << 3); //+back
 817:main.c        ****       }
 818:main.c        **** 
 819:main.c        ****       if (!(btn_d & (1 << 0))) { //left hand side -click
 820:main.c        ****         btn_dbncd &= ~(1 << 3); //-back
 821:main.c        ****       }
 822:main.c        **** #endif
 823:main.c        **** #ifndef HARDEB
 824:main.c        ****       if (btn_dbncd & (1 << 2)) {
 1496               		.loc 1 824 0 is_stmt 1
 1497 0576 ED81      		ldd r30,Y+5
 1498 0578 E2FD      		sbrc r30,2
 825:main.c        ****         _whl = 0;
 1499               		.loc 1 825 0
 1500 057a E12C      		mov r14,__zero_reg__
 1501               	.LVL121:
 1502               	.L90:
 826:main.c        ****       }
 827:main.c        **** #endif
 828:main.c        **** #ifdef MIX
 829:main.c        ****       if (btn_dbncd & (1 << 2)) {
 830:main.c        ****         _whl = 0;
 831:main.c        ****       }
 832:main.c        **** #endif
 833:main.c        **** #ifdef RGB
 834:main.c        ****       // Profiles ------------------------
 835:main.c        ****       if (profile == 1) {
 836:main.c        ****         led_colours_index = p1_led_colour;
 837:main.c        ****         led_colour = led_colours[led_colours_index];
 838:main.c        ****         led_bright_index = p1_led_brightness;
 839:main.c        ****         led_rgb_brightness = led_bright[led_bright_index];
 840:main.c        ****       }
 841:main.c        **** 
 842:main.c        ****       if (profile == 2) {
 843:main.c        ****         led_colours_index = p2_led_colour;
 844:main.c        ****         led_colour = led_colours[led_colours_index];
 845:main.c        ****         led_bright_index = p2_led_brightness;
 846:main.c        ****         led_rgb_brightness = led_bright[led_bright_index];
 847:main.c        ****       }
 848:main.c        **** 
 849:main.c        ****       if (profile == 3) {
 850:main.c        ****         led_colours_index = p3_led_colour;
 851:main.c        ****         led_colour = led_colours[led_colours_index];
 852:main.c        ****         led_bright_index = p3_led_brightness;
 853:main.c        ****         led_rgb_brightness = led_bright[led_bright_index];
 854:main.c        ****       }
 855:main.c        **** #endif
 856:main.c        ****       // usb
 857:main.c        ****       // first make sure it's configured
 858:main.c        ****       sei();
 1503               		.loc 1 858 0
 1504               	/* #APP */
 1505               	 ;  858 "main.c" 1
 1506 057c 7894      		sei
 1507               	 ;  0 "" 2
 1508               	/* #NOAPP */
 1509               	.L91:
 859:main.c        ****       while (!usb_configured());
 1510               		.loc 1 859 0 discriminator 1
 1511 057e 0E94 0000 		call usb_configured
 1512               	.LVL122:
 1513 0582 8823      		tst r24
 1514 0584 01F0      		breq .L91
 860:main.c        ****       cli();
 1515               		.loc 1 860 0
 1516               	/* #APP */
 1517               	 ;  860 "main.c" 1
 1518 0586 F894      		cli
 1519               	 ;  0 "" 2
 861:main.c        **** 
 862:main.c        ****       // this stuff is very intricate and confusing
 863:main.c        ****       // i'm fairly certain all of it is correct.
 864:main.c        **** 
 865:main.c        ****       // mask dpi button state for usb
 866:main.c        ****       const uint8_t btn_dbncd_mask = btn_dbncd & 0b00011111;
 1520               		.loc 1 866 0
 1521               	/* #NOAPP */
 1522 0588 4D81      		ldd r20,Y+5
 1523 058a 4F71      		andi r20,lo8(31)
 1524               	.LVL123:
 867:main.c        **** 
 868:main.c        ****       // there's nothing to do if nothing's changed in this 125us cycle
 869:main.c        ****       if ((btn_dbncd_mask != (btn_prev & 0b00011111)) || _x.all || _y.all || _whl) {
 1525               		.loc 1 869 0
 1526 058c 242F      		mov r18,r20
 1527 058e 30E0      		ldi r19,0
 1528 0590 FE81      		ldd r31,Y+6
 1529 0592 FF71      		andi r31,lo8(31)
 1530 0594 8F2F      		mov r24,r31
 1531 0596 90E0      		ldi r25,0
 1532 0598 2817      		cp r18,r24
 1533 059a 3907      		cpc r19,r25
 1534 059c 01F4      		brne .+2
 1535 059e 00C0      		rjmp .L219
 1536               	.LVL124:
 1537               	.L92:
 870:main.c        ****         UENUM = MOUSE_ENDPOINT;
 1538               		.loc 1 870 0
 1539 05a0 23E0      		ldi r18,lo8(3)
 1540 05a2 2093 E900 		sts 233,r18
 1541               	.LVL125:
 871:main.c        ****         if (UESTA0X & (1 << NBUSYBK0)) { // untransmitted data still in bank
 1542               		.loc 1 871 0
 1543 05a6 8091 EE00 		lds r24,238
 1544 05aa 80FF      		sbrs r24,0
 1545 05ac 00C0      		rjmp .L110
 872:main.c        ****           UEINTX |= (1 << RXOUTI); // kill bank; RXOUTI == KILLBK
 1546               		.loc 1 872 0
 1547 05ae 8091 E800 		lds r24,232
 1548 05b2 8460      		ori r24,lo8(4)
 1549 05b4 8093 E800 		sts 232,r24
 1550               	.L95:
 873:main.c        ****           while (UEINTX & (1 << RXOUTI));
 1551               		.loc 1 873 0 discriminator 1
 1552 05b8 8091 E800 		lds r24,232
 1553 05bc 82FD      		sbrc r24,2
 1554 05be 00C0      		rjmp .L95
 1555               	.LVL126:
 1556 05c0 892D      		mov r24,r9
 1557               	.LVL127:
 1558 05c2 982D      		mov r25,r8
 1559               	.LVL128:
 1560 05c4 272D      		mov r18,r7
 1561               	.LVL129:
 1562 05c6 362D      		mov r19,r6
 1563               	.LVL130:
 1564               	.L94:
 874:main.c        ****         } else {
 875:main.c        ****           // transmission's finished, or the data that should be in the
 876:main.c        ****           // bank is exactly the same as what was previously transmitted
 877:main.c        ****           // so that there was nothing worth transmitting before.
 878:main.c        ****           btn_usb_prev = btn_usb;
 879:main.c        ****           btn_usb = 0x00;
 880:main.c        ****           x.all = 0;
 881:main.c        ****           y.all = 0;
 882:main.c        ****           whl = 0;
 883:main.c        ****         }
 884:main.c        **** 
 885:main.c        ****         btn_usb |= btn_dbncd_mask & 0b00011111; // L, R, M, FSB, RSB
 1565               		.loc 1 885 0
 1566 05c8 142B      		or r17,r20
 1567               	.LVL131:
 886:main.c        **** #ifndef INVERTX
 887:main.c        ****         x.all += _x.all;
 1568               		.loc 1 887 0
 1569 05ca 8C0D      		add r24,r12
 1570 05cc 9D1D      		adc r25,r13
 1571 05ce 982E      		mov r9,r24
 1572               	.LVL132:
 1573 05d0 892E      		mov r8,r25
 888:main.c        **** #endif
 889:main.c        **** #ifdef INVERTX
 890:main.c        ****         x.all -= _x.all;
 891:main.c        **** #endif
 892:main.c        **** #ifndef INVERTY
 893:main.c        ****         y.all += _y.all;
 1574               		.loc 1 893 0
 1575 05d2 2A0D      		add r18,r10
 1576 05d4 3B1D      		adc r19,r11
 1577 05d6 722E      		mov r7,r18
 1578               	.LVL133:
 1579 05d8 632E      		mov r6,r19
 894:main.c        **** #endif
 895:main.c        **** #ifdef INVERTY
 896:main.c        ****         y.all -= _y.all;
 897:main.c        **** #endif
 898:main.c        **** #ifndef INVERTWHL
 899:main.c        ****         whl += _whl;
 1580               		.loc 1 899 0
 1581 05da 0E0D      		add r16,r14
 1582               	.LVL134:
 900:main.c        **** #endif
 901:main.c        **** #ifdef INVERTWHL
 902:main.c        ****         whl -= _whl;
 903:main.c        **** #endif
 904:main.c        ****         // only load bank with data if there's something worth transmitting
 905:main.c        ****         if ((btn_usb != btn_usb_prev) || x.all || y.all || whl) {
 1583               		.loc 1 905 0
 1584 05dc 3116      		cp r3,r17
 1585 05de 01F4      		brne .+2
 1586 05e0 00C0      		rjmp .L220
 1587               	.L96:
 906:main.c        ****           UEDATX = btn_usb;
 1588               		.loc 1 906 0
 1589 05e2 1093 F100 		sts 241,r17
 907:main.c        ****           UEDATX = x.lo;
 1590               		.loc 1 907 0
 1591 05e6 8093 F100 		sts 241,r24
 908:main.c        ****           UEDATX = x.hi;
 1592               		.loc 1 908 0
 1593 05ea 9093 F100 		sts 241,r25
 909:main.c        ****           UEDATX = y.lo;
 1594               		.loc 1 909 0
 1595 05ee 2093 F100 		sts 241,r18
 910:main.c        ****           UEDATX = y.hi;
 1596               		.loc 1 910 0
 1597 05f2 3093 F100 		sts 241,r19
 911:main.c        ****           UEDATX = whl; // wheel scrolls
 1598               		.loc 1 911 0
 1599 05f6 0093 F100 		sts 241,r16
 912:main.c        ****           UEINTX = 0x3a;
 1600               		.loc 1 912 0
 1601 05fa 3AE3      		ldi r19,lo8(58)
 1602 05fc 3093 E800 		sts 232,r19
 1603               	.LVL135:
 1604               	.L93:
 1605               	.LBE469:
 402:main.c        ****       // synchronization to usb frames and 125us intervals
 1606               		.loc 1 402 0 discriminator 2
 1607 0600 F394      		inc r15
 1608               	.LVL136:
 1609 0602 58E0      		ldi r21,lo8(8)
 1610 0604 F516      		cp r15,r21
 1611 0606 01F4      		brne .+2
 1612 0608 00C0      		rjmp .L98
 1613 060a 8D81      		ldd r24,Y+5
 1614 060c 8E83      		std Y+6,r24
 1615               	.LBB497:
 407:main.c        ****         // sync to usb frames (1ms)
 1616               		.loc 1 407 0
 1617 060e F110      		cpse r15,__zero_reg__
 1618 0610 00C0      		rjmp .L190
 1619               	.LVL137:
 1620               	.L215:
 409:main.c        ****         while (!(UDINT & (1 << SOFI)));
 1621               		.loc 1 409 0
 1622 0612 8091 E100 		lds r24,225
 1623 0616 8B7F      		andi r24,lo8(-5)
 1624 0618 8093 E100 		sts 225,r24
 1625               	.LVL138:
 1626               	.L46:
 410:main.c        ****         // reset prescaler phase, not really necessary
 1627               		.loc 1 410 0 discriminator 1
 1628 061c 8091 E100 		lds r24,225
 1629 0620 82FF      		sbrs r24,2
 1630 0622 00C0      		rjmp .L46
 412:main.c        ****         TCNT0 = 0;
 1631               		.loc 1 412 0
 1632 0624 83B5      		in r24,0x23
 1633 0626 8160      		ori r24,lo8(1)
 1634 0628 83BD      		out 0x23,r24
 413:main.c        ****       } else {
 1635               		.loc 1 413 0
 1636 062a 16BC      		out 0x26,__zero_reg__
 1637 062c 00C0      		rjmp .L47
 1638               	.LVL139:
 1639               	.L103:
 1640               	.LBE497:
 1641               	.LBE468:
 1642 062e 83E0      		ldi r24,lo8(3)
 1643 0630 00C0      		rjmp .L4
 1644               	.L104:
 1645 0632 8FE0      		ldi r24,lo8(15)
 1646 0634 00C0      		rjmp .L4
 1647               	.LVL140:
 1648               	.L88:
 1649               	.LBB499:
 1650               	.LBB498:
 746:main.c        **** #undef DEBOUNCE
 1651               		.loc 1 746 0 discriminator 4
 1652 0636 8095      		com r24
 1653               	.LVL141:
 1654 0638 8072      		andi r24,lo8(32)
 1655               	.LVL142:
 1656 063a 9D81      		ldd r25,Y+5
 1657 063c 982B      		or r25,r24
 1658 063e 9D83      		std Y+5,r25
 1659               	.LVL143:
 1660 0640 412C      		mov r4,__zero_reg__
 1661 0642 00C0      		rjmp .L89
 1662               	.LVL144:
 1663               	.L84:
 744:main.c        ****       DEBOUNCE(4); // FSB
 1664               		.loc 1 744 0 discriminator 4
 1665 0644 982F      		mov r25,r24
 1666 0646 9095      		com r25
 1667 0648 9870      		andi r25,lo8(8)
 1668 064a 5D81      		ldd r21,Y+5
 1669 064c 592B      		or r21,r25
 1670 064e 5D83      		std Y+5,r21
 1671               	.LVL145:
 1672 0650 1982      		std Y+1,__zero_reg__
 1673               	.LVL146:
 745:main.c        ****       DEBOUNCE(5); // DPI
 1674               		.loc 1 745 0 discriminator 4
 1675 0652 9E81      		ldd r25,Y+6
 1676 0654 94FD      		sbrc r25,4
 1677 0656 00C0      		rjmp .L221
 1678               	.LVL147:
 1679               	.L86:
 1680 0658 982F      		mov r25,r24
 1681 065a 9095      		com r25
 1682 065c 9071      		andi r25,lo8(16)
 1683 065e 2D81      		ldd r18,Y+5
 1684 0660 292B      		or r18,r25
 1685 0662 2D83      		std Y+5,r18
 1686               	.LVL148:
 1687 0664 512C      		mov r5,__zero_reg__
 1688 0666 00C0      		rjmp .L87
 1689               	.LVL149:
 1690               	.L82:
 743:main.c        ****       DEBOUNCE(3); // RSB
 1691               		.loc 1 743 0 discriminator 4
 1692 0668 982F      		mov r25,r24
 1693 066a 9095      		com r25
 1694 066c 9470      		andi r25,lo8(4)
 1695 066e ED81      		ldd r30,Y+5
 1696 0670 E92B      		or r30,r25
 1697 0672 ED83      		std Y+5,r30
 1698               	.LVL150:
 1699 0674 1A82      		std Y+2,__zero_reg__
 1700 0676 00C0      		rjmp .L83
 1701               	.LVL151:
 1702               	.L80:
 742:main.c        ****       DEBOUNCE(2); // M
 1703               		.loc 1 742 0 discriminator 4
 1704 0678 982F      		mov r25,r24
 1705 067a 9095      		com r25
 1706 067c 9270      		andi r25,lo8(2)
 1707 067e 2D81      		ldd r18,Y+5
 1708 0680 292B      		or r18,r25
 1709 0682 2D83      		std Y+5,r18
 1710               	.LVL152:
 1711 0684 1B82      		std Y+3,__zero_reg__
 1712 0686 00C0      		rjmp .L81
 1713               	.LVL153:
 1714               	.L76:
 1715 0688 282F      		mov r18,r24
 1716 068a 2170      		andi r18,lo8(1)
 1717 068c 2D83      		std Y+5,r18
 1718               	.L77:
 1719               	.LVL154:
 1720 068e 3D81      		ldd r19,Y+5
 1721 0690 51E0      		ldi r21,lo8(1)
 1722 0692 3527      		eor r19,r21
 1723 0694 3D83      		std Y+5,r19
 1724               	.LVL155:
 741:main.c        ****       DEBOUNCE(1); // R
 1725               		.loc 1 741 0 discriminator 4
 1726 0696 1C82      		std Y+4,__zero_reg__
 1727 0698 00C0      		rjmp .L79
 1728               	.LVL156:
 1729               	.L110:
 1730 069a 312E      		mov r3,r17
 1731               	.LVL157:
 1732 069c 00E0      		ldi r16,0
 1733               	.LVL158:
 1734 069e 20E0      		ldi r18,0
 1735 06a0 30E0      		ldi r19,0
 1736 06a2 80E0      		ldi r24,0
 1737 06a4 90E0      		ldi r25,0
 1738 06a6 10E0      		ldi r17,0
 1739               	.LVL159:
 1740 06a8 00C0      		rjmp .L94
 1741               	.LVL160:
 1742               	.L102:
 679:main.c        ****         if (_rev > 0) {
 1743               		.loc 1 679 0
 1744 06aa 1092 0000 		sts whl_eighth,__zero_reg__
 681:main.c        ****           if (stack > 0) {
 1745               		.loc 1 681 0
 1746 06ae 9150      		subi r25,lo8(-(-1))
 1747 06b0 9093 0000 		sts _rev,r25
 682:main.c        ****             stack--;
 1748               		.loc 1 682 0
 1749 06b4 8091 0000 		lds r24,stack
 1750 06b8 1816      		cp __zero_reg__,r24
 1751 06ba 04F0      		brlt .+2
 1752 06bc 00C0      		rjmp .L222
 683:main.c        ****             _whl = 1;
 1753               		.loc 1 683 0
 1754 06be 8150      		subi r24,lo8(-(-1))
 1755 06c0 8093 0000 		sts stack,r24
 1756               	.LVL161:
 684:main.c        ****           }
 1757               		.loc 1 684 0
 1758 06c4 EE24      		clr r14
 1759 06c6 E394      		inc r14
 1760               	.LVL162:
 1761               	.L73:
 691:main.c        ****           whl_time++;
 1762               		.loc 1 691 0
 1763 06c8 8091 0000 		lds r24,whl_time
 1764 06cc 8D37      		cpi r24,lo8(125)
 1765 06ce 04F4      		brge .L211
 692:main.c        ****         }
 1766               		.loc 1 692 0
 1767 06d0 8F5F      		subi r24,lo8(-(1))
 1768 06d2 8093 0000 		sts whl_time,r24
 1769               	.L211:
 1770 06d6 8091 0000 		lds r24,whl_eighth
 1771 06da 00C0      		rjmp .L75
 1772               	.LVL163:
 1773               	.L219:
 869:main.c        ****         UENUM = MOUSE_ENDPOINT;
 1774               		.loc 1 869 0 discriminator 1
 1775 06dc C114      		cp r12,__zero_reg__
 1776 06de D104      		cpc r13,__zero_reg__
 1777 06e0 01F0      		breq .+2
 1778 06e2 00C0      		rjmp .L92
 1779               	.LVL164:
 869:main.c        ****         UENUM = MOUSE_ENDPOINT;
 1780               		.loc 1 869 0 is_stmt 0 discriminator 2
 1781 06e4 A114      		cp r10,__zero_reg__
 1782 06e6 B104      		cpc r11,__zero_reg__
 1783 06e8 01F0      		breq .+2
 1784 06ea 00C0      		rjmp .L92
 869:main.c        ****         UENUM = MOUSE_ENDPOINT;
 1785               		.loc 1 869 0 discriminator 3
 1786 06ec EE20      		tst r14
 1787 06ee 01F4      		brne .+2
 1788 06f0 00C0      		rjmp .L93
 1789 06f2 00C0      		rjmp .L92
 1790               	.LVL165:
 1791               	.L220:
 905:main.c        ****           UEDATX = btn_usb;
 1792               		.loc 1 905 0 is_stmt 1 discriminator 1
 1793 06f4 0097      		sbiw r24,0
 1794 06f6 01F0      		breq .+2
 1795 06f8 00C0      		rjmp .L96
 905:main.c        ****           UEDATX = btn_usb;
 1796               		.loc 1 905 0 is_stmt 0 discriminator 2
 1797 06fa 2115      		cp r18,__zero_reg__
 1798 06fc 3105      		cpc r19,__zero_reg__
 1799 06fe 01F0      		breq .+2
 1800 0700 00C0      		rjmp .L96
 905:main.c        ****           UEDATX = btn_usb;
 1801               		.loc 1 905 0 discriminator 3
 1802 0702 0111      		cpse r16,__zero_reg__
 1803 0704 00C0      		rjmp .L96
 1804 0706 132D      		mov r17,r3
 1805               	.LVL166:
 1806 0708 00C0      		rjmp .L93
 1807               	.LVL167:
 1808               	.L218:
 668:main.c        ****           stack--;
 1809               		.loc 1 668 0 is_stmt 1
 1810 070a 8091 0000 		lds r24,stack
 1811 070e 1816      		cp __zero_reg__,r24
 1812 0710 04F0      		brlt .+2
 1813 0712 00C0      		rjmp .L71
 669:main.c        ****           _whl = 1;
 1814               		.loc 1 669 0
 1815 0714 8150      		subi r24,lo8(-(-1))
 1816 0716 8093 0000 		sts stack,r24
 1817               	.LVL168:
 670:main.c        ****         }
 1818               		.loc 1 670 0
 1819 071a EE24      		clr r14
 1820 071c E394      		inc r14
 1821               	.LVL169:
 1822               	.L72:
 678:main.c        ****         whl_eighth = 0;
 1823               		.loc 1 678 0
 1824 071e 8091 0000 		lds r24,whl_eighth
 1825 0722 8830      		cpi r24,lo8(8)
 1826 0724 04F4      		brge .+2
 1827 0726 00C0      		rjmp .L75
 679:main.c        ****         if (_rev > 0) {
 1828               		.loc 1 679 0
 1829 0728 1092 0000 		sts whl_eighth,__zero_reg__
 1830 072c 00C0      		rjmp .L73
 1831               	.LVL170:
 1832               	.L59:
 1833               	.LBB495:
 642:main.c        ****         #ifndef WHLACC
 1834               		.loc 1 642 0
 1835 072e 27FF      		sbrs r18,7
 1836 0730 00C0      		rjmp .L210
 647:main.c        **** 				rev = 15 - whl_time;
 1837               		.loc 1 647 0
 1838 0732 9091 0000 		lds r25,whl_time
 1839 0736 9F30      		cpi r25,lo8(15)
 1840 0738 04F4      		brge .+2
 1841 073a 00C0      		rjmp .L223
 658:main.c        **** 				_rev = whl_time;				
 1842               		.loc 1 658 0
 1843 073c 8091 0000 		lds r24,stack
 1844               	.LVL171:
 1845 0740 8F5F      		subi r24,lo8(-(1))
 1846 0742 8093 0000 		sts stack,r24
 657:main.c        **** 				stack++;
 1847               		.loc 1 657 0
 1848 0746 9F37      		cpi r25,lo8(127)
 1849 0748 01F0      		breq .L69
 659:main.c        **** 				}else{
 1850               		.loc 1 659 0
 1851 074a 9093 0000 		sts _rev,r25
 1852               	.L68:
 663:main.c        ****         }
 1853               		.loc 1 663 0
 1854 074e 1092 0000 		sts whl_time,__zero_reg__
 1855 0752 00C0      		rjmp .L58
 1856               	.L60:
 632:main.c        **** 				stack--;
 1857               		.loc 1 632 0
 1858 0754 8F37      		cpi r24,lo8(127)
 1859 0756 01F0      		breq .L63
 633:main.c        **** 				_rev = whl_time;				
 1860               		.loc 1 633 0
 1861 0758 9091 0000 		lds r25,stack
 1862 075c 9150      		subi r25,lo8(-(-1))
 1863 075e 9093 0000 		sts stack,r25
 634:main.c        **** 				}else{
 1864               		.loc 1 634 0
 1865 0762 8093 0000 		sts _rev,r24
 638:main.c        ****         #endif
 1866               		.loc 1 638 0
 1867 0766 1092 0000 		sts whl_time,__zero_reg__
 642:main.c        ****         #ifndef WHLACC
 1868               		.loc 1 642 0
 1869 076a 27FF      		sbrs r18,7
 1870 076c 00C0      		rjmp .L210
 1871               	.L217:
 1872 076e 97E0      		ldi r25,lo8(7)
 1873 0770 87E0      		ldi r24,lo8(7)
 1874               	.L64:
 649:main.c        **** 					if(stack < 0){ 
 1875               		.loc 1 649 0
 1876 0772 9093 0000 		sts rev,r25
 650:main.c        **** 	        		stack = stack - rev;
 1877               		.loc 1 650 0
 1878 0776 9091 0000 		lds r25,stack
 1879 077a 97FD      		sbrc r25,7
 1880 077c 00C0      		rjmp .L224
 1881               	.L67:
 654:main.c        **** 					}
 1882               		.loc 1 654 0
 1883 077e 890F      		add r24,r25
 1884 0780 8093 0000 		sts stack,r24
 1885 0784 9091 0000 		lds r25,_rev
 1886 0788 00C0      		rjmp .L68
 1887               	.LVL172:
 1888               	.L222:
 1889               	.LBE495:
 686:main.c        ****             stack++;
 1890               		.loc 1 686 0
 1891 078a 87FF      		sbrs r24,7
 1892 078c 00C0      		rjmp .L108
 687:main.c        ****             _whl = -1;
 1893               		.loc 1 687 0
 1894 078e 8F5F      		subi r24,lo8(-(1))
 1895 0790 8093 0000 		sts stack,r24
 1896               	.LVL173:
 688:main.c        ****           }
 1897               		.loc 1 688 0
 1898 0794 EE24      		clr r14
 1899 0796 EA94      		dec r14
 1900 0798 00C0      		rjmp .L73
 1901               	.LVL174:
 1902               	.L71:
 672:main.c        ****           stack++;
 1903               		.loc 1 672 0
 1904 079a 87FF      		sbrs r24,7
 1905 079c 00C0      		rjmp .L107
 673:main.c        ****           _whl = -1;
 1906               		.loc 1 673 0
 1907 079e 8F5F      		subi r24,lo8(-(1))
 1908 07a0 8093 0000 		sts stack,r24
 1909               	.LVL175:
 674:main.c        ****         }
 1910               		.loc 1 674 0
 1911 07a4 EE24      		clr r14
 1912 07a6 EA94      		dec r14
 1913 07a8 00C0      		rjmp .L72
 1914               	.LVL176:
 1915               	.L63:
 1916               	.LBB496:
 636:main.c        **** 				}
 1917               		.loc 1 636 0
 1918 07aa 8091 0000 		lds r24,stack
 1919 07ae 8150      		subi r24,lo8(-(-1))
 1920 07b0 8093 0000 		sts stack,r24
 1921 07b4 00C0      		rjmp .L62
 1922               	.L224:
 651:main.c        **** 					}
 1923               		.loc 1 651 0
 1924 07b6 981B      		sub r25,r24
 1925 07b8 9093 0000 		sts stack,r25
 653:main.c        **** 	        		stack = stack + rev;
 1926               		.loc 1 653 0
 1927 07bc 97FF      		sbrs r25,7
 1928 07be 00C0      		rjmp .L67
 1929               	.L69:
 1930 07c0 9091 0000 		lds r25,_rev
 1931 07c4 00C0      		rjmp .L68
 1932               	.L216:
 626:main.c        **** 					}
 1933               		.loc 1 626 0
 1934 07c6 981B      		sub r25,r24
 1935 07c8 9093 0000 		sts stack,r25
 628:main.c        **** 	        		stack = stack + rev;
 1936               		.loc 1 628 0
 1937 07cc 1916      		cp __zero_reg__,r25
 1938 07ce 04F0      		brlt .+2
 1939 07d0 00C0      		rjmp .L62
 1940 07d2 00C0      		rjmp .L61
 1941               	.LVL177:
 1942               	.L107:
 1943               	.LBE496:
 594:main.c        **** #ifndef WHLBUX
 1944               		.loc 1 594 0
 1945 07d4 E12C      		mov r14,__zero_reg__
 1946 07d6 00C0      		rjmp .L72
 1947               	.L108:
 1948 07d8 E12C      		mov r14,__zero_reg__
 1949 07da 00C0      		rjmp .L73
 1950               	.LVL178:
 1951               	.L223:
 1952 07dc 822D      		mov r24,r2
 1953               	.LVL179:
 1954 07de 891B      		sub r24,r25
 1955 07e0 8595      		asr r24
 1956 07e2 8595      		asr r24
 1957 07e4 8C5F      		subi r24,lo8(-(4))
 1958 07e6 982F      		mov r25,r24
 1959 07e8 00C0      		rjmp .L64
 1960               	.LBE498:
 1961               	.LBE499:
 1962               		.cfi_endproc
 1963               	.LFE10:
 1965               	.global	_rev
 1966               		.data
 1969               	_rev:
 1970 0000 12        		.byte	18
 1971               	.global	stack
 1972               		.section .bss
 1975               	stack:
 1976 0000 00        		.zero	1
 1977               	.global	rev
 1980               	rev:
 1981 0001 00        		.zero	1
 1982               	.global	whl_eighth
 1985               	whl_eighth:
 1986 0002 00        		.zero	1
 1987               	.global	whl_time
 1990               	whl_time:
 1991 0003 00        		.zero	1
 1992               	.global	oldpinstate
 1995               	oldpinstate:
 1996 0004 00        		.zero	1
 1997               	.global	ttable
 1998               		.section	.rodata
 2001               	ttable:
 2002 0000 03        		.byte	3
 2003 0001 02        		.byte	2
 2004 0002 01        		.byte	1
 2005 0003 00        		.byte	0
 2006 0004 83        		.byte	-125
 2007 0005 00        		.byte	0
 2008 0006 01        		.byte	1
 2009 0007 00        		.byte	0
 2010 0008 43        		.byte	67
 2011 0009 02        		.byte	2
 2012 000a 00        		.byte	0
 2013 000b 00        		.byte	0
 2014 000c 03        		.byte	3
 2015 000d 05        		.byte	5
 2016 000e 04        		.byte	4
 2017 000f 00        		.byte	0
 2018 0010 03        		.byte	3
 2019 0011 03        		.byte	3
 2020 0012 04        		.byte	4
 2021 0013 40        		.byte	64
 2022 0014 03        		.byte	3
 2023 0015 05        		.byte	5
 2024 0016 03        		.byte	3
 2025 0017 80        		.byte	-128
 2026               	.global	state
 2027               		.section .bss
 2030               	state:
 2031 0005 00        		.zero	1
 2032               	.global	srom
 2033               		.section	.progmem.data,"a",@progbits
 2036               	srom:
 2037 0000 01        		.byte	1
 2038 0001 03        		.byte	3
 2039 0002 87        		.byte	-121
 2040 0003 8A        		.byte	-118
 2041 0004 56        		.byte	86
 2042 0005 0F        		.byte	15
 2043 0006 DE        		.byte	-34
 2044 0007 3E        		.byte	62
 2045 0008 FE        		.byte	-2
 2046 0009 5F        		.byte	95
 2047 000a 1D        		.byte	29
 2048 000b B8        		.byte	-72
 2049 000c F2        		.byte	-14
 2050 000d 66        		.byte	102
 2051 000e 4E        		.byte	78
 2052 000f FF        		.byte	-1
 2053 0010 7C        		.byte	124
 2054 0011 7A        		.byte	122
 2055 0012 76        		.byte	118
 2056 0013 4E        		.byte	78
 2057 0014 1C        		.byte	28
 2058 0015 B8        		.byte	-72
 2059 0016 D7        		.byte	-41
 2060 0017 0D        		.byte	13
 2061 0018 79        		.byte	121
 2062 0019 70        		.byte	112
 2063 001a 62        		.byte	98
 2064 001b 27        		.byte	39
 2065 001c CC        		.byte	-52
 2066 001d 1A        		.byte	26
 2067 001e B6        		.byte	-74
 2068 001f EE        		.byte	-18
 2069 0020 3F        		.byte	63
 2070 0021 FC        		.byte	-4
 2071 0022 7A        		.byte	122
 2072 0023 76        		.byte	118
 2073 0024 4F        		.byte	79
 2074 0025 1C        		.byte	28
 2075 0026 9B        		.byte	-101
 2076 0027 B4        		.byte	-76
 2077 0028 CB        		.byte	-53
 2078 0029 F5        		.byte	-11
 2079 002a 49        		.byte	73
 2080 002b 10        		.byte	16
 2081 002c 83        		.byte	-125
 2082 002d 84        		.byte	-124
 2083 002e 8A        		.byte	-118
 2084 002f 96        		.byte	-106
 2085 0030 8F        		.byte	-113
 2086 0031 7D        		.byte	125
 2087 0032 78        		.byte	120
 2088 0033 72        		.byte	114
 2089 0034 66        		.byte	102
 2090 0035 4D        		.byte	77
 2091 0036 1E        		.byte	30
 2092 0037 BE        		.byte	-66
 2093 0038 DF        		.byte	-33
 2094 0039 1D        		.byte	29
 2095 003a 99        		.byte	-103
 2096 003b B0        		.byte	-80
 2097 003c E2        		.byte	-30
 2098 003d 46        		.byte	70
 2099 003e 0E        		.byte	14
 2100 003f 9E        		.byte	-98
 2101 0040 BE        		.byte	-66
 2102 0041 FE        		.byte	-2
 2103 0042 7E        		.byte	126
 2104 0043 7E        		.byte	126
 2105 0044 7E        		.byte	126
 2106 0045 7E        		.byte	126
 2107 0046 5F        		.byte	95
 2108 0047 1D        		.byte	29
 2109 0048 BC        		.byte	-68
 2110 0049 F2        		.byte	-14
 2111 004a 47        		.byte	71
 2112 004b 0C        		.byte	12
 2113 004c 9A        		.byte	-102
 2114 004d B6        		.byte	-74
 2115 004e CF        		.byte	-49
 2116 004f 1C        		.byte	28
 2117 0050 9B        		.byte	-101
 2118 0051 B4        		.byte	-76
 2119 0052 CB        		.byte	-53
 2120 0053 F5        		.byte	-11
 2121 0054 49        		.byte	73
 2122 0055 10        		.byte	16
 2123 0056 83        		.byte	-125
 2124 0057 65        		.byte	101
 2125 0058 48        		.byte	72
 2126 0059 12        		.byte	18
 2127 005a 87        		.byte	-121
 2128 005b 6D        		.byte	109
 2129 005c 58        		.byte	88
 2130 005d 32        		.byte	50
 2131 005e C7        		.byte	-57
 2132 005f 0C        		.byte	12
 2133 0060 9A        		.byte	-102
 2134 0061 B6        		.byte	-74
 2135 0062 CF        		.byte	-49
 2136 0063 1C        		.byte	28
 2137 0064 BA        		.byte	-70
 2138 0065 F6        		.byte	-10
 2139 0066 6E        		.byte	110
 2140 0067 5E        		.byte	94
 2141 0068 1F        		.byte	31
 2142 0069 BC        		.byte	-68
 2143 006a DB        		.byte	-37
 2144 006b 34        		.byte	52
 2145 006c CB        		.byte	-53
 2146 006d 14        		.byte	20
 2147 006e 8B        		.byte	-117
 2148 006f 94        		.byte	-108
 2149 0070 AA        		.byte	-86
 2150 0071 B7        		.byte	-73
 2151 0072 CD        		.byte	-51
 2152 0073 F9        		.byte	-7
 2153 0074 70        		.byte	112
 2154 0075 43        		.byte	67
 2155 0076 04        		.byte	4
 2156 0077 B7        		.byte	-73
 2157 0078 71        		.byte	113
 2158 0079 BC        		.byte	-68
 2159 007a BB        		.byte	-69
 2160 007b 4D        		.byte	77
 2161 007c 30        		.byte	48
 2162 007d 19        		.byte	25
 2163 007e 01        		.byte	1
 2164 007f 73        		.byte	115
 2165 0080 3F        		.byte	63
 2166 0081 D7        		.byte	-41
 2167 0082 B9        		.byte	-71
 2168 0083 00        		.byte	0
 2169 0084 10        		.byte	16
 2170 0085 96        		.byte	-106
 2171 0086 CD        		.byte	-51
 2172 0087 16        		.byte	22
 2173 0088 D5        		.byte	-43
 2174 0089 5F        		.byte	95
 2175 008a ED        		.byte	-19
 2176 008b 63        		.byte	99
 2177 008c 14        		.byte	20
 2178 008d F7        		.byte	-9
 2179 008e 61        		.byte	97
 2180 008f 6A        		.byte	106
 2181 0090 4E        		.byte	78
 2182 0091 B3        		.byte	-77
 2183 0092 8E        		.byte	-114
 2184 0093 70        		.byte	112
 2185 0094 6E        		.byte	110
 2186 0095 79        		.byte	121
 2187 0096 9A        		.byte	-102
 2188 0097 51        		.byte	81
 2189 0098 24        		.byte	36
 2190 0099 B4        		.byte	-76
 2191 009a C7        		.byte	-57
 2192 009b CA        		.byte	-54
 2193 009c 58        		.byte	88
 2194 009d 33        		.byte	51
 2195 009e EE        		.byte	-18
 2196 009f 94        		.byte	-108
 2197 00a0 C1        		.byte	-63
 2198 00a1 2E        		.byte	46
 2199 00a2 50        		.byte	80
 2200 00a3 4C        		.byte	76
 2201 00a4 EC        		.byte	-20
 2202 00a5 74        		.byte	116
 2203 00a6 6C        		.byte	108
 2204 00a7 4B        		.byte	75
 2205 00a8 E4        		.byte	-28
 2206 00a9 5A        		.byte	90
 2207 00aa F0        		.byte	-16
 2208 00ab BB        		.byte	-69
 2209 00ac B0        		.byte	-80
 2210 00ad BA        		.byte	-70
 2211 00ae 38        		.byte	56
 2212 00af 06        		.byte	6
 2213 00b0 F7        		.byte	-9
 2214 00b1 9B        		.byte	-101
 2215 00b2 AC        		.byte	-84
 2216 00b3 DE        		.byte	-34
 2217 00b4 47        		.byte	71
 2218 00b5 C2        		.byte	-62
 2219 00b6 F7        		.byte	-9
 2220 00b7 3E        		.byte	62
 2221 00b8 A7        		.byte	-89
 2222 00b9 4A        		.byte	74
 2223 00ba 33        		.byte	51
 2224 00bb 9D        		.byte	-99
 2225 00bc 97        		.byte	-105
 2226 00bd 3D        		.byte	61
 2227 00be 89        		.byte	-119
 2228 00bf 9D        		.byte	-99
 2229 00c0 F7        		.byte	-9
 2230 00c1 28        		.byte	40
 2231 00c2 8A        		.byte	-118
 2232 00c3 B2        		.byte	-78
 2233 00c4 44        		.byte	68
 2234 00c5 44        		.byte	68
 2235 00c6 49        		.byte	73
 2236 00c7 AE        		.byte	-82
 2237 00c8 E1        		.byte	-31
 2238 00c9 F9        		.byte	-7
 2239 00ca EB        		.byte	-21
 2240 00cb 36        		.byte	54
 2241 00cc D2        		.byte	-46
 2242 00cd 5D        		.byte	93
 2243 00ce 43        		.byte	67
 2244 00cf 85        		.byte	-123
 2245 00d0 55        		.byte	85
 2246 00d1 88        		.byte	-120
 2247 00d2 E8        		.byte	-24
 2248 00d3 A9        		.byte	-87
 2249 00d4 81        		.byte	-127
 2250 00d5 EA        		.byte	-22
 2251 00d6 F7        		.byte	-9
 2252 00d7 52        		.byte	82
 2253 00d8 7D        		.byte	125
 2254 00d9 D4        		.byte	-44
 2255 00da 88        		.byte	-120
 2256 00db 07        		.byte	7
 2257 00dc DA        		.byte	-38
 2258 00dd D8        		.byte	-40
 2259 00de CE        		.byte	-50
 2260 00df 3F        		.byte	63
 2261 00e0 E2        		.byte	-30
 2262 00e1 ED        		.byte	-19
 2263 00e2 6E        		.byte	110
 2264 00e3 7F        		.byte	127
 2265 00e4 28        		.byte	40
 2266 00e5 85        		.byte	-123
 2267 00e6 6F        		.byte	111
 2268 00e7 AD        		.byte	-83
 2269 00e8 DD        		.byte	-35
 2270 00e9 F1        		.byte	-15
 2271 00ea F4        		.byte	-12
 2272 00eb 23        		.byte	35
 2273 00ec 6B        		.byte	107
 2274 00ed DD        		.byte	-35
 2275 00ee 7C        		.byte	124
 2276 00ef 33        		.byte	51
 2277 00f0 03        		.byte	3
 2278 00f1 B8        		.byte	-72
 2279 00f2 2B        		.byte	43
 2280 00f3 5C        		.byte	92
 2281 00f4 33        		.byte	51
 2282 00f5 F9        		.byte	-7
 2283 00f6 49        		.byte	73
 2284 00f7 0E        		.byte	14
 2285 00f8 70        		.byte	112
 2286 00f9 4E        		.byte	78
 2287 00fa D8        		.byte	-40
 2288 00fb EB        		.byte	-21
 2289 00fc 50        		.byte	80
 2290 00fd 5B        		.byte	91
 2291 00fe 85        		.byte	-123
 2292 00ff D0        		.byte	-48
 2293 0100 81        		.byte	-127
 2294 0101 72        		.byte	114
 2295 0102 BC        		.byte	-68
 2296 0103 58        		.byte	88
 2297 0104 84        		.byte	-124
 2298 0105 DB        		.byte	-37
 2299 0106 76        		.byte	118
 2300 0107 7B        		.byte	123
 2301 0108 A2        		.byte	-94
 2302 0109 85        		.byte	-123
 2303 010a 5F        		.byte	95
 2304 010b 7F        		.byte	127
 2305 010c F9        		.byte	-7
 2306 010d F2        		.byte	-14
 2307 010e E2        		.byte	-30
 2308 010f 27        		.byte	39
 2309 0110 6A        		.byte	106
 2310 0111 82        		.byte	-126
 2311 0112 25        		.byte	37
 2312 0113 B8        		.byte	-72
 2313 0114 4D        		.byte	77
 2314 0115 49        		.byte	73
 2315 0116 B3        		.byte	-77
 2316 0117 FA        		.byte	-6
 2317 0118 B6        		.byte	-74
 2318 0119 7F        		.byte	127
 2319 011a BF        		.byte	-65
 2320 011b B2        		.byte	-78
 2321 011c 65        		.byte	101
 2322 011d 83        		.byte	-125
 2323 011e 70        		.byte	112
 2324 011f C0        		.byte	-64
 2325 0120 51        		.byte	81
 2326 0121 9D        		.byte	-99
 2327 0122 E2        		.byte	-30
 2328 0123 FF        		.byte	-1
 2329 0124 0C        		.byte	12
 2330 0125 7C        		.byte	124
 2331 0126 C3        		.byte	-61
 2332 0127 93        		.byte	-109
 2333 0128 2C        		.byte	44
 2334 0129 62        		.byte	98
 2335 012a FD        		.byte	-3
 2336 012b 87        		.byte	-121
 2337 012c C8        		.byte	-56
 2338 012d F4        		.byte	-12
 2339 012e 56        		.byte	86
 2340 012f 15        		.byte	21
 2341 0130 09        		.byte	9
 2342 0131 B5        		.byte	-75
 2343 0132 B0        		.byte	-80
 2344 0133 94        		.byte	-108
 2345 0134 A7        		.byte	-89
 2346 0135 1C        		.byte	28
 2347 0136 94        		.byte	-108
 2348 0137 79        		.byte	121
 2349 0138 6C        		.byte	108
 2350 0139 00        		.byte	0
 2351 013a D5        		.byte	-43
 2352 013b 31        		.byte	49
 2353 013c C2        		.byte	-62
 2354 013d FF        		.byte	-1
 2355 013e 67        		.byte	103
 2356 013f 5B        		.byte	91
 2357 0140 3B        		.byte	59
 2358 0141 0F        		.byte	15
 2359 0142 97        		.byte	-105
 2360 0143 43        		.byte	67
 2361 0144 A6        		.byte	-90
 2362 0145 89        		.byte	-119
 2363 0146 07        		.byte	7
 2364 0147 19        		.byte	25
 2365 0148 8C        		.byte	-116
 2366 0149 2A        		.byte	42
 2367 014a 99        		.byte	-103
 2368 014b 10        		.byte	16
 2369 014c AA        		.byte	-86
 2370 014d 47        		.byte	71
 2371 014e FC        		.byte	-4
 2372 014f 1E        		.byte	30
 2373 0150 5A        		.byte	90
 2374 0151 7C        		.byte	124
 2375 0152 BC        		.byte	-68
 2376 0153 35        		.byte	53
 2377 0154 7D        		.byte	125
 2378 0155 C4        		.byte	-60
 2379 0156 9B        		.byte	-101
 2380 0157 51        		.byte	81
 2381 0158 EA        		.byte	-22
 2382 0159 53        		.byte	83
 2383 015a 84        		.byte	-124
 2384 015b 1D        		.byte	29
 2385 015c 7C        		.byte	124
 2386 015d 03        		.byte	3
 2387 015e B0        		.byte	-80
 2388 015f 16        		.byte	22
 2389 0160 5F        		.byte	95
 2390 0161 3A        		.byte	58
 2391 0162 3E        		.byte	62
 2392 0163 66        		.byte	102
 2393 0164 3C        		.byte	60
 2394 0165 9D        		.byte	-99
 2395 0166 B8        		.byte	-72
 2396 0167 4A        		.byte	74
 2397 0168 6E        		.byte	110
 2398 0169 A8        		.byte	-88
 2399 016a 3E        		.byte	62
 2400 016b 7D        		.byte	125
 2401 016c 66        		.byte	102
 2402 016d 6A        		.byte	106
 2403 016e F4        		.byte	-12
 2404 016f DD        		.byte	-35
 2405 0170 1D        		.byte	29
 2406 0171 79        		.byte	121
 2407 0172 D7        		.byte	-41
 2408 0173 31        		.byte	49
 2409 0174 D6        		.byte	-42
 2410 0175 8C        		.byte	-116
 2411 0176 EC        		.byte	-20
 2412 0177 9C        		.byte	-100
 2413 0178 7B        		.byte	123
 2414 0179 F2        		.byte	-14
 2415 017a 45        		.byte	69
 2416 017b 32        		.byte	50
 2417 017c C6        		.byte	-58
 2418 017d 02        		.byte	2
 2419 017e 63        		.byte	99
 2420 017f C4        		.byte	-60
 2421 0180 2D        		.byte	45
 2422 0181 40        		.byte	64
 2423 0182 99        		.byte	-103
 2424 0183 B1        		.byte	-79
 2425 0184 F6        		.byte	-10
 2426 0185 D5        		.byte	-43
 2427 0186 AB        		.byte	-85
 2428 0187 21        		.byte	33
 2429 0188 64        		.byte	100
 2430 0189 9D        		.byte	-99
 2431 018a 5B        		.byte	91
 2432 018b F0        		.byte	-16
 2433 018c 3D        		.byte	61
 2434 018d 02        		.byte	2
 2435 018e D7        		.byte	-41
 2436 018f EB        		.byte	-21
 2437 0190 3D        		.byte	61
 2438 0191 65        		.byte	101
 2439 0192 F7        		.byte	-9
 2440 0193 F8        		.byte	-8
 2441 0194 03        		.byte	3
 2442 0195 11        		.byte	17
 2443 0196 5D        		.byte	93
 2444 0197 CC        		.byte	-52
 2445 0198 97        		.byte	-105
 2446 0199 C1        		.byte	-63
 2447 019a F5        		.byte	-11
 2448 019b 24        		.byte	36
 2449 019c 2F        		.byte	47
 2450 019d BD        		.byte	-67
 2451 019e B9        		.byte	-71
 2452 019f 85        		.byte	-123
 2453 01a0 7D        		.byte	125
 2454 01a1 D9        		.byte	-39
 2455 01a2 DD        		.byte	-35
 2456 01a3 BB        		.byte	-69
 2457 01a4 52        		.byte	82
 2458 01a5 5F        		.byte	95
 2459 01a6 C9        		.byte	-55
 2460 01a7 96        		.byte	-106
 2461 01a8 96        		.byte	-106
 2462 01a9 6D        		.byte	109
 2463 01aa 65        		.byte	101
 2464 01ab C5        		.byte	-59
 2465 01ac 42        		.byte	66
 2466 01ad AB        		.byte	-85
 2467 01ae DE        		.byte	-34
 2468 01af 94        		.byte	-108
 2469 01b0 4E        		.byte	78
 2470 01b1 DD        		.byte	-35
 2471 01b2 DB        		.byte	-37
 2472 01b3 5C        		.byte	92
 2473 01b4 FB        		.byte	-5
 2474 01b5 88        		.byte	-120
 2475 01b6 3A        		.byte	58
 2476 01b7 83        		.byte	-125
 2477 01b8 CC        		.byte	-52
 2478 01b9 19        		.byte	25
 2479 01ba CA        		.byte	-54
 2480 01bb EF        		.byte	-17
 2481 01bc F5        		.byte	-11
 2482 01bd 60        		.byte	96
 2483 01be D3        		.byte	-45
 2484 01bf 1C        		.byte	28
 2485 01c0 C0        		.byte	-64
 2486 01c1 AF        		.byte	-81
 2487 01c2 37        		.byte	55
 2488 01c3 67        		.byte	103
 2489 01c4 A8        		.byte	-88
 2490 01c5 29        		.byte	41
 2491 01c6 AD        		.byte	-83
 2492 01c7 AF        		.byte	-81
 2493 01c8 77        		.byte	119
 2494 01c9 49        		.byte	73
 2495 01ca 47        		.byte	71
 2496 01cb 47        		.byte	71
 2497 01cc E6        		.byte	-26
 2498 01cd 23        		.byte	35
 2499 01ce 0E        		.byte	14
 2500 01cf 52        		.byte	82
 2501 01d0 7D        		.byte	125
 2502 01d1 15        		.byte	21
 2503 01d2 5A        		.byte	90
 2504 01d3 A6        		.byte	-90
 2505 01d4 8E        		.byte	-114
 2506 01d5 40        		.byte	64
 2507 01d6 88        		.byte	-120
 2508 01d7 5E        		.byte	94
 2509 01d8 02        		.byte	2
 2510 01d9 52        		.byte	82
 2511 01da BC        		.byte	-68
 2512 01db 15        		.byte	21
 2513 01dc 90        		.byte	-112
 2514 01dd 16        		.byte	22
 2515 01de 47        		.byte	71
 2516 01df D5        		.byte	-43
 2517 01e0 49        		.byte	73
 2518 01e1 B1        		.byte	-79
 2519 01e2 66        		.byte	102
 2520 01e3 3B        		.byte	59
 2521 01e4 C7        		.byte	-57
 2522 01e5 F9        		.byte	-7
 2523 01e6 49        		.byte	73
 2524 01e7 CE        		.byte	-50
 2525 01e8 C6        		.byte	-58
 2526 01e9 E4        		.byte	-28
 2527 01ea 47        		.byte	71
 2528 01eb C6        		.byte	-58
 2529 01ec 0B        		.byte	11
 2530 01ed 6F        		.byte	111
 2531 01ee 1E        		.byte	30
 2532 01ef 7A        		.byte	122
 2533 01f0 2E        		.byte	46
 2534 01f1 31        		.byte	49
 2535 01f2 E6        		.byte	-26
 2536 01f3 30        		.byte	48
 2537 01f4 F4        		.byte	-12
 2538 01f5 53        		.byte	83
 2539 01f6 01        		.byte	1
 2540 01f7 39        		.byte	57
 2541 01f8 3E        		.byte	62
 2542 01f9 F4        		.byte	-12
 2543 01fa 2D        		.byte	45
 2544 01fb C4        		.byte	-60
 2545 01fc D4        		.byte	-44
 2546 01fd 2F        		.byte	47
 2547 01fe 84        		.byte	-124
 2548 01ff AE        		.byte	-82
 2549 0200 5D        		.byte	93
 2550 0201 78        		.byte	120
 2551 0202 58        		.byte	88
 2552 0203 E3        		.byte	-29
 2553 0204 E5        		.byte	-27
 2554 0205 AC        		.byte	-84
 2555 0206 09        		.byte	9
 2556 0207 72        		.byte	114
 2557 0208 90        		.byte	-112
 2558 0209 24        		.byte	36
 2559 020a 30        		.byte	48
 2560 020b C7        		.byte	-57
 2561 020c 54        		.byte	84
 2562 020d 0E        		.byte	14
 2563 020e 3C        		.byte	60
 2564 020f 9B        		.byte	-101
 2565 0210 BF        		.byte	-65
 2566 0211 68        		.byte	104
 2567 0212 25        		.byte	37
 2568 0213 E5        		.byte	-27
 2569 0214 EC        		.byte	-20
 2570 0215 B7        		.byte	-73
 2571 0216 14        		.byte	20
 2572 0217 5E        		.byte	94
 2573 0218 67        		.byte	103
 2574 0219 A8        		.byte	-88
 2575 021a 85        		.byte	-123
 2576 021b BB        		.byte	-69
 2577 021c 80        		.byte	-128
 2578 021d 59        		.byte	89
 2579 021e 30        		.byte	48
 2580 021f C3        		.byte	-61
 2581 0220 E5        		.byte	-27
 2582 0221 29        		.byte	41
 2583 0222 D0        		.byte	-48
 2584 0223 57        		.byte	87
 2585 0224 14        		.byte	20
 2586 0225 2F        		.byte	47
 2587 0226 9B        		.byte	-101
 2588 0227 86        		.byte	-122
 2589 0228 E4        		.byte	-28
 2590 0229 0D        		.byte	13
 2591 022a 2D        		.byte	45
 2592 022b 5B        		.byte	91
 2593 022c 1F        		.byte	31
 2594 022d 23        		.byte	35
 2595 022e B0        		.byte	-80
 2596 022f 63        		.byte	99
 2597 0230 57        		.byte	87
 2598 0231 1A        		.byte	26
 2599 0232 DD        		.byte	-35
 2600 0233 1D        		.byte	29
 2601 0234 ED        		.byte	-19
 2602 0235 FA        		.byte	-6
 2603 0236 D3        		.byte	-45
 2604 0237 E5        		.byte	-27
 2605 0238 5B        		.byte	91
 2606 0239 06        		.byte	6
 2607 023a A6        		.byte	-90
 2608 023b 9E        		.byte	-98
 2609 023c F6        		.byte	-10
 2610 023d EC        		.byte	-20
 2611 023e D9        		.byte	-39
 2612 023f 26        		.byte	38
 2613 0240 2B        		.byte	43
 2614 0241 64        		.byte	100
 2615 0242 A9        		.byte	-87
 2616 0243 E6        		.byte	-26
 2617 0244 2F        		.byte	47
 2618 0245 BD        		.byte	-67
 2619 0246 8C        		.byte	-116
 2620 0247 5E        		.byte	94
 2621 0248 62        		.byte	98
 2622 0249 E4        		.byte	-28
 2623 024a 4A        		.byte	74
 2624 024b 3C        		.byte	60
 2625 024c 2B        		.byte	43
 2626 024d 56        		.byte	86
 2627 024e D9        		.byte	-39
 2628 024f 40        		.byte	64
 2629 0250 70        		.byte	112
 2630 0251 85        		.byte	-123
 2631 0252 1D        		.byte	29
 2632 0253 D8        		.byte	-40
 2633 0254 B3        		.byte	-77
 2634 0255 6C        		.byte	108
 2635 0256 DD        		.byte	-35
 2636 0257 A6        		.byte	-90
 2637 0258 94        		.byte	-108
 2638 0259 AB        		.byte	-85
 2639 025a 74        		.byte	116
 2640 025b 82        		.byte	-126
 2641 025c 2B        		.byte	43
 2642 025d BF        		.byte	-65
 2643 025e 75        		.byte	117
 2644 025f 9F        		.byte	-97
 2645 0260 BA        		.byte	-70
 2646 0261 2D        		.byte	45
 2647 0262 E4        		.byte	-28
 2648 0263 06        		.byte	6
 2649 0264 31        		.byte	49
 2650 0265 3D        		.byte	61
 2651 0266 98        		.byte	-104
 2652 0267 72        		.byte	114
 2653 0268 03        		.byte	3
 2654 0269 42        		.byte	66
 2655 026a DF        		.byte	-33
 2656 026b 25        		.byte	37
 2657 026c C1        		.byte	-63
 2658 026d A1        		.byte	-95
 2659 026e F6        		.byte	-10
 2660 026f AC        		.byte	-84
 2661 0270 A9        		.byte	-87
 2662 0271 39        		.byte	57
 2663 0272 85        		.byte	-123
 2664 0273 81        		.byte	-127
 2665 0274 F1        		.byte	-15
 2666 0275 A2        		.byte	-94
 2667 0276 D3        		.byte	-45
 2668 0277 03        		.byte	3
 2669 0278 B1        		.byte	-79
 2670 0279 C8        		.byte	-56
 2671 027a 52        		.byte	82
 2672 027b 89        		.byte	-119
 2673 027c 2F        		.byte	47
 2674 027d 7A        		.byte	122
 2675 027e B3        		.byte	-77
 2676 027f 53        		.byte	83
 2677 0280 4B        		.byte	75
 2678 0281 45        		.byte	69
 2679 0282 8A        		.byte	-118
 2680 0283 83        		.byte	-125
 2681 0284 42        		.byte	66
 2682 0285 F2        		.byte	-14
 2683 0286 10        		.byte	16
 2684 0287 AC        		.byte	-84
 2685 0288 9B        		.byte	-101
 2686 0289 90        		.byte	-112
 2687 028a 6D        		.byte	109
 2688 028b E1        		.byte	-31
 2689 028c E2        		.byte	-30
 2690 028d 37        		.byte	55
 2691 028e F6        		.byte	-10
 2692 028f FF        		.byte	-1
 2693 0290 BF        		.byte	-65
 2694 0291 93        		.byte	-109
 2695 0292 D0        		.byte	-48
 2696 0293 C2        		.byte	-62
 2697 0294 A6        		.byte	-90
 2698 0295 64        		.byte	100
 2699 0296 5C        		.byte	92
 2700 0297 87        		.byte	-121
 2701 0298 0D        		.byte	13
 2702 0299 3B        		.byte	59
 2703 029a E7        		.byte	-25
 2704 029b 33        		.byte	51
 2705 029c 65        		.byte	101
 2706 029d 8B        		.byte	-117
 2707 029e F6        		.byte	-10
 2708 029f 7D        		.byte	125
 2709 02a0 09        		.byte	9
 2710 02a1 90        		.byte	-112
 2711 02a2 52        		.byte	82
 2712 02a3 76        		.byte	118
 2713 02a4 8A        		.byte	-118
 2714 02a5 2D        		.byte	45
 2715 02a6 DD        		.byte	-35
 2716 02a7 7B        		.byte	123
 2717 02a8 1B        		.byte	27
 2718 02a9 C0        		.byte	-64
 2719 02aa F2        		.byte	-14
 2720 02ab 07        		.byte	7
 2721 02ac 14        		.byte	20
 2722 02ad 29        		.byte	41
 2723 02ae 73        		.byte	115
 2724 02af 50        		.byte	80
 2725 02b0 05        		.byte	5
 2726 02b1 D7        		.byte	-41
 2727 02b2 12        		.byte	18
 2728 02b3 21        		.byte	33
 2729 02b4 FF        		.byte	-1
 2730 02b5 CC        		.byte	-52
 2731 02b6 07        		.byte	7
 2732 02b7 55        		.byte	85
 2733 02b8 C9        		.byte	-55
 2734 02b9 59        		.byte	89
 2735 02ba 7A        		.byte	122
 2736 02bb 3F        		.byte	63
 2737 02bc 12        		.byte	18
 2738 02bd CF        		.byte	-49
 2739 02be 15        		.byte	21
 2740 02bf C9        		.byte	-55
 2741 02c0 6B        		.byte	107
 2742 02c1 D1        		.byte	-47
 2743 02c2 63        		.byte	99
 2744 02c3 D9        		.byte	-39
 2745 02c4 E2        		.byte	-30
 2746 02c5 12        		.byte	18
 2747 02c6 E3        		.byte	-29
 2748 02c7 AD        		.byte	-83
 2749 02c8 7A        		.byte	122
 2750 02c9 EA        		.byte	-22
 2751 02ca A7        		.byte	-89
 2752 02cb 89        		.byte	-119
 2753 02cc D8        		.byte	-40
 2754 02cd A6        		.byte	-90
 2755 02ce 6C        		.byte	108
 2756 02cf 1E        		.byte	30
 2757 02d0 F5        		.byte	-11
 2758 02d1 CD        		.byte	-51
 2759 02d2 BB        		.byte	-69
 2760 02d3 C0        		.byte	-64
 2761 02d4 50        		.byte	80
 2762 02d5 41        		.byte	65
 2763 02d6 45        		.byte	69
 2764 02d7 6A        		.byte	106
 2765 02d8 64        		.byte	100
 2766 02d9 C2        		.byte	-62
 2767 02da 36        		.byte	54
 2768 02db DC        		.byte	-36
 2769 02dc 67        		.byte	103
 2770 02dd 06        		.byte	6
 2771 02de 4D        		.byte	77
 2772 02df 6C        		.byte	108
 2773 02e0 42        		.byte	66
 2774 02e1 A1        		.byte	-95
 2775 02e2 E5        		.byte	-27
 2776 02e3 71        		.byte	113
 2777 02e4 35        		.byte	53
 2778 02e5 F2        		.byte	-14
 2779 02e6 42        		.byte	66
 2780 02e7 56        		.byte	86
 2781 02e8 BB        		.byte	-69
 2782 02e9 37        		.byte	55
 2783 02ea 51        		.byte	81
 2784 02eb F0        		.byte	-16
 2785 02ec D2        		.byte	-46
 2786 02ed A3        		.byte	-93
 2787 02ee 6F        		.byte	111
 2788 02ef FA        		.byte	-6
 2789 02f0 D2        		.byte	-46
 2790 02f1 EB        		.byte	-21
 2791 02f2 4F        		.byte	79
 2792 02f3 F0        		.byte	-16
 2793 02f4 CB        		.byte	-53
 2794 02f5 97        		.byte	-105
 2795 02f6 DD        		.byte	-35
 2796 02f7 22        		.byte	34
 2797 02f8 72        		.byte	114
 2798 02f9 71        		.byte	113
 2799 02fa 59        		.byte	89
 2800 02fb 47        		.byte	71
 2801 02fc FB        		.byte	-5
 2802 02fd BA        		.byte	-70
 2803 02fe 6E        		.byte	110
 2804 02ff 5B        		.byte	91
 2805 0300 A8        		.byte	-88
 2806 0301 70        		.byte	112
 2807 0302 32        		.byte	50
 2808 0303 0D        		.byte	13
 2809 0304 59        		.byte	89
 2810 0305 E0        		.byte	-32
 2811 0306 39        		.byte	57
 2812 0307 F6        		.byte	-10
 2813 0308 50        		.byte	80
 2814 0309 36        		.byte	54
 2815 030a F2        		.byte	-14
 2816 030b 43        		.byte	67
 2817 030c 5C        		.byte	92
 2818 030d F4        		.byte	-12
 2819 030e 89        		.byte	-119
 2820 030f C7        		.byte	-57
 2821 0310 1C        		.byte	28
 2822 0311 6C        		.byte	108
 2823 0312 7F        		.byte	127
 2824 0313 24        		.byte	36
 2825 0314 3E        		.byte	62
 2826 0315 B5        		.byte	-75
 2827 0316 C2        		.byte	-62
 2828 0317 DB        		.byte	-37
 2829 0318 1F        		.byte	31
 2830 0319 82        		.byte	-126
 2831 031a CE        		.byte	-50
 2832 031b 3B        		.byte	59
 2833 031c 8D        		.byte	-115
 2834 031d BC        		.byte	-68
 2835 031e 39        		.byte	57
 2836 031f DB        		.byte	-37
 2837 0320 AB        		.byte	-85
 2838 0321 70        		.byte	112
 2839 0322 83        		.byte	-125
 2840 0323 05        		.byte	5
 2841 0324 23        		.byte	35
 2842 0325 4B        		.byte	75
 2843 0326 59        		.byte	89
 2844 0327 CD        		.byte	-51
 2845 0328 2A        		.byte	42
 2846 0329 22        		.byte	34
 2847 032a 51        		.byte	81
 2848 032b 13        		.byte	19
 2849 032c 89        		.byte	-119
 2850 032d A6        		.byte	-90
 2851 032e 4D        		.byte	77
 2852 032f 91        		.byte	-111
 2853 0330 B9        		.byte	-71
 2854 0331 8E        		.byte	-114
 2855 0332 30        		.byte	48
 2856 0333 40        		.byte	64
 2857 0334 8C        		.byte	-116
 2858 0335 AC        		.byte	-84
 2859 0336 84        		.byte	-124
 2860 0337 D7        		.byte	-41
 2861 0338 9B        		.byte	-101
 2862 0339 A3        		.byte	-93
 2863 033a 6C        		.byte	108
 2864 033b 4B        		.byte	75
 2865 033c A2        		.byte	-94
 2866 033d 6A        		.byte	106
 2867 033e 8A        		.byte	-118
 2868 033f 25        		.byte	37
 2869 0340 2F        		.byte	47
 2870 0341 09        		.byte	9
 2871 0342 27        		.byte	39
 2872 0343 EB        		.byte	-21
 2873 0344 F7        		.byte	-9
 2874 0345 F7        		.byte	-9
 2875 0346 16        		.byte	22
 2876 0347 7D        		.byte	125
 2877 0348 4C        		.byte	76
 2878 0349 8B        		.byte	-117
 2879 034a 7E        		.byte	126
 2880 034b 17        		.byte	23
 2881 034c 7A        		.byte	122
 2882 034d 43        		.byte	67
 2883 034e 00        		.byte	0
 2884 034f 0C        		.byte	12
 2885 0350 80        		.byte	-128
 2886 0351 B0        		.byte	-80
 2887 0352 16        		.byte	22
 2888 0353 58        		.byte	88
 2889 0354 01        		.byte	1
 2890 0355 9C        		.byte	-100
 2891 0356 F8        		.byte	-8
 2892 0357 A6        		.byte	-90
 2893 0358 0E        		.byte	14
 2894 0359 64        		.byte	100
 2895 035a 5F        		.byte	95
 2896 035b BF        		.byte	-65
 2897 035c F1        		.byte	-15
 2898 035d C4        		.byte	-60
 2899 035e 6D        		.byte	109
 2900 035f 1B        		.byte	27
 2901 0360 47        		.byte	71
 2902 0361 2D        		.byte	45
 2903 0362 DE        		.byte	-34
 2904 0363 2A        		.byte	42
 2905 0364 7A        		.byte	122
 2906 0365 04        		.byte	4
 2907 0366 FE        		.byte	-2
 2908 0367 E9        		.byte	-23
 2909 0368 C2        		.byte	-62
 2910 0369 9E        		.byte	-98
 2911 036a A6        		.byte	-90
 2912 036b BF        		.byte	-65
 2913 036c 90        		.byte	-112
 2914 036d 74        		.byte	116
 2915 036e 72        		.byte	114
 2916 036f D6        		.byte	-42
 2917 0370 A9        		.byte	-87
 2918 0371 53        		.byte	83
 2919 0372 65        		.byte	101
 2920 0373 F4        		.byte	-12
 2921 0374 69        		.byte	105
 2922 0375 D5        		.byte	-43
 2923 0376 58        		.byte	88
 2924 0377 90        		.byte	-112
 2925 0378 A8        		.byte	-88
 2926 0379 8D        		.byte	-115
 2927 037a 3C        		.byte	60
 2928 037b 3A        		.byte	58
 2929 037c 86        		.byte	-122
 2930 037d 49        		.byte	73
 2931 037e 6F        		.byte	111
 2932 037f DF        		.byte	-33
 2933 0380 A7        		.byte	-89
 2934 0381 33        		.byte	51
 2935 0382 B1        		.byte	-79
 2936 0383 68        		.byte	104
 2937 0384 39        		.byte	57
 2938 0385 51        		.byte	81
 2939 0386 82        		.byte	-126
 2940 0387 DE        		.byte	-34
 2941 0388 F2        		.byte	-14
 2942 0389 69        		.byte	105
 2943 038a AC        		.byte	-84
 2944 038b 9B        		.byte	-101
 2945 038c 93        		.byte	-109
 2946 038d 38        		.byte	56
 2947 038e 50        		.byte	80
 2948 038f 5B        		.byte	91
 2949 0390 19        		.byte	25
 2950 0391 5B        		.byte	91
 2951 0392 C2        		.byte	-62
 2952 0393 14        		.byte	20
 2953 0394 9C        		.byte	-100
 2954 0395 18        		.byte	24
 2955 0396 0E        		.byte	14
 2956 0397 4C        		.byte	76
 2957 0398 2F        		.byte	47
 2958 0399 F1        		.byte	-15
 2959 039a FA        		.byte	-6
 2960 039b D4        		.byte	-44
 2961 039c B6        		.byte	-74
 2962 039d 5F        		.byte	95
 2963 039e B9        		.byte	-71
 2964 039f B8        		.byte	-72
 2965 03a0 47        		.byte	71
 2966 03a1 A4        		.byte	-92
 2967 03a2 EB        		.byte	-21
 2968 03a3 DD        		.byte	-35
 2969 03a4 CE        		.byte	-50
 2970 03a5 46        		.byte	70
 2971 03a6 8D        		.byte	-115
 2972 03a7 21        		.byte	33
 2973 03a8 88        		.byte	-120
 2974 03a9 C3        		.byte	-61
 2975 03aa A6        		.byte	-90
 2976 03ab AE        		.byte	-82
 2977 03ac 07        		.byte	7
 2978 03ad 4E        		.byte	78
 2979 03ae BF        		.byte	-65
 2980 03af B6        		.byte	-74
 2981 03b0 8C        		.byte	-116
 2982 03b1 3A        		.byte	58
 2983 03b2 14        		.byte	20
 2984 03b3 BD        		.byte	-67
 2985 03b4 99        		.byte	-103
 2986 03b5 A0        		.byte	-96
 2987 03b6 34        		.byte	52
 2988 03b7 49        		.byte	73
 2989 03b8 E2        		.byte	-30
 2990 03b9 AD        		.byte	-83
 2991 03ba 68        		.byte	104
 2992 03bb B0        		.byte	-80
 2993 03bc 45        		.byte	69
 2994 03bd CF        		.byte	-49
 2995 03be BC        		.byte	-68
 2996 03bf 27        		.byte	39
 2997 03c0 66        		.byte	102
 2998 03c1 CC        		.byte	-52
 2999 03c2 EB        		.byte	-21
 3000 03c3 B9        		.byte	-71
 3001 03c4 14        		.byte	20
 3002 03c5 3C        		.byte	60
 3003 03c6 15        		.byte	21
 3004 03c7 B9        		.byte	-71
 3005 03c8 53        		.byte	83
 3006 03c9 37        		.byte	55
 3007 03ca 26        		.byte	38
 3008 03cb 3A        		.byte	58
 3009 03cc 61        		.byte	97
 3010 03cd 4E        		.byte	78
 3011 03ce 1E        		.byte	30
 3012 03cf 2F        		.byte	47
 3013 03d0 1F        		.byte	31
 3014 03d1 1B        		.byte	27
 3015 03d2 33        		.byte	51
 3016 03d3 54        		.byte	84
 3017 03d4 87        		.byte	-121
 3018 03d5 A1        		.byte	-95
 3019 03d6 17        		.byte	23
 3020 03d7 8C        		.byte	-116
 3021 03d8 DF        		.byte	-33
 3022 03d9 AA        		.byte	-86
 3023 03da 51        		.byte	81
 3024 03db 79        		.byte	121
 3025 03dc 55        		.byte	85
 3026 03dd F2        		.byte	-14
 3027 03de A5        		.byte	-91
 3028 03df 35        		.byte	53
 3029 03e0 38        		.byte	56
 3030 03e1 63        		.byte	99
 3031 03e2 87        		.byte	-121
 3032 03e3 2B        		.byte	43
 3033 03e4 93        		.byte	-109
 3034 03e5 04        		.byte	4
 3035 03e6 31        		.byte	49
 3036 03e7 54        		.byte	84
 3037 03e8 01        		.byte	1
 3038 03e9 04        		.byte	4
 3039 03ea 28        		.byte	40
 3040 03eb 2F        		.byte	47
 3041 03ec 0C        		.byte	12
 3042 03ed 2A        		.byte	42
 3043 03ee 34        		.byte	52
 3044 03ef 6C        		.byte	108
 3045 03f0 1D        		.byte	29
 3046 03f1 39        		.byte	57
 3047 03f2 3E        		.byte	62
 3048 03f3 53        		.byte	83
 3049 03f4 86        		.byte	-122
 3050 03f5 F2        		.byte	-14
 3051 03f6 B4        		.byte	-76
 3052 03f7 0E        		.byte	14
 3053 03f8 48        		.byte	72
 3054 03f9 1C        		.byte	28
 3055 03fa CA        		.byte	-54
 3056 03fb B4        		.byte	-76
 3057 03fc 57        		.byte	87
 3058 03fd 1D        		.byte	29
 3059 03fe 4C        		.byte	76
 3060 03ff 8D        		.byte	-115
 3061 0400 96        		.byte	-106
 3062 0401 6C        		.byte	108
 3063 0402 2C        		.byte	44
 3064 0403 99        		.byte	-103
 3065 0404 1E        		.byte	30
 3066 0405 E3        		.byte	-29
 3067 0406 73        		.byte	115
 3068 0407 DA        		.byte	-38
 3069 0408 C1        		.byte	-63
 3070 0409 7D        		.byte	125
 3071 040a 11        		.byte	17
 3072 040b 79        		.byte	121
 3073 040c 65        		.byte	101
 3074 040d E1        		.byte	-31
 3075 040e E2        		.byte	-30
 3076 040f EF        		.byte	-17
 3077 0410 A5        		.byte	-91
 3078 0411 B8        		.byte	-72
 3079 0412 7F        		.byte	127
 3080 0413 A2        		.byte	-94
 3081 0414 68        		.byte	104
 3082 0415 0F        		.byte	15
 3083 0416 8A        		.byte	-118
 3084 0417 59        		.byte	89
 3085 0418 BE        		.byte	-66
 3086 0419 F2        		.byte	-14
 3087 041a EE        		.byte	-18
 3088 041b 0D        		.byte	13
 3089 041c 8F        		.byte	-113
 3090 041d 70        		.byte	112
 3091 041e 0A        		.byte	10
 3092 041f 72        		.byte	114
 3093 0420 E7        		.byte	-25
 3094 0421 71        		.byte	113
 3095 0422 E9        		.byte	-23
 3096 0423 82        		.byte	-126
 3097 0424 08        		.byte	8
 3098 0425 78        		.byte	120
 3099 0426 A6        		.byte	-90
 3100 0427 6C        		.byte	108
 3101 0428 3B        		.byte	59
 3102 0429 FF        		.byte	-1
 3103 042a 8C        		.byte	-116
 3104 042b 3A        		.byte	58
 3105 042c 02        		.byte	2
 3106 042d FC        		.byte	-4
 3107 042e CB        		.byte	-53
 3108 042f 4F        		.byte	79
 3109 0430 94        		.byte	-108
 3110 0431 9A        		.byte	-102
 3111 0432 8F        		.byte	-113
 3112 0433 77        		.byte	119
 3113 0434 1F        		.byte	31
 3114 0435 65        		.byte	101
 3115 0436 26        		.byte	38
 3116 0437 27        		.byte	39
 3117 0438 AE        		.byte	-82
 3118 0439 E2        		.byte	-30
 3119 043a 6B        		.byte	107
 3120 043b 50        		.byte	80
 3121 043c 7A        		.byte	122
 3122 043d B8        		.byte	-72
 3123 043e 28        		.byte	40
 3124 043f F7        		.byte	-9
 3125 0440 4B        		.byte	75
 3126 0441 7E        		.byte	126
 3127 0442 5A        		.byte	90
 3128 0443 6E        		.byte	110
 3129 0444 D9        		.byte	-39
 3130 0445 3D        		.byte	61
 3131 0446 07        		.byte	7
 3132 0447 80        		.byte	-128
 3133 0448 20        		.byte	32
 3134 0449 66        		.byte	102
 3135 044a 0A        		.byte	10
 3136 044b 34        		.byte	52
 3137 044c CA        		.byte	-54
 3138 044d 66        		.byte	102
 3139 044e CD        		.byte	-51
 3140 044f D2        		.byte	-46
 3141 0450 B9        		.byte	-71
 3142 0451 54        		.byte	84
 3143 0452 EA        		.byte	-22
 3144 0453 26        		.byte	38
 3145 0454 E2        		.byte	-30
 3146 0455 AD        		.byte	-83
 3147 0456 5B        		.byte	91
 3148 0457 91        		.byte	-111
 3149 0458 61        		.byte	97
 3150 0459 11        		.byte	17
 3151 045a 26        		.byte	38
 3152 045b DB        		.byte	-37
 3153 045c DD        		.byte	-35
 3154 045d 7B        		.byte	123
 3155 045e 05        		.byte	5
 3156 045f 5E        		.byte	94
 3157 0460 FA        		.byte	-6
 3158 0461 2E        		.byte	46
 3159 0462 DB        		.byte	-37
 3160 0463 96        		.byte	-106
 3161 0464 CF        		.byte	-49
 3162 0465 57        		.byte	87
 3163 0466 DC        		.byte	-36
 3164 0467 DA        		.byte	-38
 3165 0468 C3        		.byte	-61
 3166 0469 CA        		.byte	-54
 3167 046a 00        		.byte	0
 3168 046b 01        		.byte	1
 3169 046c 5E        		.byte	94
 3170 046d C9        		.byte	-55
 3171 046e 25        		.byte	37
 3172 046f E2        		.byte	-30
 3173 0470 B3        		.byte	-77
 3174 0471 46        		.byte	70
 3175 0472 30        		.byte	48
 3176 0473 76        		.byte	118
 3177 0474 3A        		.byte	58
 3178 0475 BF        		.byte	-65
 3179 0476 BC        		.byte	-68
 3180 0477 7D        		.byte	125
 3181 0478 2D        		.byte	45
 3182 0479 02        		.byte	2
 3183 047a E1        		.byte	-31
 3184 047b 41        		.byte	65
 3185 047c B6        		.byte	-74
 3186 047d AA        		.byte	-86
 3187 047e 8E        		.byte	-114
 3188 047f 71        		.byte	113
 3189 0480 58        		.byte	88
 3190 0481 11        		.byte	17
 3191 0482 51        		.byte	81
 3192 0483 D7        		.byte	-41
 3193 0484 09        		.byte	9
 3194 0485 29        		.byte	41
 3195 0486 D4        		.byte	-44
 3196 0487 DF        		.byte	-33
 3197 0488 E3        		.byte	-29
 3198 0489 E6        		.byte	-26
 3199 048a 04        		.byte	4
 3200 048b 34        		.byte	52
 3201 048c 6F        		.byte	111
 3202 048d 7D        		.byte	125
 3203 048e 29        		.byte	41
 3204 048f 18        		.byte	24
 3205 0490 13        		.byte	19
 3206 0491 06        		.byte	6
 3207 0492 EB        		.byte	-21
 3208 0493 B4        		.byte	-76
 3209 0494 5A        		.byte	90
 3210 0495 B5        		.byte	-75
 3211 0496 9C        		.byte	-100
 3212 0497 7E        		.byte	126
 3213 0498 22        		.byte	34
 3214 0499 45        		.byte	69
 3215 049a 23        		.byte	35
 3216 049b 7A        		.byte	122
 3217 049c 02        		.byte	2
 3218 049d E6        		.byte	-26
 3219 049e 27        		.byte	39
 3220 049f 6C        		.byte	108
 3221 04a0 D9        		.byte	-39
 3222 04a1 60        		.byte	96
 3223 04a2 48        		.byte	72
 3224 04a3 C3        		.byte	-61
 3225 04a4 F6        		.byte	-10
 3226 04a5 BB        		.byte	-69
 3227 04a6 56        		.byte	86
 3228 04a7 B2        		.byte	-78
 3229 04a8 36        		.byte	54
 3230 04a9 5E        		.byte	94
 3231 04aa BD        		.byte	-67
 3232 04ab 7E        		.byte	126
 3233 04ac D8        		.byte	-40
 3234 04ad A3        		.byte	-93
 3235 04ae 0D        		.byte	13
 3236 04af FD        		.byte	-3
 3237 04b0 EA        		.byte	-22
 3238 04b1 4F        		.byte	79
 3239 04b2 7D        		.byte	125
 3240 04b3 E9        		.byte	-23
 3241 04b4 55        		.byte	85
 3242 04b5 69        		.byte	105
 3243 04b6 5C        		.byte	92
 3244 04b7 B2        		.byte	-78
 3245 04b8 44        		.byte	68
 3246 04b9 4D        		.byte	77
 3247 04ba BC        		.byte	-68
 3248 04bb EE        		.byte	-18
 3249 04bc 2D        		.byte	45
 3250 04bd 5B        		.byte	91
 3251 04be 96        		.byte	-106
 3252 04bf 28        		.byte	40
 3253 04c0 95        		.byte	-107
 3254 04c1 9D        		.byte	-99
 3255 04c2 A9        		.byte	-87
 3256 04c3 37        		.byte	55
 3257 04c4 53        		.byte	83
 3258 04c5 CE        		.byte	-50
 3259 04c6 2F        		.byte	47
 3260 04c7 65        		.byte	101
 3261 04c8 D8        		.byte	-40
 3262 04c9 5A        		.byte	90
 3263 04ca 01        		.byte	1
 3264 04cb D8        		.byte	-40
 3265 04cc 11        		.byte	17
 3266 04cd F6        		.byte	-10
 3267 04ce CC        		.byte	-52
 3268 04cf 69        		.byte	105
 3269 04d0 20        		.byte	32
 3270 04d1 57        		.byte	87
 3271 04d2 2F        		.byte	47
 3272 04d3 1D        		.byte	29
 3273 04d4 0F        		.byte	15
 3274 04d5 E2        		.byte	-30
 3275 04d6 8C        		.byte	-116
 3276 04d7 C7        		.byte	-57
 3277 04d8 57        		.byte	87
 3278 04d9 04        		.byte	4
 3279 04da 7F        		.byte	127
 3280 04db FE        		.byte	-2
 3281 04dc 3E        		.byte	62
 3282 04dd 5C        		.byte	92
 3283 04de 57        		.byte	87
 3284 04df 1E        		.byte	30
 3285 04e0 81        		.byte	-127
 3286 04e1 BA        		.byte	-70
 3287 04e2 5B        		.byte	91
 3288 04e3 39        		.byte	57
 3289 04e4 E9        		.byte	-23
 3290 04e5 2E        		.byte	46
 3291 04e6 4E        		.byte	78
 3292 04e7 8F        		.byte	-113
 3293 04e8 1F        		.byte	31
 3294 04e9 21        		.byte	33
 3295 04ea 33        		.byte	51
 3296 04eb 91        		.byte	-111
 3297 04ec 79        		.byte	121
 3298 04ed C0        		.byte	-64
 3299 04ee A0        		.byte	-96
 3300 04ef 3F        		.byte	63
 3301 04f0 2C        		.byte	44
 3302 04f1 9F        		.byte	-97
 3303 04f2 F4        		.byte	-12
 3304 04f3 FE        		.byte	-2
 3305 04f4 B7        		.byte	-73
 3306 04f5 AC        		.byte	-84
 3307 04f6 6E        		.byte	110
 3308 04f7 D3        		.byte	-45
 3309 04f8 86        		.byte	-122
 3310 04f9 2E        		.byte	46
 3311 04fa 2F        		.byte	47
 3312 04fb 2C        		.byte	44
 3313 04fc 79        		.byte	121
 3314 04fd 4F        		.byte	79
 3315 04fe DC        		.byte	-36
 3316 04ff 2B        		.byte	43
 3317 0500 56        		.byte	86
 3318 0501 1E        		.byte	30
 3319 0502 70        		.byte	112
 3320 0503 50        		.byte	80
 3321 0504 F1        		.byte	-15
 3322 0505 58        		.byte	88
 3323 0506 52        		.byte	82
 3324 0507 B8        		.byte	-72
 3325 0508 7D        		.byte	125
 3326 0509 B2        		.byte	-78
 3327 050a 9A        		.byte	-102
 3328 050b 86        		.byte	-122
 3329 050c 01        		.byte	1
 3330 050d 31        		.byte	49
 3331 050e E4        		.byte	-28
 3332 050f 16        		.byte	22
 3333 0510 0C        		.byte	12
 3334 0511 EC        		.byte	-20
 3335 0512 5E        		.byte	94
 3336 0513 0B        		.byte	11
 3337 0514 A6        		.byte	-90
 3338 0515 5E        		.byte	94
 3339 0516 6D        		.byte	109
 3340 0517 37        		.byte	55
 3341 0518 EE        		.byte	-18
 3342 0519 FC        		.byte	-4
 3343 051a 18        		.byte	24
 3344 051b 9E        		.byte	-98
 3345 051c 5E        		.byte	94
 3346 051d B8        		.byte	-72
 3347 051e 7E        		.byte	126
 3348 051f CA        		.byte	-54
 3349 0520 68        		.byte	104
 3350 0521 51        		.byte	81
 3351 0522 8C        		.byte	-116
 3352 0523 23        		.byte	35
 3353 0524 7E        		.byte	126
 3354 0525 03        		.byte	3
 3355 0526 CF        		.byte	-49
 3356 0527 9E        		.byte	-98
 3357 0528 AF        		.byte	-81
 3358 0529 53        		.byte	83
 3359 052a 36        		.byte	54
 3360 052b F9        		.byte	-7
 3361 052c B3        		.byte	-77
 3362 052d AB        		.byte	-85
 3363 052e 01        		.byte	1
 3364 052f DE        		.byte	-34
 3365 0530 25        		.byte	37
 3366 0531 65        		.byte	101
 3367 0532 55        		.byte	85
 3368 0533 F0        		.byte	-16
 3369 0534 7D        		.byte	125
 3370 0535 D3        		.byte	-45
 3371 0536 97        		.byte	-105
 3372 0537 2F        		.byte	47
 3373 0538 59        		.byte	89
 3374 0539 B9        		.byte	-71
 3375 053a D6        		.byte	-42
 3376 053b A1        		.byte	-95
 3377 053c D6        		.byte	-42
 3378 053d 6D        		.byte	109
 3379 053e A4        		.byte	-92
 3380 053f 18        		.byte	24
 3381 0540 C7        		.byte	-57
 3382 0541 15        		.byte	21
 3383 0542 F9        		.byte	-7
 3384 0543 B3        		.byte	-77
 3385 0544 78        		.byte	120
 3386 0545 A2        		.byte	-94
 3387 0546 62        		.byte	98
 3388 0547 0E        		.byte	14
 3389 0548 0A        		.byte	10
 3390 0549 1F        		.byte	31
 3391 054a CD        		.byte	-51
 3392 054b AD        		.byte	-83
 3393 054c 37        		.byte	55
 3394 054d B4        		.byte	-76
 3395 054e 28        		.byte	40
 3396 054f A2        		.byte	-94
 3397 0550 18        		.byte	24
 3398 0551 A3        		.byte	-93
 3399 0552 46        		.byte	70
 3400 0553 10        		.byte	16
 3401 0554 93        		.byte	-109
 3402 0555 D1        		.byte	-47
 3403 0556 18        		.byte	24
 3404 0557 33        		.byte	51
 3405 0558 47        		.byte	71
 3406 0559 88        		.byte	-120
 3407 055a BE        		.byte	-66
 3408 055b 17        		.byte	23
 3409 055c EE        		.byte	-18
 3410 055d 21        		.byte	33
 3411 055e 10        		.byte	16
 3412 055f 47        		.byte	71
 3413 0560 15        		.byte	21
 3414 0561 6A        		.byte	106
 3415 0562 C0        		.byte	-64
 3416 0563 A5        		.byte	-91
 3417 0564 1C        		.byte	28
 3418 0565 0C        		.byte	12
 3419 0566 4D        		.byte	77
 3420 0567 82        		.byte	-126
 3421 0568 09        		.byte	9
 3422 0569 33        		.byte	51
 3423 056a C3        		.byte	-61
 3424 056b 05        		.byte	5
 3425 056c B7        		.byte	-73
 3426 056d 50        		.byte	80
 3427 056e 84        		.byte	-124
 3428 056f BB        		.byte	-69
 3429 0570 36        		.byte	54
 3430 0571 EC        		.byte	-20
 3431 0572 FC        		.byte	-4
 3432 0573 14        		.byte	20
 3433 0574 E9        		.byte	-23
 3434 0575 18        		.byte	24
 3435 0576 BD        		.byte	-67
 3436 0577 69        		.byte	105
 3437 0578 F3        		.byte	-13
 3438 0579 60        		.byte	96
 3439 057a C7        		.byte	-57
 3440 057b 52        		.byte	82
 3441 057c 7B        		.byte	123
 3442 057d F3        		.byte	-13
 3443 057e 15        		.byte	21
 3444 057f EA        		.byte	-22
 3445 0580 37        		.byte	55
 3446 0581 2F        		.byte	47
 3447 0582 D3        		.byte	-45
 3448 0583 67        		.byte	103
 3449 0584 04        		.byte	4
 3450 0585 A4        		.byte	-92
 3451 0586 29        		.byte	41
 3452 0587 56        		.byte	86
 3453 0588 A5        		.byte	-91
 3454 0589 E4        		.byte	-28
 3455 058a 5A        		.byte	90
 3456 058b 86        		.byte	-122
 3457 058c C1        		.byte	-63
 3458 058d 25        		.byte	37
 3459 058e 94        		.byte	-108
 3460 058f E9        		.byte	-23
 3461 0590 25        		.byte	37
 3462 0591 EB        		.byte	-21
 3463 0592 80        		.byte	-128
 3464 0593 B0        		.byte	-80
 3465 0594 13        		.byte	19
 3466 0595 D6        		.byte	-42
 3467 0596 03        		.byte	3
 3468 0597 E3        		.byte	-29
 3469 0598 E6        		.byte	-26
 3470 0599 4D        		.byte	77
 3471 059a 55        		.byte	85
 3472 059b C8        		.byte	-56
 3473 059c D4        		.byte	-44
 3474 059d E0        		.byte	-32
 3475 059e E9        		.byte	-23
 3476 059f A8        		.byte	-88
 3477 05a0 59        		.byte	89
 3478 05a1 94        		.byte	-108
 3479 05a2 C6        		.byte	-58
 3480 05a3 53        		.byte	83
 3481 05a4 5A        		.byte	90
 3482 05a5 CC        		.byte	-52
 3483 05a6 E6        		.byte	-26
 3484 05a7 CC        		.byte	-52
 3485 05a8 CA        		.byte	-54
 3486 05a9 67        		.byte	103
 3487 05aa 16        		.byte	22
 3488 05ab 7F        		.byte	127
 3489 05ac 6E        		.byte	110
 3490 05ad D8        		.byte	-40
 3491 05ae 29        		.byte	41
 3492 05af 43        		.byte	67
 3493 05b0 36        		.byte	54
 3494 05b1 C1        		.byte	-63
 3495 05b2 39        		.byte	57
 3496 05b3 EF        		.byte	-17
 3497 05b4 B9        		.byte	-71
 3498 05b5 76        		.byte	118
 3499 05b6 3A        		.byte	58
 3500 05b7 85        		.byte	-123
 3501 05b8 81        		.byte	-127
 3502 05b9 1D        		.byte	29
 3503 05ba EE        		.byte	-18
 3504 05bb ED        		.byte	-19
 3505 05bc 3C        		.byte	60
 3506 05bd A9        		.byte	-87
 3507 05be AA        		.byte	-86
 3508 05bf 24        		.byte	36
 3509 05c0 12        		.byte	18
 3510 05c1 44        		.byte	68
 3511 05c2 3D        		.byte	61
 3512 05c3 5B        		.byte	91
 3513 05c4 04        		.byte	4
 3514 05c5 98        		.byte	-104
 3515 05c6 8E        		.byte	-114
 3516 05c7 C7        		.byte	-57
 3517 05c8 A9        		.byte	-87
 3518 05c9 CE        		.byte	-50
 3519 05ca BF        		.byte	-65
 3520 05cb 08        		.byte	8
 3521 05cc 10        		.byte	16
 3522 05cd A1        		.byte	-95
 3523 05ce D2        		.byte	-46
 3524 05cf C7        		.byte	-57
 3525 05d0 DD        		.byte	-35
 3526 05d1 23        		.byte	35
 3527 05d2 98        		.byte	-104
 3528 05d3 63        		.byte	99
 3529 05d4 D4        		.byte	-44
 3530 05d5 8A        		.byte	-118
 3531 05d6 E0        		.byte	-32
 3532 05d7 31        		.byte	49
 3533 05d8 AF        		.byte	-81
 3534 05d9 80        		.byte	-128
 3535 05da 00        		.byte	0
 3536 05db F1        		.byte	-15
 3537 05dc 01        		.byte	1
 3538 05dd 52        		.byte	82
 3539 05de BA        		.byte	-70
 3540 05df 54        		.byte	84
 3541 05e0 9E        		.byte	-98
 3542 05e1 79        		.byte	121
 3543 05e2 F1        		.byte	-15
 3544 05e3 65        		.byte	101
 3545 05e4 76        		.byte	118
 3546 05e5 05        		.byte	5
 3547 05e6 BE        		.byte	-66
 3548 05e7 FE        		.byte	-2
 3549 05e8 2A        		.byte	42
 3550 05e9 81        		.byte	-127
 3551 05ea 86        		.byte	-122
 3552 05eb 1E        		.byte	30
 3553 05ec BB        		.byte	-69
 3554 05ed 3D        		.byte	61
 3555 05ee 4D        		.byte	77
 3556 05ef 91        		.byte	-111
 3557 05f0 2E        		.byte	46
 3558 05f1 76        		.byte	118
 3559 05f2 2A        		.byte	42
 3560 05f3 9F        		.byte	-97
 3561 05f4 BA        		.byte	-70
 3562 05f5 EB        		.byte	-21
 3563 05f6 AC        		.byte	-84
 3564 05f7 73        		.byte	115
 3565 05f8 4C        		.byte	76
 3566 05f9 26        		.byte	38
 3567 05fa 16        		.byte	22
 3568 05fb D1        		.byte	-47
 3569 05fc CE        		.byte	-50
 3570 05fd 53        		.byte	83
 3571 05fe C3        		.byte	-61
 3572 05ff 0D        		.byte	13
 3573 0600 9D        		.byte	-99
 3574 0601 C1        		.byte	-63
 3575 0602 E0        		.byte	-32
 3576 0603 0A        		.byte	10
 3577 0604 D3        		.byte	-45
 3578 0605 C3        		.byte	-61
 3579 0606 0C        		.byte	12
 3580 0607 AE        		.byte	-82
 3581 0608 CA        		.byte	-54
 3582 0609 02        		.byte	2
 3583 060a D5        		.byte	-43
 3584 060b 9F        		.byte	-97
 3585 060c 12        		.byte	18
 3586 060d E5        		.byte	-27
 3587 060e 4D        		.byte	77
 3588 060f 28        		.byte	40
 3589 0610 D7        		.byte	-41
 3590 0611 45        		.byte	69
 3591 0612 8A        		.byte	-118
 3592 0613 2D        		.byte	45
 3593 0614 CB        		.byte	-53
 3594 0615 5C        		.byte	92
 3595 0616 05        		.byte	5
 3596 0617 B7        		.byte	-73
 3597 0618 63        		.byte	99
 3598 0619 4B        		.byte	75
 3599 061a 24        		.byte	36
 3600 061b 8B        		.byte	-117
 3601 061c E2        		.byte	-30
 3602 061d 31        		.byte	49
 3603 061e AD        		.byte	-83
 3604 061f 1D        		.byte	29
 3605 0620 CF        		.byte	-49
 3606 0621 66        		.byte	102
 3607 0622 CD        		.byte	-51
 3608 0623 7C        		.byte	124
 3609 0624 7B        		.byte	123
 3610 0625 6A        		.byte	106
 3611 0626 38        		.byte	56
 3612 0627 50        		.byte	80
 3613 0628 5A        		.byte	90
 3614 0629 6C        		.byte	108
 3615 062a 59        		.byte	89
 3616 062b 29        		.byte	41
 3617 062c BE        		.byte	-66
 3618 062d 20        		.byte	32
 3619 062e 6C        		.byte	108
 3620 062f F8        		.byte	-8
 3621 0630 1C        		.byte	28
 3622 0631 ED        		.byte	-19
 3623 0632 67        		.byte	103
 3624 0633 47        		.byte	71
 3625 0634 8E        		.byte	-114
 3626 0635 CA        		.byte	-54
 3627 0636 D7        		.byte	-41
 3628 0637 6D        		.byte	109
 3629 0638 10        		.byte	16
 3630 0639 A4        		.byte	-92
 3631 063a 2C        		.byte	44
 3632 063b AD        		.byte	-83
 3633 063c 6B        		.byte	107
 3634 063d 7B        		.byte	123
 3635 063e CF        		.byte	-49
 3636 063f DD        		.byte	-35
 3637 0640 79        		.byte	121
 3638 0641 FB        		.byte	-5
 3639 0642 54        		.byte	84
 3640 0643 B0        		.byte	-80
 3641 0644 40        		.byte	64
 3642 0645 7D        		.byte	125
 3643 0646 CC        		.byte	-52
 3644 0647 38        		.byte	56
 3645 0648 07        		.byte	7
 3646 0649 2E        		.byte	46
 3647 064a 27        		.byte	39
 3648 064b 55        		.byte	85
 3649 064c 14        		.byte	20
 3650 064d 00        		.byte	0
 3651 064e 01        		.byte	1
 3652 064f DA        		.byte	-38
 3653 0650 6A        		.byte	106
 3654 0651 69        		.byte	105
 3655 0652 7A        		.byte	122
 3656 0653 15        		.byte	21
 3657 0654 BC        		.byte	-68
 3658 0655 7B        		.byte	123
 3659 0656 35        		.byte	53
 3660 0657 81        		.byte	-127
 3661 0658 86        		.byte	-122
 3662 0659 E8        		.byte	-24
 3663 065a 25        		.byte	37
 3664 065b 9A        		.byte	-102
 3665 065c 87        		.byte	-121
 3666 065d 68        		.byte	104
 3667 065e F2        		.byte	-14
 3668 065f 06        		.byte	6
 3669 0660 C5        		.byte	-59
 3670 0661 09        		.byte	9
 3671 0662 0A        		.byte	10
 3672 0663 34        		.byte	52
 3673 0664 75        		.byte	117
 3674 0665 BF        		.byte	-65
 3675 0666 FF        		.byte	-1
 3676 0667 EA        		.byte	-22
 3677 0668 D5        		.byte	-43
 3678 0669 B1        		.byte	-79
 3679 066a 5B        		.byte	91
 3680 066b 01        		.byte	1
 3681 066c 03        		.byte	3
 3682 066d D3        		.byte	-45
 3683 066e 38        		.byte	56
 3684 066f 9E        		.byte	-98
 3685 0670 24        		.byte	36
 3686 0671 EE        		.byte	-18
 3687 0672 C5        		.byte	-59
 3688 0673 83        		.byte	-125
 3689 0674 A0        		.byte	-96
 3690 0675 5A        		.byte	90
 3691 0676 1D        		.byte	29
 3692 0677 15        		.byte	21
 3693 0678 94        		.byte	-108
 3694 0679 78        		.byte	120
 3695 067a 50        		.byte	80
 3696 067b 91        		.byte	-111
 3697 067c 23        		.byte	35
 3698 067d 10        		.byte	16
 3699 067e E1        		.byte	-31
 3700 067f 79        		.byte	121
 3701 0680 49        		.byte	73
 3702 0681 2F        		.byte	47
 3703 0682 B2        		.byte	-78
 3704 0683 25        		.byte	37
 3705 0684 97        		.byte	-105
 3706 0685 FA        		.byte	-6
 3707 0686 29        		.byte	41
 3708 0687 8F        		.byte	-113
 3709 0688 14        		.byte	20
 3710 0689 2A        		.byte	42
 3711 068a 55        		.byte	85
 3712 068b 66        		.byte	102
 3713 068c 3A        		.byte	58
 3714 068d 72        		.byte	114
 3715 068e CE        		.byte	-50
 3716 068f 0D        		.byte	13
 3717 0690 5A        		.byte	90
 3718 0691 C3        		.byte	-61
 3719 0692 87        		.byte	-121
 3720 0693 D3        		.byte	-45
 3721 0694 93        		.byte	-109
 3722 0695 41        		.byte	65
 3723 0696 F8        		.byte	-8
 3724 0697 02        		.byte	2
 3725 0698 05        		.byte	5
 3726 0699 27        		.byte	39
 3727 069a D9        		.byte	-39
 3728 069b A4        		.byte	-92
 3729 069c 9C        		.byte	-100
 3730 069d D7        		.byte	-41
 3731 069e EE        		.byte	-18
 3732 069f FF        		.byte	-1
 3733 06a0 D1        		.byte	-47
 3734 06a1 3D        		.byte	61
 3735 06a2 CB        		.byte	-53
 3736 06a3 77        		.byte	119
 3737 06a4 DD        		.byte	-35
 3738 06a5 9B        		.byte	-101
 3739 06a6 37        		.byte	55
 3740 06a7 B4        		.byte	-76
 3741 06a8 29        		.byte	41
 3742 06a9 8F        		.byte	-113
 3743 06aa FB        		.byte	-5
 3744 06ab E5        		.byte	-27
 3745 06ac EA        		.byte	-22
 3746 06ad 18        		.byte	24
 3747 06ae E7        		.byte	-25
 3748 06af 39        		.byte	57
 3749 06b0 A6        		.byte	-90
 3750 06b1 E3        		.byte	-29
 3751 06b2 84        		.byte	-124
 3752 06b3 B8        		.byte	-72
 3753 06b4 E8        		.byte	-24
 3754 06b5 1A        		.byte	26
 3755 06b6 B8        		.byte	-72
 3756 06b7 CE        		.byte	-50
 3757 06b8 38        		.byte	56
 3758 06b9 AC        		.byte	-84
 3759 06ba CC        		.byte	-52
 3760 06bb 7D        		.byte	125
 3761 06bc DA        		.byte	-38
 3762 06bd 75        		.byte	117
 3763 06be 44        		.byte	68
 3764 06bf 8B        		.byte	-117
 3765 06c0 33        		.byte	51
 3766 06c1 0F        		.byte	15
 3767 06c2 A7        		.byte	-89
 3768 06c3 75        		.byte	117
 3769 06c4 82        		.byte	-126
 3770 06c5 43        		.byte	67
 3771 06c6 F9        		.byte	-7
 3772 06c7 A6        		.byte	-90
 3773 06c8 EB        		.byte	-21
 3774 06c9 F4        		.byte	-12
 3775 06ca 13        		.byte	19
 3776 06cb 06        		.byte	6
 3777 06cc 30        		.byte	48
 3778 06cd A4        		.byte	-92
 3779 06ce BA        		.byte	-70
 3780 06cf 54        		.byte	84
 3781 06d0 45        		.byte	69
 3782 06d1 9D        		.byte	-99
 3783 06d2 2C        		.byte	44
 3784 06d3 AD        		.byte	-83
 3785 06d4 D4        		.byte	-44
 3786 06d5 FA        		.byte	-6
 3787 06d6 05        		.byte	5
 3788 06d7 B7        		.byte	-73
 3789 06d8 4E        		.byte	78
 3790 06d9 9D        		.byte	-99
 3791 06da C9        		.byte	-55
 3792 06db 1A        		.byte	26
 3793 06dc 27        		.byte	39
 3794 06dd 1E        		.byte	30
 3795 06de A8        		.byte	-88
 3796 06df 9C        		.byte	-100
 3797 06e0 A7        		.byte	-89
 3798 06e1 8B        		.byte	-117
 3799 06e2 AB        		.byte	-85
 3800 06e3 C2        		.byte	-62
 3801 06e4 80        		.byte	-128
 3802 06e5 20        		.byte	32
 3803 06e6 C1        		.byte	-63
 3804 06e7 4D        		.byte	77
 3805 06e8 F8        		.byte	-8
 3806 06e9 F4        		.byte	-12
 3807 06ea 81        		.byte	-127
 3808 06eb AB        		.byte	-85
 3809 06ec 4D        		.byte	77
 3810 06ed B2        		.byte	-78
 3811 06ee C2        		.byte	-62
 3812 06ef EB        		.byte	-21
 3813 06f0 A2        		.byte	-94
 3814 06f1 C2        		.byte	-62
 3815 06f2 C6        		.byte	-58
 3816 06f3 B7        		.byte	-73
 3817 06f4 5E        		.byte	94
 3818 06f5 87        		.byte	-121
 3819 06f6 35        		.byte	53
 3820 06f7 42        		.byte	66
 3821 06f8 86        		.byte	-122
 3822 06f9 C3        		.byte	-61
 3823 06fa 80        		.byte	-128
 3824 06fb D7        		.byte	-41
 3825 06fc A7        		.byte	-89
 3826 06fd A8        		.byte	-88
 3827 06fe 9F        		.byte	-97
 3828 06ff B1        		.byte	-79
 3829 0700 A4        		.byte	-92
 3830 0701 92        		.byte	-110
 3831 0702 8B        		.byte	-117
 3832 0703 EA        		.byte	-22
 3833 0704 CD        		.byte	-51
 3834 0705 85        		.byte	-123
 3835 0706 2B        		.byte	43
 3836 0707 1E        		.byte	30
 3837 0708 FB        		.byte	-5
 3838 0709 0F        		.byte	15
 3839 070a 6C        		.byte	108
 3840 070b 12        		.byte	18
 3841 070c 3E        		.byte	62
 3842 070d 78        		.byte	120
 3843 070e 94        		.byte	-108
 3844 070f 23        		.byte	35
 3845 0710 FB        		.byte	-5
 3846 0711 E7        		.byte	-25
 3847 0712 5D        		.byte	93
 3848 0713 98        		.byte	-104
 3849 0714 CA        		.byte	-54
 3850 0715 D3        		.byte	-45
 3851 0716 48        		.byte	72
 3852 0717 4D        		.byte	77
 3853 0718 F2        		.byte	-14
 3854 0719 23        		.byte	35
 3855 071a A8        		.byte	-88
 3856 071b 9F        		.byte	-97
 3857 071c 99        		.byte	-103
 3858 071d E8        		.byte	-24
 3859 071e 9E        		.byte	-98
 3860 071f C0        		.byte	-64
 3861 0720 19        		.byte	25
 3862 0721 6D        		.byte	109
 3863 0722 FB        		.byte	-5
 3864 0723 BE        		.byte	-66
 3865 0724 9A        		.byte	-102
 3866 0725 CC        		.byte	-52
 3867 0726 E8        		.byte	-24
 3868 0727 1A        		.byte	26
 3869 0728 0F        		.byte	15
 3870 0729 1A        		.byte	26
 3871 072a 6A        		.byte	106
 3872 072b E9        		.byte	-23
 3873 072c 6F        		.byte	111
 3874 072d EE        		.byte	-18
 3875 072e 6E        		.byte	110
 3876 072f DA        		.byte	-38
 3877 0730 94        		.byte	-108
 3878 0731 B9        		.byte	-71
 3879 0732 AE        		.byte	-82
 3880 0733 85        		.byte	-123
 3881 0734 7A        		.byte	122
 3882 0735 DF        		.byte	-33
 3883 0736 85        		.byte	-123
 3884 0737 2F        		.byte	47
 3885 0738 12        		.byte	18
 3886 0739 3D        		.byte	61
 3887 073a C7        		.byte	-57
 3888 073b B3        		.byte	-77
 3889 073c 7E        		.byte	126
 3890 073d CE        		.byte	-50
 3891 073e 40        		.byte	64
 3892 073f 91        		.byte	-111
 3893 0740 90        		.byte	-112
 3894 0741 07        		.byte	7
 3895 0742 DB        		.byte	-37
 3896 0743 65        		.byte	101
 3897 0744 E8        		.byte	-24
 3898 0745 EA        		.byte	-22
 3899 0746 93        		.byte	-109
 3900 0747 E9        		.byte	-23
 3901 0748 84        		.byte	-124
 3902 0749 09        		.byte	9
 3903 074a 25        		.byte	37
 3904 074b A9        		.byte	-87
 3905 074c D1        		.byte	-47
 3906 074d 81        		.byte	-127
 3907 074e 68        		.byte	104
 3908 074f E3        		.byte	-29
 3909 0750 D0        		.byte	-48
 3910 0751 0D        		.byte	13
 3911 0752 1A        		.byte	26
 3912 0753 7B        		.byte	123
 3913 0754 96        		.byte	-106
 3914 0755 EB        		.byte	-21
 3915 0756 22        		.byte	34
 3916 0757 2C        		.byte	44
 3917 0758 BE        		.byte	-66
 3918 0759 F5        		.byte	-11
 3919 075a 69        		.byte	105
 3920 075b 54        		.byte	84
 3921 075c 72        		.byte	114
 3922 075d 23        		.byte	35
 3923 075e 47        		.byte	71
 3924 075f 6C        		.byte	108
 3925 0760 72        		.byte	114
 3926 0761 78        		.byte	120
 3927 0762 FD        		.byte	-3
 3928 0763 BB        		.byte	-69
 3929 0764 93        		.byte	-109
 3930 0765 82        		.byte	-126
 3931 0766 E4        		.byte	-28
 3932 0767 32        		.byte	50
 3933 0768 98        		.byte	-104
 3934 0769 34        		.byte	52
 3935 076a A5        		.byte	-91
 3936 076b F1        		.byte	-15
 3937 076c FB        		.byte	-5
 3938 076d B9        		.byte	-71
 3939 076e E9        		.byte	-23
 3940 076f 92        		.byte	-110
 3941 0770 B1        		.byte	-79
 3942 0771 F9        		.byte	-7
 3943 0772 14        		.byte	20
 3944 0773 AD        		.byte	-83
 3945 0774 7A        		.byte	122
 3946 0775 11        		.byte	17
 3947 0776 86        		.byte	-122
 3948 0777 2B        		.byte	43
 3949 0778 2C        		.byte	44
 3950 0779 18        		.byte	24
 3951 077a AD        		.byte	-83
 3952 077b 3E        		.byte	62
 3953 077c 00        		.byte	0
 3954 077d 7D        		.byte	125
 3955 077e 32        		.byte	50
 3956 077f C3        		.byte	-61
 3957 0780 BD        		.byte	-67
 3958 0781 C8        		.byte	-56
 3959 0782 CC        		.byte	-52
 3960 0783 D4        		.byte	-44
 3961 0784 BA        		.byte	-70
 3962 0785 64        		.byte	100
 3963 0786 67        		.byte	103
 3964 0787 31        		.byte	49
 3965 0788 B9        		.byte	-71
 3966 0789 02        		.byte	2
 3967 078a D8        		.byte	-40
 3968 078b B9        		.byte	-71
 3969 078c B5        		.byte	-75
 3970 078d 19        		.byte	25
 3971 078e 85        		.byte	-123
 3972 078f 8C        		.byte	-116
 3973 0790 C2        		.byte	-62
 3974 0791 32        		.byte	50
 3975 0792 CE        		.byte	-50
 3976 0793 97        		.byte	-105
 3977 0794 46        		.byte	70
 3978 0795 6A        		.byte	106
 3979 0796 9C        		.byte	-100
 3980 0797 B9        		.byte	-71
 3981 0798 D5        		.byte	-43
 3982 0799 70        		.byte	112
 3983 079a 46        		.byte	70
 3984 079b A0        		.byte	-96
 3985 079c 39        		.byte	57
 3986 079d EA        		.byte	-22
 3987 079e 66        		.byte	102
 3988 079f 65        		.byte	101
 3989 07a0 EA        		.byte	-22
 3990 07a1 AD        		.byte	-83
 3991 07a2 04        		.byte	4
 3992 07a3 BF        		.byte	-65
 3993 07a4 9D        		.byte	-99
 3994 07a5 DD        		.byte	-35
 3995 07a6 7B        		.byte	123
 3996 07a7 7E        		.byte	126
 3997 07a8 E1        		.byte	-31
 3998 07a9 34        		.byte	52
 3999 07aa 6B        		.byte	107
 4000 07ab 33        		.byte	51
 4001 07ac 2D        		.byte	45
 4002 07ad 78        		.byte	120
 4003 07ae C2        		.byte	-62
 4004 07af CD        		.byte	-51
 4005 07b0 9F        		.byte	-97
 4006 07b1 61        		.byte	97
 4007 07b2 EA        		.byte	-22
 4008 07b3 F4        		.byte	-12
 4009 07b4 3A        		.byte	58
 4010 07b5 FC        		.byte	-4
 4011 07b6 EB        		.byte	-21
 4012 07b7 BE        		.byte	-66
 4013 07b8 7A        		.byte	122
 4014 07b9 B5        		.byte	-75
 4015 07ba 74        		.byte	116
 4016 07bb BA        		.byte	-70
 4017 07bc 67        		.byte	103
 4018 07bd AE        		.byte	-82
 4019 07be 79        		.byte	121
 4020 07bf D6        		.byte	-42
 4021 07c0 8E        		.byte	-114
 4022 07c1 32        		.byte	50
 4023 07c2 38        		.byte	56
 4024 07c3 73        		.byte	115
 4025 07c4 04        		.byte	4
 4026 07c5 C0        		.byte	-64
 4027 07c6 09        		.byte	9
 4028 07c7 4B        		.byte	75
 4029 07c8 47        		.byte	71
 4030 07c9 2F        		.byte	47
 4031 07ca 33        		.byte	51
 4032 07cb AE        		.byte	-82
 4033 07cc 4D        		.byte	77
 4034 07cd B9        		.byte	-71
 4035 07ce 14        		.byte	20
 4036 07cf F4        		.byte	-12
 4037 07d0 EA        		.byte	-22
 4038 07d1 81        		.byte	-127
 4039 07d2 06        		.byte	6
 4040 07d3 8D        		.byte	-115
 4041 07d4 0A        		.byte	10
 4042 07d5 37        		.byte	55
 4043 07d6 1B        		.byte	27
 4044 07d7 B2        		.byte	-78
 4045 07d8 FE        		.byte	-2
 4046 07d9 4E        		.byte	78
 4047 07da 3E        		.byte	62
 4048 07db 7B        		.byte	123
 4049 07dc 7A        		.byte	122
 4050 07dd 2E        		.byte	46
 4051 07de 41        		.byte	65
 4052 07df CD        		.byte	-51
 4053 07e0 57        		.byte	87
 4054 07e1 35        		.byte	53
 4055 07e2 96        		.byte	-106
 4056 07e3 6E        		.byte	110
 4057 07e4 E1        		.byte	-31
 4058 07e5 9F        		.byte	-97
 4059 07e6 F4        		.byte	-12
 4060 07e7 84        		.byte	-124
 4061 07e8 93        		.byte	-109
 4062 07e9 17        		.byte	23
 4063 07ea 3A        		.byte	58
 4064 07eb 18        		.byte	24
 4065 07ec 88        		.byte	-120
 4066 07ed 45        		.byte	69
 4067 07ee 94        		.byte	-108
 4068 07ef 25        		.byte	37
 4069 07f0 23        		.byte	35
 4070 07f1 8C        		.byte	-116
 4071 07f2 6A        		.byte	106
 4072 07f3 D0        		.byte	-48
 4073 07f4 49        		.byte	73
 4074 07f5 85        		.byte	-123
 4075 07f6 38        		.byte	56
 4076 07f7 A2        		.byte	-94
 4077 07f8 CE        		.byte	-50
 4078 07f9 AB        		.byte	-85
 4079 07fa F9        		.byte	-7
 4080 07fb B3        		.byte	-77
 4081 07fc FA        		.byte	-6
 4082 07fd 38        		.byte	56
 4083 07fe 66        		.byte	102
 4084 07ff 33        		.byte	51
 4085 0800 C1        		.byte	-63
 4086 0801 58        		.byte	88
 4087 0802 63        		.byte	99
 4088 0803 1A        		.byte	26
 4089 0804 E8        		.byte	-24
 4090 0805 1C        		.byte	28
 4091 0806 93        		.byte	-109
 4092 0807 F3        		.byte	-13
 4093 0808 76        		.byte	118
 4094 0809 38        		.byte	56
 4095 080a 9F        		.byte	-97
 4096 080b 02        		.byte	2
 4097 080c 82        		.byte	-126
 4098 080d 15        		.byte	21
 4099 080e 35        		.byte	53
 4100 080f 81        		.byte	-127
 4101 0810 23        		.byte	35
 4102 0811 74        		.byte	116
 4103 0812 2E        		.byte	46
 4104 0813 E7        		.byte	-25
 4105 0814 59        		.byte	89
 4106 0815 01        		.byte	1
 4107 0816 72        		.byte	114
 4108 0817 A5        		.byte	-91
 4109 0818 D9        		.byte	-39
 4110 0819 38        		.byte	56
 4111 081a EC        		.byte	-20
 4112 081b C4        		.byte	-60
 4113 081c AE        		.byte	-82
 4114 081d 76        		.byte	118
 4115 081e FB        		.byte	-5
 4116 081f A2        		.byte	-94
 4117 0820 A6        		.byte	-90
 4118 0821 EB        		.byte	-21
 4119 0822 2D        		.byte	45
 4120 0823 5E        		.byte	94
 4121 0824 6C        		.byte	108
 4122 0825 F2        		.byte	-14
 4123 0826 A3        		.byte	-93
 4124 0827 B7        		.byte	-73
 4125 0828 83        		.byte	-125
 4126 0829 C5        		.byte	-59
 4127 082a 29        		.byte	41
 4128 082b 72        		.byte	114
 4129 082c 16        		.byte	22
 4130 082d 70        		.byte	112
 4131 082e 9E        		.byte	-98
 4132 082f 66        		.byte	102
 4133 0830 FA        		.byte	-6
 4134 0831 E9        		.byte	-23
 4135 0832 BD        		.byte	-67
 4136 0833 8C        		.byte	-116
 4137 0834 49        		.byte	73
 4138 0835 84        		.byte	-124
 4139 0836 80        		.byte	-128
 4140 0837 22        		.byte	34
 4141 0838 C2        		.byte	-62
 4142 0839 5E        		.byte	94
 4143 083a D9        		.byte	-39
 4144 083b C7        		.byte	-57
 4145 083c 83        		.byte	-125
 4146 083d DA        		.byte	-38
 4147 083e 3E        		.byte	62
 4148 083f 9B        		.byte	-101
 4149 0840 2B        		.byte	43
 4150 0841 37        		.byte	55
 4151 0842 5F        		.byte	95
 4152 0843 1E        		.byte	30
 4153 0844 DA        		.byte	-38
 4154 0845 6D        		.byte	109
 4155 0846 80        		.byte	-128
 4156 0847 63        		.byte	99
 4157 0848 2A        		.byte	42
 4158 0849 A8        		.byte	-88
 4159 084a 73        		.byte	115
 4160 084b C6        		.byte	-58
 4161 084c 6B        		.byte	107
 4162 084d B4        		.byte	-76
 4163 084e D5        		.byte	-43
 4164 084f B6        		.byte	-74
 4165 0850 39        		.byte	57
 4166 0851 0B        		.byte	11
 4167 0852 FD        		.byte	-3
 4168 0853 74        		.byte	116
 4169 0854 2D        		.byte	45
 4170 0855 00        		.byte	0
 4171 0856 C2        		.byte	-62
 4172 0857 7C        		.byte	124
 4173 0858 1B        		.byte	27
 4174 0859 91        		.byte	-111
 4175 085a F8        		.byte	-8
 4176 085b 43        		.byte	67
 4177 085c 3D        		.byte	61
 4178 085d 5A        		.byte	90
 4179 085e B2        		.byte	-78
 4180 085f 37        		.byte	55
 4181 0860 6D        		.byte	109
 4182 0861 3F        		.byte	63
 4183 0862 60        		.byte	96
 4184 0863 C1        		.byte	-63
 4185 0864 65        		.byte	101
 4186 0865 A8        		.byte	-88
 4187 0866 E7        		.byte	-25
 4188 0867 94        		.byte	-108
 4189 0868 AF        		.byte	-81
 4190 0869 56        		.byte	86
 4191 086a 7D        		.byte	125
 4192 086b 19        		.byte	25
 4193 086c 79        		.byte	121
 4194 086d 10        		.byte	16
 4195 086e A2        		.byte	-94
 4196 086f A7        		.byte	-89
 4197 0870 E9        		.byte	-23
 4198 0871 15        		.byte	21
 4199 0872 36        		.byte	54
 4200 0873 4C        		.byte	76
 4201 0874 0C        		.byte	12
 4202 0875 5E        		.byte	94
 4203 0876 3D        		.byte	61
 4204 0877 CB        		.byte	-53
 4205 0878 39        		.byte	57
 4206 0879 BA        		.byte	-70
 4207 087a 5A        		.byte	90
 4208 087b FE        		.byte	-2
 4209 087c DB        		.byte	-37
 4210 087d 6D        		.byte	109
 4211 087e AA        		.byte	-86
 4212 087f C2        		.byte	-62
 4213 0880 0C        		.byte	12
 4214 0881 1B        		.byte	27
 4215 0882 70        		.byte	112
 4216 0883 3A        		.byte	58
 4217 0884 73        		.byte	115
 4218 0885 21        		.byte	33
 4219 0886 AF        		.byte	-81
 4220 0887 8C        		.byte	-116
 4221 0888 2E        		.byte	46
 4222 0889 7C        		.byte	124
 4223 088a 6C        		.byte	108
 4224 088b BF        		.byte	-65
 4225 088c 19        		.byte	25
 4226 088d 69        		.byte	105
 4227 088e B1        		.byte	-79
 4228 088f 80        		.byte	-128
 4229 0890 BF        		.byte	-65
 4230 0891 D4        		.byte	-44
 4231 0892 75        		.byte	117
 4232 0893 BD        		.byte	-67
 4233 0894 A0        		.byte	-96
 4234 0895 92        		.byte	-110
 4235 0896 C2        		.byte	-62
 4236 0897 76        		.byte	118
 4237 0898 89        		.byte	-119
 4238 0899 27        		.byte	39
 4239 089a 0C        		.byte	12
 4240 089b 1D        		.byte	29
 4241 089c E0        		.byte	-32
 4242 089d C1        		.byte	-63
 4243 089e 16        		.byte	22
 4244 089f 9B        		.byte	-101
 4245 08a0 2E        		.byte	46
 4246 08a1 3D        		.byte	61
 4247 08a2 AF        		.byte	-81
 4248 08a3 E0        		.byte	-32
 4249 08a4 6F        		.byte	111
 4250 08a5 58        		.byte	88
 4251 08a6 6A        		.byte	106
 4252 08a7 F2        		.byte	-14
 4253 08a8 25        		.byte	37
 4254 08a9 BA        		.byte	-70
 4255 08aa 84        		.byte	-124
 4256 08ab A5        		.byte	-91
 4257 08ac 2F        		.byte	47
 4258 08ad 5F        		.byte	95
 4259 08ae 17        		.byte	23
 4260 08af 12        		.byte	18
 4261 08b0 D2        		.byte	-46
 4262 08b1 27        		.byte	39
 4263 08b2 DE        		.byte	-34
 4264 08b3 E8        		.byte	-24
 4265 08b4 D4        		.byte	-44
 4266 08b5 CF        		.byte	-49
 4267 08b6 8A        		.byte	-118
 4268 08b7 B3        		.byte	-77
 4269 08b8 86        		.byte	-122
 4270 08b9 DC        		.byte	-36
 4271 08ba 43        		.byte	67
 4272 08bb 5A        		.byte	90
 4273 08bc 59        		.byte	89
 4274 08bd E3        		.byte	-29
 4275 08be C6        		.byte	-58
 4276 08bf ED        		.byte	-19
 4277 08c0 D1        		.byte	-47
 4278 08c1 34        		.byte	52
 4279 08c2 1A        		.byte	26
 4280 08c3 C0        		.byte	-64
 4281 08c4 A4        		.byte	-92
 4282 08c5 1E        		.byte	30
 4283 08c6 2E        		.byte	46
 4284 08c7 B9        		.byte	-71
 4285 08c8 5A        		.byte	90
 4286 08c9 B6        		.byte	-74
 4287 08ca 2C        		.byte	44
 4288 08cb DA        		.byte	-38
 4289 08cc FB        		.byte	-5
 4290 08cd 60        		.byte	96
 4291 08ce 93        		.byte	-109
 4292 08cf D2        		.byte	-46
 4293 08d0 A1        		.byte	-95
 4294 08d1 F5        		.byte	-11
 4295 08d2 99        		.byte	-103
 4296 08d3 36        		.byte	54
 4297 08d4 69        		.byte	105
 4298 08d5 8E        		.byte	-114
 4299 08d6 AE        		.byte	-82
 4300 08d7 6D        		.byte	109
 4301 08d8 94        		.byte	-108
 4302 08d9 10        		.byte	16
 4303 08da FD        		.byte	-3
 4304 08db 6B        		.byte	107
 4305 08dc 81        		.byte	-127
 4306 08dd 03        		.byte	3
 4307 08de F9        		.byte	-7
 4308 08df A0        		.byte	-96
 4309 08e0 B6        		.byte	-74
 4310 08e1 6C        		.byte	108
 4311 08e2 36        		.byte	54
 4312 08e3 1A        		.byte	26
 4313 08e4 31        		.byte	49
 4314 08e5 B5        		.byte	-75
 4315 08e6 37        		.byte	55
 4316 08e7 94        		.byte	-108
 4317 08e8 54        		.byte	84
 4318 08e9 4F        		.byte	79
 4319 08ea D9        		.byte	-39
 4320 08eb 68        		.byte	104
 4321 08ec D0        		.byte	-48
 4322 08ed 0F        		.byte	15
 4323 08ee 99        		.byte	-103
 4324 08ef 82        		.byte	-126
 4325 08f0 22        		.byte	34
 4326 08f1 46        		.byte	70
 4327 08f2 49        		.byte	73
 4328 08f3 C4        		.byte	-60
 4329 08f4 A9        		.byte	-87
 4330 08f5 B9        		.byte	-71
 4331 08f6 3D        		.byte	61
 4332 08f7 29        		.byte	41
 4333 08f8 E0        		.byte	-32
 4334 08f9 E7        		.byte	-25
 4335 08fa 1E        		.byte	30
 4336 08fb 17        		.byte	23
 4337 08fc 2E        		.byte	46
 4338 08fd DB        		.byte	-37
 4339 08fe 2F        		.byte	47
 4340 08ff BD        		.byte	-67
 4341 0900 BE        		.byte	-66
 4342 0901 C3        		.byte	-61
 4343 0902 15        		.byte	21
 4344 0903 7F        		.byte	127
 4345 0904 DE        		.byte	-34
 4346 0905 DD        		.byte	-35
 4347 0906 3F        		.byte	63
 4348 0907 16        		.byte	22
 4349 0908 F6        		.byte	-10
 4350 0909 CC        		.byte	-52
 4351 090a 0C        		.byte	12
 4352 090b 6F        		.byte	111
 4353 090c 4F        		.byte	79
 4354 090d 83        		.byte	-125
 4355 090e A1        		.byte	-95
 4356 090f 9B        		.byte	-101
 4357 0910 64        		.byte	100
 4358 0911 11        		.byte	17
 4359 0912 3F        		.byte	63
 4360 0913 44        		.byte	68
 4361 0914 75        		.byte	117
 4362 0915 1F        		.byte	31
 4363 0916 82        		.byte	-126
 4364 0917 75        		.byte	117
 4365 0918 1F        		.byte	31
 4366 0919 D1        		.byte	-47
 4367 091a 1C        		.byte	28
 4368 091b BF        		.byte	-65
 4369 091c A4        		.byte	-92
 4370 091d 0B        		.byte	11
 4371 091e 85        		.byte	-123
 4372 091f B0        		.byte	-80
 4373 0920 AE        		.byte	-82
 4374 0921 CF        		.byte	-49
 4375 0922 04        		.byte	4
 4376 0923 41        		.byte	65
 4377 0924 71        		.byte	113
 4378 0925 00        		.byte	0
 4379 0926 DD        		.byte	-35
 4380 0927 6B        		.byte	107
 4381 0928 15        		.byte	21
 4382 0929 9B        		.byte	-101
 4383 092a 0E        		.byte	14
 4384 092b 34        		.byte	52
 4385 092c 0E        		.byte	14
 4386 092d B9        		.byte	-71
 4387 092e 19        		.byte	25
 4388 092f D8        		.byte	-40
 4389 0930 D2        		.byte	-46
 4390 0931 FB        		.byte	-5
 4391 0932 9C        		.byte	-100
 4392 0933 6E        		.byte	110
 4393 0934 16        		.byte	22
 4394 0935 4C        		.byte	76
 4395 0936 22        		.byte	34
 4396 0937 A4        		.byte	-92
 4397 0938 7C        		.byte	124
 4398 0939 75        		.byte	117
 4399 093a B2        		.byte	-78
 4400 093b 4C        		.byte	76
 4401 093c 9F        		.byte	-97
 4402 093d FA        		.byte	-6
 4403 093e 9F        		.byte	-97
 4404 093f B5        		.byte	-75
 4405 0940 29        		.byte	41
 4406 0941 2C        		.byte	44
 4407 0942 12        		.byte	18
 4408 0943 51        		.byte	81
 4409 0944 28        		.byte	40
 4410 0945 30        		.byte	48
 4411 0946 FB        		.byte	-5
 4412 0947 D6        		.byte	-42
 4413 0948 98        		.byte	-104
 4414 0949 46        		.byte	70
 4415 094a 35        		.byte	53
 4416 094b 5B        		.byte	91
 4417 094c 72        		.byte	114
 4418 094d 9F        		.byte	-97
 4419 094e 11        		.byte	17
 4420 094f 16        		.byte	22
 4421 0950 77        		.byte	119
 4422 0951 C2        		.byte	-62
 4423 0952 72        		.byte	114
 4424 0953 9F        		.byte	-97
 4425 0954 13        		.byte	19
 4426 0955 37        		.byte	55
 4427 0956 35        		.byte	53
 4428 0957 44        		.byte	68
 4429 0958 8E        		.byte	-114
 4430 0959 3D        		.byte	61
 4431 095a FE        		.byte	-2
 4432 095b BA        		.byte	-70
 4433 095c 15        		.byte	21
 4434 095d 69        		.byte	105
 4435 095e 13        		.byte	19
 4436 095f 07        		.byte	7
 4437 0960 2E        		.byte	46
 4438 0961 5D        		.byte	93
 4439 0962 29        		.byte	41
 4440 0963 73        		.byte	115
 4441 0964 41        		.byte	65
 4442 0965 E1        		.byte	-31
 4443 0966 80        		.byte	-128
 4444 0967 87        		.byte	-121
 4445 0968 CF        		.byte	-49
 4446 0969 BF        		.byte	-65
 4447 096a 1C        		.byte	28
 4448 096b 7D        		.byte	125
 4449 096c 9A        		.byte	-102
 4450 096d 94        		.byte	-108
 4451 096e 81        		.byte	-127
 4452 096f 7E        		.byte	126
 4453 0970 3C        		.byte	60
 4454 0971 BA        		.byte	-70
 4455 0972 8E        		.byte	-114
 4456 0973 5B        		.byte	91
 4457 0974 7A        		.byte	122
 4458 0975 74        		.byte	116
 4459 0976 BC        		.byte	-68
 4460 0977 7C        		.byte	124
 4461 0978 8F        		.byte	-113
 4462 0979 1E        		.byte	30
 4463 097a 93        		.byte	-109
 4464 097b 50        		.byte	80
 4465 097c E7        		.byte	-25
 4466 097d 1E        		.byte	30
 4467 097e 28        		.byte	40
 4468 097f 01        		.byte	1
 4469 0980 A3        		.byte	-93
 4470 0981 77        		.byte	119
 4471 0982 1B        		.byte	27
 4472 0983 63        		.byte	99
 4473 0984 6F        		.byte	111
 4474 0985 1E        		.byte	30
 4475 0986 FB        		.byte	-5
 4476 0987 BA        		.byte	-70
 4477 0988 3A        		.byte	58
 4478 0989 34        		.byte	52
 4479 098a E3        		.byte	-29
 4480 098b 2E        		.byte	46
 4481 098c E8        		.byte	-24
 4482 098d 5C        		.byte	92
 4483 098e 79        		.byte	121
 4484 098f 42        		.byte	66
 4485 0990 5E        		.byte	94
 4486 0991 BF        		.byte	-65
 4487 0992 EC        		.byte	-20
 4488 0993 BF        		.byte	-65
 4489 0994 A4        		.byte	-92
 4490 0995 48        		.byte	72
 4491 0996 1B        		.byte	27
 4492 0997 7B        		.byte	123
 4493 0998 37        		.byte	55
 4494 0999 2A        		.byte	42
 4495 099a DE        		.byte	-34
 4496 099b BE        		.byte	-66
 4497 099c 5D        		.byte	93
 4498 099d 31        		.byte	49
 4499 099e 3B        		.byte	59
 4500 099f CC        		.byte	-52
 4501 09a0 59        		.byte	89
 4502 09a1 02        		.byte	2
 4503 09a2 3E        		.byte	62
 4504 09a3 AE        		.byte	-82
 4505 09a4 8F        		.byte	-113
 4506 09a5 1E        		.byte	30
 4507 09a6 A9        		.byte	-87
 4508 09a7 86        		.byte	-122
 4509 09a8 B8        		.byte	-72
 4510 09a9 1D        		.byte	29
 4511 09aa FB        		.byte	-5
 4512 09ab 46        		.byte	70
 4513 09ac A7        		.byte	-89
 4514 09ad FC        		.byte	-4
 4515 09ae 0A        		.byte	10
 4516 09af 35        		.byte	53
 4517 09b0 C4        		.byte	-60
 4518 09b1 89        		.byte	-119
 4519 09b2 58        		.byte	88
 4520 09b3 C0        		.byte	-64
 4521 09b4 62        		.byte	98
 4522 09b5 52        		.byte	82
 4523 09b6 7F        		.byte	127
 4524 09b7 DF        		.byte	-33
 4525 09b8 09        		.byte	9
 4526 09b9 54        		.byte	84
 4527 09ba EF        		.byte	-17
 4528 09bb A5        		.byte	-91
 4529 09bc B9        		.byte	-71
 4530 09bd 80        		.byte	-128
 4531 09be 00        		.byte	0
 4532 09bf 74        		.byte	116
 4533 09c0 A8        		.byte	-88
 4534 09c1 C7        		.byte	-57
 4535 09c2 45        		.byte	69
 4536 09c3 19        		.byte	25
 4537 09c4 C0        		.byte	-64
 4538 09c5 A1        		.byte	-95
 4539 09c6 CD        		.byte	-51
 4540 09c7 0F        		.byte	15
 4541 09c8 39        		.byte	57
 4542 09c9 29        		.byte	41
 4543 09ca 64        		.byte	100
 4544 09cb 50        		.byte	80
 4545 09cc 99        		.byte	-103
 4546 09cd F3        		.byte	-13
 4547 09ce A6        		.byte	-90
 4548 09cf B9        		.byte	-71
 4549 09d0 30        		.byte	48
 4550 09d1 F6        		.byte	-10
 4551 09d2 56        		.byte	86
 4552 09d3 1A        		.byte	26
 4553 09d4 F4        		.byte	-12
 4554 09d5 63        		.byte	99
 4555 09d6 DB        		.byte	-37
 4556 09d7 01        		.byte	1
 4557 09d8 B9        		.byte	-71
 4558 09d9 A7        		.byte	-89
 4559 09da 4E        		.byte	78
 4560 09db EB        		.byte	-21
 4561 09dc 90        		.byte	-112
 4562 09dd 97        		.byte	-105
 4563 09de 94        		.byte	-108
 4564 09df 7F        		.byte	127
 4565 09e0 BE        		.byte	-66
 4566 09e1 C8        		.byte	-56
 4567 09e2 D0        		.byte	-48
 4568 09e3 17        		.byte	23
 4569 09e4 F4        		.byte	-12
 4570 09e5 5C        		.byte	92
 4571 09e6 99        		.byte	-103
 4572 09e7 B8        		.byte	-72
 4573 09e8 0E        		.byte	14
 4574 09e9 9D        		.byte	-99
 4575 09ea AA        		.byte	-86
 4576 09eb DB        		.byte	-37
 4577 09ec 5D        		.byte	93
 4578 09ed 8B        		.byte	-117
 4579 09ee 35        		.byte	53
 4580 09ef F5        		.byte	-11
 4581 09f0 1E        		.byte	30
 4582 09f1 EE        		.byte	-18
 4583 09f2 63        		.byte	99
 4584 09f3 10        		.byte	16
 4585 09f4 C5        		.byte	-59
 4586 09f5 A2        		.byte	-94
 4587 09f6 53        		.byte	83
 4588 09f7 3F        		.byte	63
 4589 09f8 67        		.byte	103
 4590 09f9 DC        		.byte	-36
 4591 09fa 01        		.byte	1
 4592 09fb F9        		.byte	-7
 4593 09fc 76        		.byte	118
 4594 09fd E9        		.byte	-23
 4595 09fe 39        		.byte	57
 4596 09ff 54        		.byte	84
 4597 0a00 3E        		.byte	62
 4598 0a01 CE        		.byte	-50
 4599 0a02 8C        		.byte	-116
 4600 0a03 57        		.byte	87
 4601 0a04 31        		.byte	49
 4602 0a05 41        		.byte	65
 4603 0a06 C6        		.byte	-58
 4604 0a07 39        		.byte	57
 4605 0a08 AD        		.byte	-83
 4606 0a09 6E        		.byte	110
 4607 0a0a E8        		.byte	-24
 4608 0a0b 11        		.byte	17
 4609 0a0c 9B        		.byte	-101
 4610 0a0d E0        		.byte	-32
 4611 0a0e 1C        		.byte	28
 4612 0a0f E7        		.byte	-25
 4613 0a10 0A        		.byte	10
 4614 0a11 47        		.byte	71
 4615 0a12 3F        		.byte	63
 4616 0a13 05        		.byte	5
 4617 0a14 6D        		.byte	109
 4618 0a15 5C        		.byte	92
 4619 0a16 43        		.byte	67
 4620 0a17 E4        		.byte	-28
 4621 0a18 50        		.byte	80
 4622 0a19 99        		.byte	-103
 4623 0a1a 07        		.byte	7
 4624 0a1b 9D        		.byte	-99
 4625 0a1c BD        		.byte	-67
 4626 0a1d B8        		.byte	-72
 4627 0a1e C3        		.byte	-61
 4628 0a1f E3        		.byte	-29
 4629 0a20 E1        		.byte	-31
 4630 0a21 7C        		.byte	124
 4631 0a22 38        		.byte	56
 4632 0a23 D1        		.byte	-47
 4633 0a24 76        		.byte	118
 4634 0a25 33        		.byte	51
 4635 0a26 52        		.byte	82
 4636 0a27 50        		.byte	80
 4637 0a28 61        		.byte	97
 4638 0a29 5A        		.byte	90
 4639 0a2a 8C        		.byte	-116
 4640 0a2b FB        		.byte	-5
 4641 0a2c C8        		.byte	-56
 4642 0a2d 75        		.byte	117
 4643 0a2e B9        		.byte	-71
 4644 0a2f C3        		.byte	-61
 4645 0a30 FD        		.byte	-3
 4646 0a31 7C        		.byte	124
 4647 0a32 5F        		.byte	95
 4648 0a33 64        		.byte	100
 4649 0a34 8B        		.byte	-117
 4650 0a35 8E        		.byte	-114
 4651 0a36 07        		.byte	7
 4652 0a37 38        		.byte	56
 4653 0a38 13        		.byte	19
 4654 0a39 D7        		.byte	-41
 4655 0a3a 8E        		.byte	-114
 4656 0a3b C3        		.byte	-61
 4657 0a3c 56        		.byte	86
 4658 0a3d DE        		.byte	-34
 4659 0a3e BC        		.byte	-68
 4660 0a3f 0C        		.byte	12
 4661 0a40 59        		.byte	89
 4662 0a41 47        		.byte	71
 4663 0a42 D6        		.byte	-42
 4664 0a43 1D        		.byte	29
 4665 0a44 CC        		.byte	-52
 4666 0a45 32        		.byte	50
 4667 0a46 25        		.byte	37
 4668 0a47 FD        		.byte	-3
 4669 0a48 38        		.byte	56
 4670 0a49 62        		.byte	98
 4671 0a4a E3        		.byte	-29
 4672 0a4b 1A        		.byte	26
 4673 0a4c E0        		.byte	-32
 4674 0a4d 4E        		.byte	78
 4675 0a4e 5F        		.byte	95
 4676 0a4f 1E        		.byte	30
 4677 0a50 FC        		.byte	-4
 4678 0a51 F3        		.byte	-13
 4679 0a52 B7        		.byte	-73
 4680 0a53 76        		.byte	118
 4681 0a54 59        		.byte	89
 4682 0a55 2C        		.byte	44
 4683 0a56 16        		.byte	22
 4684 0a57 63        		.byte	99
 4685 0a58 40        		.byte	64
 4686 0a59 BB        		.byte	-69
 4687 0a5a 71        		.byte	113
 4688 0a5b 25        		.byte	37
 4689 0a5c 1D        		.byte	29
 4690 0a5d 0F        		.byte	15
 4691 0a5e C0        		.byte	-64
 4692 0a5f 82        		.byte	-126
 4693 0a60 22        		.byte	34
 4694 0a61 A2        		.byte	-94
 4695 0a62 FF        		.byte	-1
 4696 0a63 BD        		.byte	-67
 4697 0a64 29        		.byte	41
 4698 0a65 47        		.byte	71
 4699 0a66 7D        		.byte	125
 4700 0a67 A2        		.byte	-94
 4701 0a68 56        		.byte	86
 4702 0a69 8D        		.byte	-115
 4703 0a6a A1        		.byte	-95
 4704 0a6b 6D        		.byte	109
 4705 0a6c AE        		.byte	-82
 4706 0a6d 07        		.byte	7
 4707 0a6e 22        		.byte	34
 4708 0a6f 32        		.byte	50
 4709 0a70 1F        		.byte	31
 4710 0a71 13        		.byte	19
 4711 0a72 16        		.byte	22
 4712 0a73 77        		.byte	119
 4713 0a74 C0        		.byte	-64
 4714 0a75 82        		.byte	-126
 4715 0a76 9C        		.byte	-100
 4716 0a77 1E        		.byte	30
 4717 0a78 16        		.byte	22
 4718 0a79 57        		.byte	87
 4719 0a7a 85        		.byte	-123
 4720 0a7b 17        		.byte	23
 4721 0a7c 75        		.byte	117
 4722 0a7d A3        		.byte	-93
 4723 0a7e 4C        		.byte	76
 4724 0a7f B9        		.byte	-71
 4725 0a80 FC        		.byte	-4
 4726 0a81 AF        		.byte	-81
 4727 0a82 E3        		.byte	-29
 4728 0a83 DA        		.byte	-38
 4729 0a84 E3        		.byte	-29
 4730 0a85 8C        		.byte	-116
 4731 0a86 8C        		.byte	-116
 4732 0a87 39        		.byte	57
 4733 0a88 DE        		.byte	-34
 4734 0a89 ED        		.byte	-19
 4735 0a8a EC        		.byte	-20
 4736 0a8b 5C        		.byte	92
 4737 0a8c E4        		.byte	-28
 4738 0a8d 8C        		.byte	-116
 4739 0a8e E6        		.byte	-26
 4740 0a8f 06        		.byte	6
 4741 0a90 76        		.byte	118
 4742 0a91 0E        		.byte	14
 4743 0a92 1C        		.byte	28
 4744 0a93 95        		.byte	-107
 4745 0a94 58        		.byte	88
 4746 0a95 B7        		.byte	-73
 4747 0a96 A4        		.byte	-92
 4748 0a97 52        		.byte	82
 4749 0a98 46        		.byte	70
 4750 0a99 B0        		.byte	-80
 4751 0a9a 2F        		.byte	47
 4752 0a9b 5E        		.byte	94
 4753 0a9c 30        		.byte	48
 4754 0a9d 36        		.byte	54
 4755 0a9e 28        		.byte	40
 4756 0a9f 5B        		.byte	91
 4757 0aa0 77        		.byte	119
 4758 0aa1 EE        		.byte	-18
 4759 0aa2 78        		.byte	120
 4760 0aa3 B9        		.byte	-71
 4761 0aa4 74        		.byte	116
 4762 0aa5 68        		.byte	104
 4763 0aa6 15        		.byte	21
 4764 0aa7 41        		.byte	65
 4765 0aa8 E2        		.byte	-30
 4766 0aa9 63        		.byte	99
 4767 0aaa 8E        		.byte	-114
 4768 0aab 9E        		.byte	-98
 4769 0aac BB        		.byte	-69
 4770 0aad F0        		.byte	-16
 4771 0aae 63        		.byte	99
 4772 0aaf 02        		.byte	2
 4773 0ab0 74        		.byte	116
 4774 0ab1 A8        		.byte	-88
 4775 0ab2 BE        		.byte	-66
 4776 0ab3 08        		.byte	8
 4777 0ab4 C2        		.byte	-62
 4778 0ab5 A5        		.byte	-91
 4779 0ab6 C3        		.byte	-61
 4780 0ab7 0F        		.byte	15
 4781 0ab8 93        		.byte	-109
 4782 0ab9 B9        		.byte	-71
 4783 0aba E2        		.byte	-30
 4784 0abb 60        		.byte	96
 4785 0abc 1E        		.byte	30
 4786 0abd 31        		.byte	49
 4787 0abe AD        		.byte	-83
 4788 0abf 99        		.byte	-103
 4789 0ac0 D7        		.byte	-41
 4790 0ac1 E6        		.byte	-26
 4791 0ac2 EB        		.byte	-21
 4792 0ac3 96        		.byte	-106
 4793 0ac4 B7        		.byte	-73
 4794 0ac5 2F        		.byte	47
 4795 0ac6 7F        		.byte	127
 4796 0ac7 77        		.byte	119
 4797 0ac8 B7        		.byte	-73
 4798 0ac9 D3        		.byte	-45
 4799 0aca 2B        		.byte	43
 4800 0acb 77        		.byte	119
 4801 0acc 47        		.byte	71
 4802 0acd 15        		.byte	21
 4803 0ace DD        		.byte	-35
 4804 0acf 34        		.byte	52
 4805 0ad0 CD        		.byte	-51
 4806 0ad1 98        		.byte	-104
 4807 0ad2 11        		.byte	17
 4808 0ad3 A8        		.byte	-88
 4809 0ad4 4F        		.byte	79
 4810 0ad5 B9        		.byte	-71
 4811 0ad6 29        		.byte	41
 4812 0ad7 91        		.byte	-111
 4813 0ad8 A5        		.byte	-91
 4814 0ad9 26        		.byte	38
 4815 0ada 77        		.byte	119
 4816 0adb CF        		.byte	-49
 4817 0adc F5        		.byte	-11
 4818 0add A5        		.byte	-91
 4819 0ade 99        		.byte	-103
 4820 0adf F2        		.byte	-14
 4821 0ae0 4C        		.byte	76
 4822 0ae1 E0        		.byte	-32
 4823 0ae2 12        		.byte	18
 4824 0ae3 E4        		.byte	-28
 4825 0ae4 40        		.byte	64
 4826 0ae5 EA        		.byte	-22
 4827 0ae6 73        		.byte	115
 4828 0ae7 1D        		.byte	29
 4829 0ae8 FA        		.byte	-6
 4830 0ae9 7A        		.byte	122
 4831 0aea 92        		.byte	-110
 4832 0aeb 64        		.byte	100
 4833 0aec 9E        		.byte	-98
 4834 0aed 1D        		.byte	29
 4835 0aee B4        		.byte	-76
 4836 0aef 3F        		.byte	63
 4837 0af0 19        		.byte	25
 4838 0af1 69        		.byte	105
 4839 0af2 B3        		.byte	-77
 4840 0af3 64        		.byte	100
 4841 0af4 12        		.byte	18
 4842 0af5 75        		.byte	117
 4843 0af6 21        		.byte	33
 4844 0af7 50        		.byte	80
 4845 0af8 80        		.byte	-128
 4846 0af9 01        		.byte	1
 4847 0afa BC        		.byte	-68
 4848 0afb 2A        		.byte	42
 4849 0afc 51        		.byte	81
 4850 0afd D5        		.byte	-43
 4851 0afe 8C        		.byte	-116
 4852 0aff 38        		.byte	56
 4853 0b00 87        		.byte	-121
 4854 0b01 CC        		.byte	-52
 4855 0b02 FF        		.byte	-1
 4856 0b03 DD        		.byte	-35
 4857 0b04 F9        		.byte	-7
 4858 0b05 E1        		.byte	-31
 4859 0b06 E2        		.byte	-30
 4860 0b07 8A        		.byte	-118
 4861 0b08 D1        		.byte	-47
 4862 0b09 89        		.byte	-119
 4863 0b0a 41        		.byte	65
 4864 0b0b C0        		.byte	-64
 4865 0b0c 51        		.byte	81
 4866 0b0d F8        		.byte	-8
 4867 0b0e 7C        		.byte	124
 4868 0b0f F4        		.byte	-12
 4869 0b10 77        		.byte	119
 4870 0b11 6B        		.byte	107
 4871 0b12 EB        		.byte	-21
 4872 0b13 71        		.byte	113
 4873 0b14 80        		.byte	-128
 4874 0b15 1A        		.byte	26
 4875 0b16 0C        		.byte	12
 4876 0b17 69        		.byte	105
 4877 0b18 C5        		.byte	-59
 4878 0b19 AA        		.byte	-86
 4879 0b1a E3        		.byte	-29
 4880 0b1b 25        		.byte	37
 4881 0b1c 5C        		.byte	92
 4882 0b1d 84        		.byte	-124
 4883 0b1e 94        		.byte	-108
 4884 0b1f 6A        		.byte	106
 4885 0b20 E4        		.byte	-28
 4886 0b21 67        		.byte	103
 4887 0b22 6A        		.byte	106
 4888 0b23 18        		.byte	24
 4889 0b24 8E        		.byte	-114
 4890 0b25 B8        		.byte	-72
 4891 0b26 8D        		.byte	-115
 4892 0b27 80        		.byte	-128
 4893 0b28 AB        		.byte	-85
 4894 0b29 2C        		.byte	44
 4895 0b2a F2        		.byte	-14
 4896 0b2b E6        		.byte	-26
 4897 0b2c 63        		.byte	99
 4898 0b2d C9        		.byte	-55
 4899 0b2e 54        		.byte	84
 4900 0b2f 2A        		.byte	42
 4901 0b30 D6        		.byte	-42
 4902 0b31 2E        		.byte	46
 4903 0b32 BF        		.byte	-65
 4904 0b33 DD        		.byte	-35
 4905 0b34 19        		.byte	25
 4906 0b35 B0        		.byte	-80
 4907 0b36 E2        		.byte	-30
 4908 0b37 27        		.byte	39
 4909 0b38 AD        		.byte	-83
 4910 0b39 B9        		.byte	-71
 4911 0b3a F0        		.byte	-16
 4912 0b3b 43        		.byte	67
 4913 0b3c E5        		.byte	-27
 4914 0b3d 29        		.byte	41
 4915 0b3e B1        		.byte	-79
 4916 0b3f E0        		.byte	-32
 4917 0b40 42        		.byte	66
 4918 0b41 E7        		.byte	-25
 4919 0b42 2D        		.byte	45
 4920 0b43 D8        		.byte	-40
 4921 0b44 32        		.byte	50
 4922 0b45 E6        		.byte	-26
 4923 0b46 4E        		.byte	78
 4924 0b47 1E        		.byte	30
 4925 0b48 BE        		.byte	-66
 4926 0b49 DF        		.byte	-33
 4927 0b4a 1D        		.byte	29
 4928 0b4b 99        		.byte	-103
 4929 0b4c B0        		.byte	-80
 4930 0b4d C3        		.byte	-61
 4931 0b4e E5        		.byte	-27
 4932 0b4f 48        		.byte	72
 4933 0b50 12        		.byte	18
 4934 0b51 A6        		.byte	-90
 4935 0b52 CE        		.byte	-50
 4936 0b53 1E        		.byte	30
 4937 0b54 BE        		.byte	-66
 4938 0b55 DF        		.byte	-33
 4939 0b56 3C        		.byte	60
 4940 0b57 FA        		.byte	-6
 4941 0b58 57        		.byte	87
 4942 0b59 0D        		.byte	13
 4943 0b5a 98        		.byte	-104
 4944 0b5b B2        		.byte	-78
 4945 0b5c C7        		.byte	-57
 4946 0b5d ED        		.byte	-19
 4947 0b5e 39        		.byte	57
 4948 0b5f F0        		.byte	-16
 4949 0b60 62        		.byte	98
 4950 0b61 46        		.byte	70
 4951 0b62 EF        		.byte	-17
 4952 0b63 5C        		.byte	92
 4953 0b64 1B        		.byte	27
 4954 0b65 B4        		.byte	-76
 4955 0b66 CB        		.byte	-53
 4956 0b67 F5        		.byte	-11
 4957 0b68 68        		.byte	104
 4958 0b69 33        		.byte	51
 4959 0b6a C5        		.byte	-59
 4960 0b6b E9        		.byte	-23
 4961 0b6c 50        		.byte	80
 4962 0b6d 03        		.byte	3
 4963 0b6e 65        		.byte	101
 4964 0b6f 48        		.byte	72
 4965 0b70 F3        		.byte	-13
 4966 0b71 45        		.byte	69
 4967 0b72 08        		.byte	8
 4968 0b73 92        		.byte	-110
 4969 0b74 87        		.byte	-121
 4970 0b75 6D        		.byte	109
 4971 0b76 58        		.byte	88
 4972 0b77 13        		.byte	19
 4973 0b78 A4        		.byte	-92
 4974 0b79 CA        		.byte	-54
 4975 0b7a 16        		.byte	22
 4976 0b7b AE        		.byte	-82
 4977 0b7c DE        		.byte	-34
 4978 0b7d 3E        		.byte	62
 4979 0b7e FE        		.byte	-2
 4980 0b7f 7E        		.byte	126
 4981 0b80 5F        		.byte	95
 4982 0b81 3C        		.byte	60
 4983 0b82 FA        		.byte	-6
 4984 0b83 57        		.byte	87
 4985 0b84 2C        		.byte	44
 4986 0b85 DA        		.byte	-38
 4987 0b86 17        		.byte	23
 4988 0b87 8D        		.byte	-115
 4989 0b88 79        		.byte	121
 4990 0b89 70        		.byte	112
 4991 0b8a 62        		.byte	98
 4992 0b8b 46        		.byte	70
 4993 0b8c 0E        		.byte	14
 4994 0b8d 9E        		.byte	-98
 4995 0b8e BE        		.byte	-66
 4996 0b8f FE        		.byte	-2
 4997 0b90 5F        		.byte	95
 4998 0b91 1D        		.byte	29
 4999 0b92 99        		.byte	-103
 5000 0b93 91        		.byte	-111
 5001 0b94 81        		.byte	-127
 5002 0b95 61        		.byte	97
 5003 0b96 40        		.byte	64
 5004 0b97 E3        		.byte	-29
 5005 0b98 44        		.byte	68
 5006 0b99 EB        		.byte	-21
 5007 0b9a 54        		.byte	84
 5008 0b9b 0B        		.byte	11
 5009 0b9c 75        		.byte	117
 5010 0b9d 49        		.byte	73
 5011 0b9e F1        		.byte	-15
 5012 0b9f 41        		.byte	65
 5013 0ba0 00        		.byte	0
 5014 0ba1 63        		.byte	99
 5015 0ba2 25        		.byte	37
 5016 0ba3 A9        		.byte	-87
 5017 0ba4 B1        		.byte	-79
 5018 0ba5 C1        		.byte	-63
 5019 0ba6 00        		.byte	0
 5020 0ba7 82        		.byte	-126
 5021 0ba8 86        		.byte	-122
 5022 0ba9 6F        		.byte	111
 5023 0baa 3D        		.byte	61
 5024 0bab F8        		.byte	-8
 5025 0bac 53        		.byte	83
 5026 0bad 05        		.byte	5
 5027 0bae 88        		.byte	-120
 5028 0baf 73        		.byte	115
 5029 0bb0 45        		.byte	69
 5030 0bb1 08        		.byte	8
 5031 0bb2 73        		.byte	115
 5032 0bb3 64        		.byte	100
 5033 0bb4 4A        		.byte	74
 5034 0bb5 F7        		.byte	-9
 5035 0bb6 6C        		.byte	108
 5036 0bb7 5A        		.byte	90
 5037 0bb8 17        		.byte	23
 5038 0bb9 AC        		.byte	-84
 5039 0bba DA        		.byte	-38
 5040 0bbb 17        		.byte	23
 5041 0bbc 8D        		.byte	-115
 5042 0bbd 79        		.byte	121
 5043 0bbe 51        		.byte	81
 5044 0bbf 20        		.byte	32
 5045 0bc0 C2        		.byte	-62
 5046 0bc1 E7        		.byte	-25
 5047 0bc2 2D        		.byte	45
 5048 0bc3 D8        		.byte	-40
 5049 0bc4 13        		.byte	19
 5050 0bc5 A4        		.byte	-92
 5051 0bc6 CA        		.byte	-54
 5052 0bc7 F7        		.byte	-9
 5053 0bc8 4D        		.byte	77
 5054 0bc9 18        		.byte	24
 5055 0bca 93        		.byte	-109
 5056 0bcb 85        		.byte	-123
 5057 0bcc 69        		.byte	105
 5058 0bcd 31        		.byte	49
 5059 0bce E0        		.byte	-32
 5060 0bcf 23        		.byte	35
 5061 0bd0 C4        		.byte	-60
 5062 0bd1 0A        		.byte	10
 5063 0bd2 77        		.byte	119
 5064 0bd3 6C        		.byte	108
 5065 0bd4 5A        		.byte	90
 5066 0bd5 36        		.byte	54
 5067 0bd6 CF        		.byte	-49
 5068 0bd7 FD        		.byte	-3
 5069 0bd8 59        		.byte	89
 5070 0bd9 11        		.byte	17
 5071 0bda 81        		.byte	-127
 5072 0bdb 80        		.byte	-128
 5073 0bdc 82        		.byte	-126
 5074 0bdd 86        		.byte	-122
 5075 0bde 8E        		.byte	-114
 5076 0bdf 7F        		.byte	127
 5077 0be0 7C        		.byte	124
 5078 0be1 5B        		.byte	91
 5079 0be2 34        		.byte	52
 5080 0be3 EA        		.byte	-22
 5081 0be4 56        		.byte	86
 5082 0be5 2E        		.byte	46
 5083 0be6 BF        		.byte	-65
 5084 0be7 FC        		.byte	-4
 5085 0be8 7A        		.byte	122
 5086 0be9 76        		.byte	118
 5087 0bea 4F        		.byte	79
 5088 0beb FD        		.byte	-3
 5089 0bec 59        		.byte	89
 5090 0bed 30        		.byte	48
 5091 0bee E2        		.byte	-30
 5092 0bef 46        		.byte	70
 5093 0bf0 EF        		.byte	-17
 5094 0bf1 5C        		.byte	92
 5095 0bf2 3A        		.byte	58
 5096 0bf3 D7        		.byte	-41
 5097 0bf4 0D        		.byte	13
 5098 0bf5 79        		.byte	121
 5099 0bf6 51        		.byte	81
 5100 0bf7 20        		.byte	32
 5101 0bf8 A3        		.byte	-93
 5102 0bf9 A5        		.byte	-91
 5103 0bfa C8        		.byte	-56
 5104 0bfb F3        		.byte	-13
 5105 0bfc 64        		.byte	100
 5106 0bfd 2B        		.byte	43
 5107 0bfe B5        		.byte	-75
 5108 0bff E8        		.byte	-24
 5109 0c00 52        		.byte	82
 5110 0c01 07        		.byte	7
 5111 0c02 8C        		.byte	-116
 5112 0c03 9A        		.byte	-102
 5113 0c04 97        		.byte	-105
 5114 0c05 8D        		.byte	-115
 5115 0c06 98        		.byte	-104
 5116 0c07 B2        		.byte	-78
 5117 0c08 C7        		.byte	-57
 5118 0c09 0C        		.byte	12
 5119 0c0a 7B        		.byte	123
 5120 0c0b 74        		.byte	116
 5121 0c0c 4B        		.byte	75
 5122 0c0d F5        		.byte	-11
 5123 0c0e 68        		.byte	104
 5124 0c0f 52        		.byte	82
 5125 0c10 07        		.byte	7
 5126 0c11 6D        		.byte	109
 5127 0c12 39        		.byte	57
 5128 0c13 F0        		.byte	-16
 5129 0c14 62        		.byte	98
 5130 0c15 27        		.byte	39
 5131 0c16 AD        		.byte	-83
 5132 0c17 D8        		.byte	-40
 5133 0c18 13        		.byte	19
 5134 0c19 85        		.byte	-123
 5135 0c1a 88        		.byte	-120
 5136 0c1b 73        		.byte	115
 5137 0c1c 45        		.byte	69
 5138 0c1d E9        		.byte	-23
 5139 0c1e 50        		.byte	80
 5140 0c1f 03        		.byte	3
 5141 0c20 84        		.byte	-124
 5142 0c21 8A        		.byte	-118
 5143 0c22 77        		.byte	119
 5144 0c23 6C        		.byte	108
 5145 0c24 5A        		.byte	90
 5146 0c25 17        		.byte	23
 5147 0c26 8D        		.byte	-115
 5148 0c27 98        		.byte	-104
 5149 0c28 93        		.byte	-109
 5150 0c29 85        		.byte	-123
 5151 0c2a 88        		.byte	-120
 5152 0c2b 92        		.byte	-110
 5153 0c2c A6        		.byte	-90
 5154 0c2d AF        		.byte	-81
 5155 0c2e DC        		.byte	-36
 5156 0c2f 3A        		.byte	58
 5157 0c30 D7        		.byte	-41
 5158 0c31 0D        		.byte	13
 5159 0c32 98        		.byte	-104
 5160 0c33 B2        		.byte	-78
 5161 0c34 E6        		.byte	-26
 5162 0c35 2F        		.byte	47
 5163 0c36 DC        		.byte	-36
 5164 0c37 1B        		.byte	27
 5165 0c38 B4        		.byte	-76
 5166 0c39 CB        		.byte	-53
 5167 0c3a F5        		.byte	-11
 5168 0c3b 68        		.byte	104
 5169 0c3c 52        		.byte	82
 5170 0c3d 07        		.byte	7
 5171 0c3e 6D        		.byte	109
 5172 0c3f 39        		.byte	57
 5173 0c40 D1        		.byte	-47
 5174 0c41 01        		.byte	1
 5175 0c42 80        		.byte	-128
 5176 0c43 63        		.byte	99
 5177 0c44 44        		.byte	68
 5178 0c45 EB        		.byte	-21
 5179 0c46 35        		.byte	53
 5180 0c47 C9        		.byte	-55
 5181 0c48 F1        		.byte	-15
 5182 0c49 60        		.byte	96
 5183 0c4a 42        		.byte	66
 5184 0c4b 06        		.byte	6
 5185 0c4c 8E        		.byte	-114
 5186 0c4d 9E        		.byte	-98
 5187 0c4e BE        		.byte	-66
 5188 0c4f FE        		.byte	-2
 5189 0c50 7E        		.byte	126
 5190 0c51 7E        		.byte	126
 5191 0c52 5F        		.byte	95
 5192 0c53 1D        		.byte	29
 5193 0c54 99        		.byte	-103
 5194 0c55 B0        		.byte	-80
 5195 0c56 E2        		.byte	-30
 5196 0c57 46        		.byte	70
 5197 0c58 EF        		.byte	-17
 5198 0c59 5C        		.byte	92
 5199 0c5a 1B        		.byte	27
 5200 0c5b 95        		.byte	-107
 5201 0c5c A8        		.byte	-88
 5202 0c5d D2        		.byte	-46
 5203 0c5e 26        		.byte	38
 5204 0c5f CE        		.byte	-50
 5205 0c60 FF        		.byte	-1
 5206 0c61 5D        		.byte	93
 5207 0c62 19        		.byte	25
 5208 0c63 B0        		.byte	-80
 5209 0c64 E2        		.byte	-30
 5210 0c65 46        		.byte	70
 5211 0c66 0E        		.byte	14
 5212 0c67 7F        		.byte	127
 5213 0c68 5D        		.byte	93
 5214 0c69 38        		.byte	56
 5215 0c6a F2        		.byte	-14
 5216 0c6b 47        		.byte	71
 5217 0c6c 0C        		.byte	12
 5218 0c6d 7B        		.byte	123
 5219 0c6e 74        		.byte	116
 5220 0c6f 4B        		.byte	75
 5221 0c70 F5        		.byte	-11
 5222 0c71 68        		.byte	104
 5223 0c72 52        		.byte	82
 5224 0c73 26        		.byte	38
 5225 0c74 CE        		.byte	-50
 5226 0c75 FF        		.byte	-1
 5227 0c76 7C        		.byte	124
 5228 0c77 7A        		.byte	122
 5229 0c78 57        		.byte	87
 5230 0c79 2C        		.byte	44
 5231 0c7a BB        		.byte	-69
 5232 0c7b D5        		.byte	-43
 5233 0c7c 09        		.byte	9
 5234 0c7d 90        		.byte	-112
 5235 0c7e 83        		.byte	-125
 5236 0c7f 84        		.byte	-124
 5237 0c80 6B        		.byte	107
 5238 0c81 54        		.byte	84
 5239 0c82 2A        		.byte	42
 5240 0c83 B7        		.byte	-73
 5241 0c84 CD        		.byte	-51
 5242 0c85 F9        		.byte	-7
 5243 0c86 51        		.byte	81
 5244 0c87 01        		.byte	1
 5245 0c88 80        		.byte	-128
 5246 0c89 82        		.byte	-126
 5247 0c8a 86        		.byte	-122
 5248 0c8b 8E        		.byte	-114
 5249 0c8c 7F        		.byte	127
 5250 0c8d 5D        		.byte	93
 5251 0c8e 38        		.byte	56
 5252 0c8f F2        		.byte	-14
 5253 0c90 47        		.byte	71
 5254 0c91 0C        		.byte	12
 5255 0c92 9A        		.byte	-102
 5256 0c93 97        		.byte	-105
 5257 0c94 AC        		.byte	-84
 5258 0c95 DA        		.byte	-38
 5259 0c96 17        		.byte	23
 5260 0c97 8D        		.byte	-115
 5261 0c98 79        		.byte	121
 5262 0c99 51        		.byte	81
 5263 0c9a 01        		.byte	1
 5264 0c9b 61        		.byte	97
 5265 0c9c 40        		.byte	64
 5266 0c9d E3        		.byte	-29
 5267 0c9e 44        		.byte	68
 5268 0c9f EB        		.byte	-21
 5269 0ca0 54        		.byte	84
 5270 0ca1 0B        		.byte	11
 5271 0ca2 75        		.byte	117
 5272 0ca3 68        		.byte	104
 5273 0ca4 33        		.byte	51
 5274 0ca5 C5        		.byte	-59
 5275 0ca6 08        		.byte	8
 5276 0ca7 73        		.byte	115
 5277 0ca8 45        		.byte	69
 5278 0ca9 E9        		.byte	-23
 5279 0caa 31        		.byte	49
 5280 0cab E0        		.byte	-32
 5281 0cac 23        		.byte	35
 5282 0cad C4        		.byte	-60
 5283 0cae EB        		.byte	-21
 5284 0caf 35        		.byte	53
 5285 0cb0 E8        		.byte	-24
 5286 0cb1 33        		.byte	51
 5287 0cb2 C5        		.byte	-59
 5288 0cb3 E9        		.byte	-23
 5289 0cb4 31        		.byte	49
 5290 0cb5 C1        		.byte	-63
 5291 0cb6 E1        		.byte	-31
 5292 0cb7 40        		.byte	64
 5293 0cb8 02        		.byte	2
 5294 0cb9 86        		.byte	-122
 5295 0cba 8E        		.byte	-114
 5296 0cbb 7F        		.byte	127
 5297 0cbc 7C        		.byte	124
 5298 0cbd 7A        		.byte	122
 5299 0cbe 76        		.byte	118
 5300 0cbf 6E        		.byte	110
 5301 0cc0 3F        		.byte	63
 5302 0cc1 DD        		.byte	-35
 5303 0cc2 19        		.byte	25
 5304 0cc3 B0        		.byte	-80
 5305 0cc4 E2        		.byte	-30
 5306 0cc5 46        		.byte	70
 5307 0cc6 0E        		.byte	14
 5308 0cc7 9E        		.byte	-98
 5309 0cc8 9F        		.byte	-97
 5310 0cc9 BC        		.byte	-68
 5311 0cca DB        		.byte	-37
 5312 0ccb 15        		.byte	21
 5313 0ccc A8        		.byte	-88
 5314 0ccd D2        		.byte	-46
 5315 0cce 07        		.byte	7
 5316 0ccf 6D        		.byte	109
 5317 0cd0 39        		.byte	57
 5318 0cd1 F0        		.byte	-16
 5319 0cd2 43        		.byte	67
 5320 0cd3 E5        		.byte	-27
 5321 0cd4 29        		.byte	41
 5322 0cd5 B1        		.byte	-79
 5323 0cd6 E0        		.byte	-32
 5324 0cd7 23        		.byte	35
 5325 0cd8 A5        		.byte	-91
 5326 0cd9 C8        		.byte	-56
 5327 0cda 12        		.byte	18
 5328 0cdb A6        		.byte	-90
 5329 0cdc CE        		.byte	-50
 5330 0cdd 1E        		.byte	30
 5331 0cde 9F        		.byte	-97
 5332 0cdf BC        		.byte	-68
 5333 0ce0 FA        		.byte	-6
 5334 0ce1 76        		.byte	118
 5335 0ce2 6E        		.byte	110
 5336 0ce3 3F        		.byte	63
 5337 0ce4 FC        		.byte	-4
 5338 0ce5 5B        		.byte	91
 5339 0ce6 34        		.byte	52
 5340 0ce7 EA        		.byte	-22
 5341 0ce8 56        		.byte	86
 5342 0ce9 0F        		.byte	15
 5343 0cea 9C        		.byte	-100
 5344 0ceb BA        		.byte	-70
 5345 0cec D7        		.byte	-41
 5346 0ced 0D        		.byte	13
 5347 0cee 79        		.byte	121
 5348 0cef 51        		.byte	81
 5349 0cf0 01        		.byte	1
 5350 0cf1 80        		.byte	-128
 5351 0cf2 63        		.byte	99
 5352 0cf3 25        		.byte	37
 5353 0cf4 C8        		.byte	-56
 5354 0cf5 12        		.byte	18
 5355 0cf6 87        		.byte	-121
 5356 0cf7 6D        		.byte	109
 5357 0cf8 39        		.byte	57
 5358 0cf9 F0        		.byte	-16
 5359 0cfa 62        		.byte	98
 5360 0cfb 46        		.byte	70
 5361 0cfc EF        		.byte	-17
 5362 0cfd 3D        		.byte	61
 5363 0cfe D9        		.byte	-39
 5364 0cff 30        		.byte	48
 5365 0d00 E2        		.byte	-30
 5366 0d01 27        		.byte	39
 5367 0d02 AD        		.byte	-83
 5368 0d03 D8        		.byte	-40
 5369 0d04 32        		.byte	50
 5370 0d05 E6        		.byte	-26
 5371 0d06 4E        		.byte	78
 5372 0d07 FF        		.byte	-1
 5373 0d08 7C        		.byte	124
 5374 0d09 7A        		.byte	122
 5375 0d0a 76        		.byte	118
 5376 0d0b 6E        		.byte	110
 5377 0d0c 5E        		.byte	94
 5378 0d0d 1F        		.byte	31
 5379 0d0e BC        		.byte	-68
 5380 0d0f DB        		.byte	-37
 5381 0d10 15        		.byte	21
 5382 0d11 A8        		.byte	-88
 5383 0d12 D2        		.byte	-46
 5384 0d13 26        		.byte	38
 5385 0d14 CE        		.byte	-50
 5386 0d15 1E        		.byte	30
 5387 0d16 9F        		.byte	-97
 5388 0d17 9D        		.byte	-99
 5389 0d18 99        		.byte	-103
 5390 0d19 91        		.byte	-111
 5391 0d1a A0        		.byte	-96
 5392 0d1b C2        		.byte	-62
 5393 0d1c E7        		.byte	-25
 5394 0d1d 2D        		.byte	45
 5395 0d1e D8        		.byte	-40
 5396 0d1f 13        		.byte	19
 5397 0d20 85        		.byte	-123
 5398 0d21 69        		.byte	105
 5399 0d22 50        		.byte	80
 5400 0d23 22        		.byte	34
 5401 0d24 A7        		.byte	-89
 5402 0d25 CC        		.byte	-52
 5403 0d26 1A        		.byte	26
 5404 0d27 B6        		.byte	-74
 5405 0d28 CF        		.byte	-49
 5406 0d29 1C        		.byte	28
 5407 0d2a BA        		.byte	-70
 5408 0d2b F6        		.byte	-10
 5409 0d2c 6E        		.byte	110
 5410 0d2d 5E        		.byte	94
 5411 0d2e 3E        		.byte	62
 5412 0d2f DF        		.byte	-33
 5413 0d30 1D        		.byte	29
 5414 0d31 B8        		.byte	-72
 5415 0d32 D3        		.byte	-45
 5416 0d33 24        		.byte	36
 5417 0d34 AB        		.byte	-85
 5418 0d35 D4        		.byte	-44
 5419 0d36 2A        		.byte	42
 5420 0d37 D6        		.byte	-42
 5421 0d38 0F        		.byte	15
 5422 0d39 7D        		.byte	125
 5423 0d3a 59        		.byte	89
 5424 0d3b 11        		.byte	17
 5425 0d3c A0        		.byte	-96
 5426 0d3d C2        		.byte	-62
 5427 0d3e E7        		.byte	-25
 5428 0d3f 4C        		.byte	76
 5429 0d40 1A        		.byte	26
 5430 0d41 97        		.byte	-105
 5431 0d42 8D        		.byte	-115
 5432 0d43 98        		.byte	-104
 5433 0d44 93        		.byte	-109
 5434 0d45 A4        		.byte	-92
 5435 0d46 CA        		.byte	-54
 5436 0d47 F7        		.byte	-9
 5437 0d48 6C        		.byte	108
 5438 0d49 5A        		.byte	90
 5439 0d4a 17        		.byte	23
 5440 0d4b AC        		.byte	-84
 5441 0d4c BB        		.byte	-69
 5442 0d4d F4        		.byte	-12
 5443 0d4e 6A        		.byte	106
 5444 0d4f 56        		.byte	86
 5445 0d50 0F        		.byte	15
 5446 0d51 9C        		.byte	-100
 5447 0d52 BA        		.byte	-70
 5448 0d53 D7        		.byte	-41
 5449 0d54 0D        		.byte	13
 5450 0d55 98        		.byte	-104
 5451 0d56 93        		.byte	-109
 5452 0d57 A4        		.byte	-92
 5453 0d58 CA        		.byte	-54
 5454 0d59 F7        		.byte	-9
 5455 0d5a 6C        		.byte	108
 5456 0d5b 3B        		.byte	59
 5457 0d5c D5        		.byte	-43
 5458 0d5d 09        		.byte	9
 5459 0d5e 71        		.byte	113
 5460 0d5f 60        		.byte	96
 5461 0d60 42        		.byte	66
 5462 0d61 06        		.byte	6
 5463 0d62 6F        		.byte	111
 5464 0d63 3D        		.byte	61
 5465 0d64 D9        		.byte	-39
 5466 0d65 30        		.byte	48
 5467 0d66 C3        		.byte	-61
 5468 0d67 04        		.byte	4
 5469 0d68 8A        		.byte	-118
 5470 0d69 96        		.byte	-106
 5471 0d6a 8F        		.byte	-113
 5472 0d6b 7D        		.byte	125
 5473 0d6c 78        		.byte	120
 5474 0d6d 53        		.byte	83
 5475 0d6e 24        		.byte	36
 5476 0d6f CA        		.byte	-54
 5477 0d70 F7        		.byte	-9
 5478 0d71 4D        		.byte	77
 5479 0d72 18        		.byte	24
 5480 0d73 B2        		.byte	-78
 5481 0d74 E6        		.byte	-26
 5482 0d75 4E        		.byte	78
 5483 0d76 FF        		.byte	-1
 5484 0d77 5D        		.byte	93
 5485 0d78 38        		.byte	56
 5486 0d79 D3        		.byte	-45
 5487 0d7a 05        		.byte	5
 5488 0d7b 69        		.byte	105
 5489 0d7c 50        		.byte	80
 5490 0d7d 03        		.byte	3
 5491 0d7e 84        		.byte	-124
 5492 0d7f 8A        		.byte	-118
 5493 0d80 96        		.byte	-106
 5494 0d81 8F        		.byte	-113
 5495 0d82 9C        		.byte	-100
 5496 0d83 9B        		.byte	-101
 5497 0d84 B4        		.byte	-76
 5498 0d85 EA        		.byte	-22
 5499 0d86 37        		.byte	55
 5500 0d87 EC        		.byte	-20
 5501 0d88 5A        		.byte	90
 5502 0d89 17        		.byte	23
 5503 0d8a AC        		.byte	-84
 5504 0d8b BB        		.byte	-69
 5505 0d8c F4        		.byte	-12
 5506 0d8d 6A        		.byte	106
 5507 0d8e 37        		.byte	55
 5508 0d8f CD        		.byte	-51
 5509 0d90 F9        		.byte	-7
 5510 0d91 70        		.byte	112
 5511 0d92 43        		.byte	67
 5512 0d93 E5        		.byte	-27
 5513 0d94 48        		.byte	72
 5514 0d95 F3        		.byte	-13
 5515 0d96 45        		.byte	69
 5516 0d97 08        		.byte	8
 5517 0d98 92        		.byte	-110
 5518 0d99 87        		.byte	-121
 5519 0d9a 8C        		.byte	-116
 5520 0d9b 7B        		.byte	123
 5521 0d9c 74        		.byte	116
 5522 0d9d 4B        		.byte	75
 5523 0d9e F5        		.byte	-11
 5524 0d9f 49        		.byte	73
 5525 0da0 F1        		.byte	-15
 5526 0da1 41        		.byte	65
 5527 0da2 E1        		.byte	-31
 5528 0da3 40        		.byte	64
 5529 0da4 02        		.byte	2
 5530 0da5 86        		.byte	-122
 5531 0da6 6F        		.byte	111
 5532 0da7 3D        		.byte	61
 5533 0da8 D9        		.byte	-39
 5534 0da9 11        		.byte	17
 5535 0daa 81        		.byte	-127
 5536 0dab 61        		.byte	97
 5537 0dac 40        		.byte	64
 5538 0dad 02        		.byte	2
 5539 0dae 86        		.byte	-122
 5540 0daf 6F        		.byte	111
 5541 0db0 3D        		.byte	61
 5542 0db1 F8        		.byte	-8
 5543 0db2 53        		.byte	83
 5544 0db3 24        		.byte	36
 5545 0db4 CA        		.byte	-54
 5546 0db5 16        		.byte	22
 5547 0db6 AE        		.byte	-82
 5548 0db7 DE        		.byte	-34
 5549 0db8 3E        		.byte	62
 5550 0db9 DF        		.byte	-33
 5551 0dba 1D        		.byte	29
 5552 0dbb 99        		.byte	-103
 5553 0dbc 91        		.byte	-111
 5554 0dbd A0        		.byte	-96
 5555 0dbe A3        		.byte	-93
 5556 0dbf C4        		.byte	-60
 5557 0dc0 EB        		.byte	-21
 5558 0dc1 35        		.byte	53
 5559 0dc2 E8        		.byte	-24
 5560 0dc3 52        		.byte	82
 5561 0dc4 07        		.byte	7
 5562 0dc5 8C        		.byte	-116
 5563 0dc6 7B        		.byte	123
 5564 0dc7 74        		.byte	116
 5565 0dc8 6A        		.byte	106
 5566 0dc9 37        		.byte	55
 5567 0dca CD        		.byte	-51
 5568 0dcb F9        		.byte	-7
 5569 0dcc 51        		.byte	81
 5570 0dcd 20        		.byte	32
 5571 0dce C2        		.byte	-62
 5572 0dcf 06        		.byte	6
 5573 0dd0 8E        		.byte	-114
 5574 0dd1 7F        		.byte	127
 5575 0dd2 7C        		.byte	124
 5576 0dd3 7A        		.byte	122
 5577 0dd4 57        		.byte	87
 5578 0dd5 0D        		.byte	13
 5579 0dd6 79        		.byte	121
 5580 0dd7 51        		.byte	81
 5581 0dd8 20        		.byte	32
 5582 0dd9 C2        		.byte	-62
 5583 0dda 06        		.byte	6
 5584 0ddb 8E        		.byte	-114
 5585 0ddc 7F        		.byte	127
 5586 0ddd 5D        		.byte	93
 5587 0dde 19        		.byte	25
 5588 0ddf B0        		.byte	-80
 5589 0de0 C3        		.byte	-61
 5590 0de1 E5        		.byte	-27
 5591 0de2 29        		.byte	41
 5592 0de3 D0        		.byte	-48
 5593 0de4 22        		.byte	34
 5594 0de5 A7        		.byte	-89
 5595 0de6 CC        		.byte	-52
 5596 0de7 FB        		.byte	-5
 5597 0de8 55        		.byte	85
 5598 0de9 28        		.byte	40
 5599 0dea B3        		.byte	-77
 5600 0deb C5        		.byte	-59
 5601 0dec E9        		.byte	-23
 5602 0ded 50        		.byte	80
 5603 0dee 22        		.byte	34
 5604 0def A7        		.byte	-89
 5605 0df0 CC        		.byte	-52
 5606 0df1 1A        		.byte	26
 5607 0df2 B6        		.byte	-74
 5608 0df3 CF        		.byte	-49
 5609 0df4 1C        		.byte	28
 5610 0df5 9B        		.byte	-101
 5611 0df6 B4        		.byte	-76
 5612 0df7 EA        		.byte	-22
 5613 0df8 56        		.byte	86
 5614 0df9 2E        		.byte	46
 5615 0dfa BF        		.byte	-65
 5616 0dfb DD        		.byte	-35
 5617 0dfc 19        		.byte	25
 5618 0dfd B0        		.byte	-80
 5619 0dfe E2        		.byte	-30
 5620 0dff 46        		.byte	70
 5621 0e00 EF        		.byte	-17
 5622 0e01 5C        		.byte	92
 5623 0e02 3A        		.byte	58
 5624 0e03 D7        		.byte	-41
 5625 0e04 0D        		.byte	13
 5626 0e05 79        		.byte	121
 5627 0e06 70        		.byte	112
 5628 0e07 62        		.byte	98
 5629 0e08 27        		.byte	39
 5630 0e09 AD        		.byte	-83
 5631 0e0a D8        		.byte	-40
 5632 0e0b 13        		.byte	19
 5633 0e0c A4        		.byte	-92
 5634 0e0d AB        		.byte	-85
 5635 0e0e D4        		.byte	-44
 5636 0e0f 2A        		.byte	42
 5637 0e10 B7        		.byte	-73
 5638 0e11 EC        		.byte	-20
 5639 0e12 5A        		.byte	90
 5640 0e13 17        		.byte	23
 5641 0e14 8D        		.byte	-115
 5642 0e15 79        		.byte	121
 5643 0e16 70        		.byte	112
 5644 0e17 43        		.byte	67
 5645 0e18 04        		.byte	4
 5646 0e19 8A        		.byte	-118
 5647 0e1a 77        		.byte	119
 5648 0e1b 4D        		.byte	77
 5649 0e1c F9        		.byte	-7
 5650 0e1d 70        		.byte	112
 5651 0e1e 62        		.byte	98
 5652 0e1f 27        		.byte	39
 5653 0e20 CC        		.byte	-52
 5654 0e21 1A        		.byte	26
 5655 0e22 B6        		.byte	-74
 5656 0e23 EE        		.byte	-18
 5657 0e24 3F        		.byte	63
 5658 0e25 DD        		.byte	-35
 5659 0e26 38        		.byte	56
 5660 0e27 F2        		.byte	-14
 5661 0e28 47        		.byte	71
 5662 0e29 0C        		.byte	12
 5663 0e2a 7B        		.byte	123
 5664 0e2b 55        		.byte	85
 5665 0e2c 28        		.byte	40
 5666 0e2d D2        		.byte	-46
 5667 0e2e 07        		.byte	7
 5668 0e2f 8C        		.byte	-116
 5669 0e30 9A        		.byte	-102
 5670 0e31 B6        		.byte	-74
 5671 0e32 CF        		.byte	-49
 5672 0e33 1C        		.byte	28
 5673 0e34 9B        		.byte	-101
 5674 0e35 95        		.byte	-107
 5675 0e36 89        		.byte	-119
 5676 0e37 71        		.byte	113
 5677 0e38 60        		.byte	96
 5678 0e39 42        		.byte	66
 5679 0e3a E7        		.byte	-25
 5680 0e3b 2D        		.byte	45
 5681 0e3c D8        		.byte	-40
 5682 0e3d 13        		.byte	19
 5683 0e3e 85        		.byte	-123
 5684 0e3f 88        		.byte	-120
 5685 0e40 92        		.byte	-110
 5686 0e41 A6        		.byte	-90
 5687 0e42 CE        		.byte	-50
 5688 0e43 1E        		.byte	30
 5689 0e44 BE        		.byte	-66
 5690 0e45 FE        		.byte	-2
 5691 0e46 7E        		.byte	126
 5692 0e47 7E        		.byte	126
 5693 0e48 7E        		.byte	126
 5694 0e49 7E        		.byte	126
 5695 0e4a 7E        		.byte	126
 5696 0e4b 7E        		.byte	126
 5697 0e4c 5F        		.byte	95
 5698 0e4d 3C        		.byte	60
 5699 0e4e DB        		.byte	-37
 5700 0e4f 34        		.byte	52
 5701 0e50 EA        		.byte	-22
 5702 0e51 56        		.byte	86
 5703 0e52 2E        		.byte	46
 5704 0e53 DE        		.byte	-34
 5705 0e54 1F        		.byte	31
 5706 0e55 BC        		.byte	-68
 5707 0e56 FA        		.byte	-6
 5708 0e57 76        		.byte	118
 5709 0e58 4F        		.byte	79
 5710 0e59 1C        		.byte	28
 5711 0e5a 9B        		.byte	-101
 5712 0e5b 95        		.byte	-107
 5713 0e5c 89        		.byte	-119
 5714 0e5d 71        		.byte	113
 5715 0e5e 60        		.byte	96
 5716 0e5f 23        		.byte	35
 5717 0e60 A5        		.byte	-91
 5718 0e61 C8        		.byte	-56
 5719 0e62 F3        		.byte	-13
 5720 0e63 64        		.byte	100
 5721 0e64 4A        		.byte	74
 5722 0e65 16        		.byte	22
 5723 0e66 AE        		.byte	-82
 5724 0e67 BF        		.byte	-65
 5725 0e68 FC        		.byte	-4
 5726 0e69 7A        		.byte	122
 5727 0e6a 76        		.byte	118
 5728 0e6b 6E        		.byte	110
 5729 0e6c 3F        		.byte	63
 5730 0e6d DD        		.byte	-35
 5731 0e6e 19        		.byte	25
 5732 0e6f 91        		.byte	-111
 5733 0e70 A0        		.byte	-96
 5734 0e71 A3        		.byte	-93
 5735 0e72 C4        		.byte	-60
 5736 0e73 0A        		.byte	10
 5737 0e74 77        		.byte	119
 5738 0e75 4D        		.byte	77
 5739 0e76 18        		.byte	24
 5740 0e77 B2        		.byte	-78
 5741 0e78 E6        		.byte	-26
 5742 0e79 2F        		.byte	47
 5743 0e7a DC        		.byte	-36
 5744 0e7b 1B        		.byte	27
 5745 0e7c 95        		.byte	-107
 5746 0e7d A8        		.byte	-88
 5747 0e7e B3        		.byte	-77
 5748 0e7f C5        		.byte	-59
 5749 0e80 E9        		.byte	-23
 5750 0e81 50        		.byte	80
 5751 0e82 22        		.byte	34
 5752 0e83 C6        		.byte	-58
 5753 0e84 0E        		.byte	14
 5754 0e85 9E        		.byte	-98
 5755 0e86 9F        		.byte	-97
 5756 0e87 9D        		.byte	-99
 5757 0e88 B8        		.byte	-72
 5758 0e89 F2        		.byte	-14
 5759 0e8a 47        		.byte	71
 5760 0e8b ED        		.byte	-19
 5761 0e8c 58        		.byte	88
 5762 0e8d 13        		.byte	19
 5763 0e8e 85        		.byte	-123
 5764 0e8f 69        		.byte	105
 5765 0e90 50        		.byte	80
 5766 0e91 22        		.byte	34
 5767 0e92 A7        		.byte	-89
 5768 0e93 AD        		.byte	-83
 5769 0e94 B9        		.byte	-71
 5770 0e95 D1        		.byte	-47
 5771 0e96 01        		.byte	1
 5772 0e97 80        		.byte	-128
 5773 0e98 82        		.byte	-126
 5774 0e99 86        		.byte	-122
 5775 0e9a 8E        		.byte	-114
 5776 0e9b 7F        		.byte	127
 5777 0e9c 5D        		.byte	93
 5778 0e9d 19        		.byte	25
 5779 0e9e 91        		.byte	-111
 5780 0e9f 81        		.byte	-127
 5781 0ea0 80        		.byte	-128
 5782 0ea1 82        		.byte	-126
 5783 0ea2 67        		.byte	103
 5784 0ea3 4C        		.byte	76
 5785 0ea4 FB        		.byte	-5
 5786 0ea5 55        		.byte	85
 5787 0ea6 28        		.byte	40
 5788 0ea7 B3        		.byte	-77
 5789 0ea8 E4        		.byte	-28
 5790 0ea9 2B        		.byte	43
 5791 0eaa D4        		.byte	-44
 5792 0eab 2A        		.byte	42
 5793 0eac D6        		.byte	-42
 5794 0ead 2E        		.byte	46
 5795 0eae DE        		.byte	-34
 5796 0eaf 3E        		.byte	62
 5797 0eb0 FE        		.byte	-2
 5798 0eb1 5F        		.byte	95
 5799 0eb2 1D        		.byte	29
 5800 0eb3 B8        		.byte	-72
 5801 0eb4 D3        		.byte	-45
 5802 0eb5 24        		.byte	36
 5803 0eb6 AB        		.byte	-85
 5804 0eb7 B5        		.byte	-75
 5805 0eb8 E8        		.byte	-24
 5806 0eb9 52        		.byte	82
 5807 0eba 26        		.byte	38
 5808 0ebb AF        		.byte	-81
 5809 0ebc BD        		.byte	-67
 5810 0ebd D9        		.byte	-39
 5811 0ebe 30        		.byte	48
 5812 0ebf C3        		.byte	-61
 5813 0ec0 04        		.byte	4
 5814 0ec1 6B        		.byte	107
 5815 0ec2 54        		.byte	84
 5816 0ec3 2A        		.byte	42
 5817 0ec4 B7        		.byte	-73
 5818 0ec5 CD        		.byte	-51
 5819 0ec6 F9        		.byte	-7
 5820 0ec7 70        		.byte	112
 5821 0ec8 43        		.byte	67
 5822 0ec9 E5        		.byte	-27
 5823 0eca 48        		.byte	72
 5824 0ecb 12        		.byte	18
 5825 0ecc A6        		.byte	-90
 5826 0ecd AF        		.byte	-81
 5827 0ece DC        		.byte	-36
 5828 0ecf 1B        		.byte	27
 5829 0ed0 B4        		.byte	-76
 5830 0ed1 CB        		.byte	-53
 5831 0ed2 14        		.byte	20
 5832 0ed3 8B        		.byte	-117
 5833 0ed4 75        		.byte	117
 5834 0ed5 49        		.byte	73
 5835 0ed6 10        		.byte	16
 5836 0ed7 83        		.byte	-125
 5837 0ed8 65        		.byte	101
 5838 0ed9 29        		.byte	41
 5839 0eda B1        		.byte	-79
 5840 0edb C1        		.byte	-63
 5841 0edc 00        		.byte	0
 5842 0edd 63        		.byte	99
 5843 0ede 44        		.byte	68
 5844 0edf EB        		.byte	-21
 5845 0ee0 54        		.byte	84
 5846 0ee1 0B        		.byte	11
 5847 0ee2 94        		.byte	-108
 5848 0ee3 8B        		.byte	-117
 5849 0ee4 75        		.byte	117
 5850 0ee5 68        		.byte	104
 5851 0ee6 33        		.byte	51
 5852 0ee7 C5        		.byte	-59
 5853 0ee8 E9        		.byte	-23
 5854 0ee9 31        		.byte	49
 5855 0eea E0        		.byte	-32
 5856 0eeb 42        		.byte	66
 5857 0eec 06        		.byte	6
 5858 0eed 8E        		.byte	-114
 5859 0eee 7F        		.byte	127
 5860 0eef 7C        		.byte	124
 5861 0ef0 7A        		.byte	122
 5862 0ef1 57        		.byte	87
 5863 0ef2 0D        		.byte	13
 5864 0ef3 79        		.byte	121
 5865 0ef4 70        		.byte	112
 5866 0ef5 62        		.byte	98
 5867 0ef6 46        		.byte	70
 5868 0ef7 0E        		.byte	14
 5869 0ef8 9E        		.byte	-98
 5870 0ef9 9F        		.byte	-97
 5871 0efa 9D        		.byte	-99
 5872 0efb B8        		.byte	-72
 5873 0efc D3        		.byte	-45
 5874 0efd 05        		.byte	5
 5875 0efe 69        		.byte	105
 5876 0eff 31        		.byte	49
 5877 0f00 C1        		.byte	-63
 5878 0f01 E1        		.byte	-31
 5879 0f02 21        		.byte	33
 5880 0f03 A1        		.byte	-95
 5881 0f04 C0        		.byte	-64
 5882 0f05 02        		.byte	2
 5883 0f06 67        		.byte	103
 5884 0f07 2D        		.byte	45
 5885 0f08 D8        		.byte	-40
 5886 0f09 13        		.byte	19
 5887 0f0a A4        		.byte	-92
 5888 0f0b CA        		.byte	-54
 5889 0f0c 16        		.byte	22
 5890 0f0d 8F        		.byte	-113
 5891 0f0e 7D        		.byte	125
 5892 0f0f 78        		.byte	120
 5893 0f10 53        		.byte	83
 5894 0f11 05        		.byte	5
 5895 0f12 69        		.byte	105
 5896 0f13 50        		.byte	80
 5897 0f14 03        		.byte	3
 5898 0f15 65        		.byte	101
 5899 0f16 48        		.byte	72
 5900 0f17 12        		.byte	18
 5901 0f18 87        		.byte	-121
 5902 0f19 6D        		.byte	109
 5903 0f1a 39        		.byte	57
 5904 0f1b F0        		.byte	-16
 5905 0f1c 43        		.byte	67
 5906 0f1d E5        		.byte	-27
 5907 0f1e 48        		.byte	72
 5908 0f1f 12        		.byte	18
 5909 0f20 87        		.byte	-121
 5910 0f21 8C        		.byte	-116
 5911 0f22 9A        		.byte	-102
 5912 0f23 97        		.byte	-105
 5913 0f24 8D        		.byte	-115
 5914 0f25 79        		.byte	121
 5915 0f26 51        		.byte	81
 5916 0f27 20        		.byte	32
 5917 0f28 C2        		.byte	-62
 5918 0f29 06        		.byte	6
 5919 0f2a 6F        		.byte	111
 5920 0f2b 5C        		.byte	92
 5921 0f2c 3A        		.byte	58
 5922 0f2d F6        		.byte	-10
 5923 0f2e 6E        		.byte	110
 5924 0f2f 3F        		.byte	63
 5925 0f30 DD        		.byte	-35
 5926 0f31 19        		.byte	25
 5927 0f32 B0        		.byte	-80
 5928 0f33 C3        		.byte	-61
 5929 0f34 E5        		.byte	-27
 5930 0f35 29        		.byte	41
 5931 0f36 B1        		.byte	-79
 5932 0f37 C1        		.byte	-63
 5933 0f38 00        		.byte	0
 5934 0f39 63        		.byte	99
 5935 0f3a 25        		.byte	37
 5936 0f3b A9        		.byte	-87
 5937 0f3c B1        		.byte	-79
 5938 0f3d E0        		.byte	-32
 5939 0f3e 42        		.byte	66
 5940 0f3f E7        		.byte	-25
 5941 0f40 2D        		.byte	45
 5942 0f41 B9        		.byte	-71
 5943 0f42 D1        		.byte	-47
 5944 0f43 20        		.byte	32
 5945 0f44 A3        		.byte	-93
 5946 0f45 C4        		.byte	-60
 5947 0f46 EB        		.byte	-21
 5948 0f47 54        		.byte	84
 5949 0f48 2A        		.byte	42
 5950 0f49 D6        		.byte	-42
 5951 0f4a 0F        		.byte	15
 5952 0f4b 7D        		.byte	125
 5953 0f4c 78        		.byte	120
 5954 0f4d 72        		.byte	114
 5955 0f4e 66        		.byte	102
 5956 0f4f 2F        		.byte	47
 5957 0f50 DC        		.byte	-36
 5958 0f51 3A        		.byte	58
 5959 0f52 F6        		.byte	-10
 5960 0f53 4F        		.byte	79
 5961 0f54 1C        		.byte	28
 5962 0f55 BA        		.byte	-70
 5963 0f56 F6        		.byte	-10
 5964 0f57 6E        		.byte	110
 5965 0f58 3F        		.byte	63
 5966 0f59 FC        		.byte	-4
 5967 0f5a 5B        		.byte	91
 5968 0f5b 15        		.byte	21
 5969 0f5c 89        		.byte	-119
 5970 0f5d 71        		.byte	113
 5971 0f5e 60        		.byte	96
 5972 0f5f 23        		.byte	35
 5973 0f60 A5        		.byte	-91
 5974 0f61 C8        		.byte	-56
 5975 0f62 12        		.byte	18
 5976 0f63 87        		.byte	-121
 5977 0f64 6D        		.byte	109
 5978 0f65 58        		.byte	88
 5979 0f66 32        		.byte	50
 5980 0f67 C7        		.byte	-57
 5981 0f68 0C        		.byte	12
 5982 0f69 9A        		.byte	-102
 5983 0f6a 97        		.byte	-105
 5984 0f6b 8D        		.byte	-115
 5985 0f6c 98        		.byte	-104
 5986 0f6d B2        		.byte	-78
 5987 0f6e E6        		.byte	-26
 5988 0f6f 4E        		.byte	78
 5989 0f70 1E        		.byte	30
 5990 0f71 9F        		.byte	-97
 5991 0f72 9D        		.byte	-99
 5992 0f73 99        		.byte	-103
 5993 0f74 B0        		.byte	-80
 5994 0f75 E2        		.byte	-30
 5995 0f76 46        		.byte	70
 5996 0f77 EF        		.byte	-17
 5997 0f78 5C        		.byte	92
 5998 0f79 3A        		.byte	58
 5999 0f7a D7        		.byte	-41
 6000 0f7b 0D        		.byte	13
 6001 0f7c 98        		.byte	-104
 6002 0f7d B2        		.byte	-78
 6003 0f7e E6        		.byte	-26
 6004 0f7f 2F        		.byte	47
 6005 0f80 BD        		.byte	-67
 6006 0f81 F8        		.byte	-8
 6007 0f82 72        		.byte	114
 6008 0f83 47        		.byte	71
 6009 0f84 ED        		.byte	-19
 6010 0f85 58        		.byte	88
 6011 0f86 13        		.byte	19
 6012 0f87 A4        		.byte	-92
 6013 0f88 CA        		.byte	-54
 6014 0f89 16        		.byte	22
 6015 0f8a 8F        		.byte	-113
 6016 0f8b 9C        		.byte	-100
 6017 0f8c 9B        		.byte	-101
 6018 0f8d 95        		.byte	-107
 6019 0f8e A8        		.byte	-88
 6020 0f8f B3        		.byte	-77
 6021 0f90 E4        		.byte	-28
 6022 0f91 2B        		.byte	43
 6023 0f92 D4        		.byte	-44
 6024 0f93 2A        		.byte	42
 6025 0f94 B7        		.byte	-73
 6026 0f95 CD        		.byte	-51
 6027 0f96 18        		.byte	24
 6028 0f97 93        		.byte	-109
 6029 0f98 A4        		.byte	-92
 6030 0f99 AB        		.byte	-85
 6031 0f9a B5        		.byte	-75
 6032 0f9b C9        		.byte	-55
 6033 0f9c 10        		.byte	16
 6034 0f9d 83        		.byte	-125
 6035 0f9e 65        		.byte	101
 6036 0f9f 48        		.byte	72
 6037 0fa0 12        		.byte	18
 6038 0fa1 87        		.byte	-121
 6039 0fa2 6D        		.byte	109
 6040 0fa3 39        		.byte	57
 6041 0fa4 D1        		.byte	-47
 6042 0fa5 01        		.byte	1
 6043 0fa6 80        		.byte	-128
 6044 0fa7 82        		.byte	-126
 6045 0fa8 86        		.byte	-122
 6046 0fa9 6F        		.byte	111
 6047 0faa 5C        		.byte	92
 6048 0fab 1B        		.byte	27
 6049 0fac B4        		.byte	-76
 6050 0fad CB        		.byte	-53
 6051 0fae F5        		.byte	-11
 6052 0faf 68        		.byte	104
 6053 0fb0 33        		.byte	51
 6054 0fb1 E4        		.byte	-28
 6055 0fb2 4A        		.byte	74
 6056 0fb3 16        		.byte	22
 6057 0fb4 8F        		.byte	-113
 6058 0fb5 7D        		.byte	125
 6059 0fb6 78        		.byte	120
 6060 0fb7 53        		.byte	83
 6061 0fb8 24        		.byte	36
 6062 0fb9 AB        		.byte	-85
 6063 0fba B5        		.byte	-75
 6064 0fbb E8        		.byte	-24
 6065 0fbc 33        		.byte	51
 6066 0fbd E4        		.byte	-28
 6067 0fbe 4A        		.byte	74
 6068 0fbf F7        		.byte	-9
 6069 0fc0 6C        		.byte	108
 6070 0fc1 5A        		.byte	90
 6071 0fc2 17        		.byte	23
 6072 0fc3 AC        		.byte	-84
 6073 0fc4 BB        		.byte	-69
 6074 0fc5 D5        		.byte	-43
 6075 0fc6 28        		.byte	40
 6076 0fc7 B3        		.byte	-77
 6077 0fc8 C5        		.byte	-59
 6078 0fc9 08        		.byte	8
 6079 0fca 92        		.byte	-110
 6080 0fcb 87        		.byte	-121
 6081 0fcc 6D        		.byte	109
 6082 0fcd 39        		.byte	57
 6083 0fce D1        		.byte	-47
 6084 0fcf 20        		.byte	32
 6085 0fd0 A3        		.byte	-93
 6086 0fd1 A5        		.byte	-91
 6087 0fd2 C8        		.byte	-56
 6088 0fd3 12        		.byte	18
 6089 0fd4 A6        		.byte	-90
 6090 0fd5 AF        		.byte	-81
 6091 0fd6 DC        		.byte	-36
 6092 0fd7 1B        		.byte	27
 6093 0fd8 B4        		.byte	-76
 6094 0fd9 CB        		.byte	-53
 6095 0fda 14        		.byte	20
 6096 0fdb AA        		.byte	-86
 6097 0fdc B7        		.byte	-73
 6098 0fdd CD        		.byte	-51
 6099 0fde 18        		.byte	24
 6100 0fdf 93        		.byte	-109
 6101 0fe0 85        		.byte	-123
 6102 0fe1 69        		.byte	105
 6103 0fe2 50        		.byte	80
 6104 0fe3 03        		.byte	3
 6105 0fe4 65        		.byte	101
 6106 0fe5 29        		.byte	41
 6107 0fe6 B1        		.byte	-79
 6108 0fe7 C1        		.byte	-63
 6109 0fe8 00        		.byte	0
 6110 0fe9 82        		.byte	-126
 6111 0fea 86        		.byte	-122
 6112 0feb 6F        		.byte	111
 6113 0fec 3D        		.byte	61
 6114 0fed D9        		.byte	-39
 6115 0fee 30        		.byte	48
 6116 0fef C3        		.byte	-61
 6117 0ff0 04        		.byte	4
 6118 0ff1 6B        		.byte	107
 6119 0ff2 35        		.byte	53
 6120 0ff3 E8        		.byte	-24
 6121 0ff4 33        		.byte	51
 6122 0ff5 E4        		.byte	-28
 6123 0ff6 2B        		.byte	43
 6124 0ff7 D4        		.byte	-44
 6125 0ff8 0B        		.byte	11
 6126 0ff9 75        		.byte	117
 6127 0ffa A9        		.byte	-87
 6128 0ffb 6B        		.byte	107
 6129 0ffc BB        		.byte	-69
 6130 0ffd FF        		.byte	-1
 6131               		.text
 6132               	.Letext0:
 6133               		.file 2 "/usr/lib/avr/include/stdint.h"
 6134               		.file 3 "srom_3360_0x03.h"
 6135               		.file 4 "usb_mouse.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccfWkvFD.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccfWkvFD.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccfWkvFD.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccfWkvFD.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccfWkvFD.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccfWkvFD.s:13     .text.rotary_process:0000000000000000 rotary_process
     /tmp/ccfWkvFD.s:2030   .bss:0000000000000005 state
     /tmp/ccfWkvFD.s:2001   .rodata:0000000000000000 ttable
     /tmp/ccfWkvFD.s:51     .text.startup.main:0000000000000000 main
     /tmp/ccfWkvFD.s:2036   .progmem.data:0000000000000000 srom
     /tmp/ccfWkvFD.s:1995   .bss:0000000000000004 oldpinstate
     /tmp/ccfWkvFD.s:1990   .bss:0000000000000003 whl_time
     /tmp/ccfWkvFD.s:1980   .bss:0000000000000001 rev
     /tmp/ccfWkvFD.s:1975   .bss:0000000000000000 stack
     /tmp/ccfWkvFD.s:1969   .data:0000000000000000 _rev
     /tmp/ccfWkvFD.s:1985   .bss:0000000000000002 whl_eighth

UNDEFINED SYMBOLS
usb_init
usb_configured
__do_copy_data
__do_clear_bss
